[
    {
        "type": "text",
        "text": "一种基于快速重路由的域内节能路由算法",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "耿海军‘，尹霞²，郭小英1 ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "(1．山西大学 软件学院，太原 030006;2.清华大学 计算机科学与技术系，北京 100084)",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "摘要：降低互联网的能耗成为亟待解决的一个科学问题。然而已有的路由节能方案存在都会不同程度的降低网络性能，如网络拥塞、路由振荡、路由可用性和流量分布不均匀等问题，以及需要网络的实时流量信息，从而导致算法复杂度较高的问题。设计一种基于快速重路由的绿色节能方案EEIPFRR，兼顾节能、网络性能和算法复杂度。实验结果表明，与DLF算法比较，EEIPFRR不仅可以降低网络能耗，并且具有较小的路径拉伸度、较低的算法复杂度和的较小的最大链路利用率。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "关键词：节能路由算法；快速重路由；网络能耗 中图分类号：TP doi:10.19734/j.issn.1001-3695.2018.07.0470 ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Energy efficient scheme based on ip fast reroute in intra-domain link state networks ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Geng Haijun1, Yin Xia², Guo Xiaoying1 (1.SchoolofSoftwareEngineering,hanXi UniversityTayuanO3o6,China;2.Dept.ofComputer Science&Techology Tsinghua University,Beijing l0oo84, China) ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Abstract: Reducing the energy consumption of the Internet has become an urgent problem.However,the existing energy eficient routing algorithms are facing thefollwing two problems:a)allof them willdegrade the networkperformance in varying forms,suchasnetworkcongestionroutingflap,routingavailabilityanduneven traficdistribution;b)allofthmrequire real-time trafic information,which lead to highcomplexityof thealgorithm.Therefore,this paper designs a green energy efcient scheme EIPFRR which is basedon IPfastreroute,taking into acount theenergysaving,network performanceand algorithmcomplexity.The experimentalresults show that compared withDLFalgorithm,itcannotonlyreduce network energy consumption,but also have lesspath stretch,lower algorithm complexity and maximum link utilization. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Key words: Energy efficient routing algorithm; IP fast reroute; Network energy consumption ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "0 引言",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "随着全球经济的飞速发展，伴随而来的是温室气体的大量排放。越来越多的研究表明温室气体带来的环境问题正在威胁这人类赖以生存的地球环境。欧洲联盟公布的一份报告指出，如果到二氧化碳的排放量能够减少 $1 5 \\% - 3 0 \\%$ ，才能保证到2020年全球温度的增长控制在2摄氏度以下。温室气体的排放同样影响经济的发展。互联网在设计之初并没有将节能作为设计目标，而是更多的强调如何利用冗余配置来增加网络的健壮性。互联网通常根据峰值流量来设计网络的配置来应对突发流量，因此当网络流量较低时，所有的设备依然在消耗着能量。为了应对网络中的故障，互联网配置了大量的冗余设备，只有当主设备发生故障时，备用设备才会被利用，进一步加剧了互联网的能源消耗。相关测量表明，在Abilene网络中，链路利用率基本保持在 $20 \\%$ 以下。互联网的设计目标和节能环保是背道而驰的，因此研究互联网节能在技术上是一个具有挑战性的研究领域。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "然而已有的节能路由算法需要实时流量矩阵，导致算法复杂度过高，无法部署在现实的互联网中[l-2]。因此，本文提出一种基于快速重路由的域内节能路由算法（An energy efficientscheme based on ip fast reroute in intra-domain link state networks,EEIPFRR）。为了实现EEIPFRR，必须避免出现路由环路。已有的快速重路由方案可以确保路由没有环路，但是这些方案主要针对网络中单故障情形[3]。然而，节能路由需要同时尽可能多的关闭网路中的节点和链路，从而使得节能最大化。因此，已有的快速重路由方案无法直接应用在节能路由中。为了解决该问题，本文首先研究如何计算节点对之间的备份路径从而使得该路径可以绕过多条链路，然后对基于快速重路由问题进行了建模，最后提出了一种启发式的算法EEIPFRR。EEIPFRR的优势主要有以下几个方面：",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "a）EEIPFRR算法复杂度低。  \nb）EEIPFRR不需要实时流量矩阵。  \nc）EEIPFRR路径拉伸度较低。  \nd）EEIPFRR可以均衡网络流量，不会造成网络拥塞。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1 国内外研究现状",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "本章首先介绍快速重路由算法，然后介绍节能算法。已有的快速重路由算法根据是否需要辅助机制可以分为逐跳方式和非逐跳方式。逐跳方式主要包括等价多路径[4]、无环路备选方案[5]和TBFH[6]等。非逐跳方式主要包括Not-Via[7]、隧道技术[8]和多协议标签交换技术[9等。针对互联网节能问题，学术界已经进行了长时间的研究和探索[10]。降低互联网能耗的方法主要包括资源整合、虚拟化、选择性连接和比例计算等[II]。文献[12]调研了上述四种节能策略，并且详细讨论了各自的实现细节。实际测量表明[13]，网络中链路的能耗在很大程度上不依赖于它的利用率，而取决于链路的实际带宽。基于上述的测量结果，大量的工作[14-16]研究如何通过睡眠模式来降低网络能耗，该方法主要通过关闭网络中的节点和链路达到节能的效果。文献[17]首先根据链路介数对网络中的链路进行升序排序，然后根据代数连通度来判断是否可以关闭链路。文献[18]将节能问题归结为一个整数规划模型，并且证明了该问题是一个NP-Hard 难题，然后提出利用启发式算法DLF求解近似最优解。文献[19通过修改开放最短路径协议达到节能的目的，但是该方案容易造成网络拥塞。作者在文章[20]中提出了一种节能方案REsPoNse，该算法采用离线方法计算节点对之间的能耗关键路径和重路由路径，当网络中链路利用率较低时利用能耗关键路径，从而实现路由节能。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2 EEIPFRR方案概述和问题描述",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/18b9eb0fb5a260a7c5565149fc62cc373d3d5f930d456556ebc1d4c331d3acff.jpg",
        "img_caption": [
            "图1 EEIPFRR例子",
            "Fig.1Example for explainingEEIPFRR "
        ],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "为了便于读者理解EEIPFRR，下面通过一个例子来说明该方案的工作原理。在图1中，如果链路(a,c)的重路由路径为(a.b,c)，当关闭链路（a,c）时，节点a依然可以通过重路由路径到达节点c，而不会影响报文的正常转发。同理，如果链路(b.d)的重路由路径为(b,c.d)，因此当关闭链路（b,d）时，节点b依然可以通过重路由路径到达节点d。根据上述描述可知，在图1中可以关闭链路(a,c)和(b,d)达到节能的效果。从该例子可以看出，任意的链路和该链路对应的重路由路径构成了一个简单环，实现EEIPFRR的关键问题就是如何计算网络中所有的链路对应的环。为了便于描述，下面将给出链路环的形式化定义。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "定义1：在图 $G = ( V , E )$ 中，对于网络中任意一条链路 $( u , \\nu )$ ，本文称路径 $( u , u _ { 2 } , . . . u _ { i } , u _ { i + 1 } . . . \\nu )$ 是该链路的一条备份路径当且仅当 $( u , \\nu ) \\not \\in ( u , u _ { 2 } , . . . u _ { i } , u _ { i + 1 } . . . \\nu )$ ，由链路 $( u , \\nu )$ 和其备份路径组成的环为该链路的环LC（LinkCircle），表示为 $C ( u , \\nu )$ 。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "下面通过一个例子来解释定义1。在图1中，如果链路(a,c)的重路由路径为(a,b,c）和(a,b,d,c），则$C ( a , c ) = \\{ ( a , b , c ) , ( a , b , d , c ) \\}$ ，即链路 $( \\mathrm { a } , \\mathrm { c } )$ 有两个LC环。因此，为了实现EEIPFRR，首先需要为网络中所有的链路计算LC环，然后通过LC 环关闭网络中的链路，最后计算出所有端到端节点对之间的备份路径。然而对于一个有 $N$ 个节点， $M$ 条链路的的网络中，该网络中LC环的数量很可能会大于 $M$ ，如果在每个LC环中选择一条链路进行关闭，则会导致网络不连通。因此，并不是所有的LC环都可以关闭链路，因此如何从所有的LC 环中选择特定的链路进行关闭是本文面临的一个挑战。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "本文解决的问题是最大化关闭网络中的链路，并且保证所有的源-目的对之间存在一条快速重路由路径。当关闭网络中的链路时，要避免网络出现拥塞现象。因此，基于快速重路由的节能方案可以形式化的描述为",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "目标： $\\operatorname* { m a x } | U | \\ U \\subset E$ (1)  \n条件： $\\forall l \\in E$ ， $u ( l ) / c ( l ) < \\theta$ (2）$\\forall l \\in { U } , \\exists C ( s , d )$ 是LC环， $C ( s , d ) \\cap U = l \\left( 3 \\right)$ ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $U$ 表示关闭链路的集合， $u ( l )$ 表示经过链路 $\\mathbf { \\xi } _ { l }$ 的实际流量， $c ( l )$ 表示链路 $l$ 的带宽， $\\theta$ 表示链路利用率的阈值。式（1)为目标函数；即最大化关闭网络中的链路。式（2）表示链路利用率约束条件；式（3）为对于任意一条关闭的链路，该链路必定属于某个LC环，从而可以保证网络中的报文可以绕过所有关闭的链路，而不会出现路由环路或者路由黑洞。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "3 EEIPFRR算法",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "本节将详细介绍EEIPFRR的实现方案，该方案可以采用SDN[2I的基本框架来实现，当控制器计算出关闭链路的集合和所有源到目的重路由路径后，将相应的路由信息传递给SDN交换机。EEIPFRR的实现方案包括以下两个阶段：",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "计算网络中所有的LC环和从所有的LC环中选择最大数量的链路进行关闭。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "3.1 如何计算LC环",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "algorithm1 circle( $G$ ）  \ninput: $G = ( V , E )$ ：  \noutput: $C ( u , \\nu ) , ( u , \\nu ) \\in E$ ：  \n1: for $t \\in V$ do  \n2：构造以节点 $t$ 为根的最短路径树 $s p t ( t )$   \n3:endfor  \n4:计算所有节点对之间的最短路径 $s p ( s , d ) , s , d \\in V$   \n5: for $( u , \\nu ) \\in E$ do  \n6: for $t \\in V$ do  \n7: if $( u , \\nu ) \\not \\in s p ( u , t )$ && $( u , \\nu ) \\not \\in s p ( t , \\nu )$ then  \n8: $C ( u , \\nu ) = C ( u , \\nu ) \\bigcup \\{ s p ( u , t ) \\circ s p ( t , \\nu ) \\}$ ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "9: endif ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "10: endfor ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "11:endfor ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "12:return $C ( u , \\nu ) , ( u , \\nu ) \\in E$ ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "算法1介绍了计算网络中所有LC环的过程。构造网络中所有节点为根的最短路径树，计算所有节点对之间的最短路径（第1-4行）。对于网络中所有的链路，计算该链路对应的备份路径。计算某条链路 $( u , \\nu ) \\in E$ 的备份路径的过程如下：如果加入一个中转节点 $t$ ，形成的路径中不包括该链路，则该备份路径和链路 $( u , \\nu )$ 组成了一个环。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3.2关闭链路",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "算法2介绍了EEIPFRR 的具体执行过程。计算初始环，该  \n过程如下：对于网络中的所有链路，如果该链路有环，则选择  \n第一个环（算法第1-5行）。初始化系统温度，计算初始节能  \n比率（算法第6-7行）。为了计算最优的节能比率，算法需要  \n执行循环过程，直到 $\\scriptstyle { T = 0 }$ 或者currentEnergyRatio $^ { < 1 }$ 之一成立。  \n函数 $s w a p ( R , C - R )$ 的功能为，随机选择两个环 $c _ { \\scriptscriptstyle 1 } \\in R$ 和  \n（204号 $c _ { 2 } \\in C - R$ ，将两个环交换，计算新的节能比率（算法第11-12  \n行）。当currentEnergyRatio $^ { < 1 }$ 或者系统温度大于随机产生的温  \n度时，接受该解（算法第13-14行），否则不交换这两个环（算  \n法第16行）。随着算法的进行，逐渐降低系统温度（算法第18  \n行）。最后返回最优节能比率（算法第20行）。algorithm 2 EEIPFRR( $C ( u , \\nu )$ ）input: $C ( u , \\nu ) , ( u , \\nu ) \\in E \\mathrm { ~ , ~ } T _ { 0 }$ ，output: bestEnergyRatio .1: for $( u , \\nu ) \\in E$ do2:if $C ( u , \\nu )$ 不为空then3: $R _ { \\mathrm { 0 } } \\gets R _ { \\mathrm { 0 } } \\bigcup C _ { \\mathrm { 0 } } ( u , \\nu )$ （2044:endif5: endfor6: currentEnergyRatio $\\ c =$ originalEnergyRatio $$   \nEnergy( $R _ { 0 }$ ）7: $T \\gets T _ { \\mathrm { 0 } }$ （208: $R \\gets R _ { \\mathrm { 0 } }$ （209: while $T > 0$ and currentEnergyRatio $< 1$ do10: $\\scriptstyle { R ^ { \\prime } = R }$ （20号11: $R \\gets s w a p ( R , C - R )$ （204号12: currentEnergyRatio $$ Energy( R)13:if currentEnergyRatio $>$ originalEnergyRatio or  \n（204号 $T > r a n d o m ( T _ { 0 } )$ then14: originalEnergyRatio $$ currentEnergyRatio15: else16: （204号 $R \\gets R ^ { \\prime }$ （2017:endif18: $T \\gets T - 1$ 19:endwhile",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "20:bestEnergyRatio $$ originalEnergyRatio ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "21:return bestEnergyRatio ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "算法3详细描述了关闭链路的具体执行过程。首先根据环计算每条链路出现的次数，然后按照链路出现的次数进行降序排序。将排序后的结果存储在集合 $M$ 中。将所有链路的节能属性标记为0，表示该链路可以被关闭（第1-6行）。为了尽可能多的关闭网络中的链路，算法需要运行一些迭代过程。在每次迭代过程中，从M中取出第一个元素 $l$ 并且将该链路从M中删除（第8-9行）。重新计算 $M$ 中所有链路的链路利用率，在计算链路利用率的时候可以根据流量工程链路状态通告[22]获得（第10-12行）。如果所有链路的链路利用率都小于阈值，则关闭链路l（第13-14行）；否则执行步骤6（第15-16行）。计算所有和链路l环的链路集合 $\\boldsymbol { \\mathcal { Q } }$ ，将 $\\boldsymbol { \\mathcal { Q } }$ 中所有链路的删除属性标记为1，表示这些链路不可以关闭（第18-19行）。根据关闭链路的集合计算此时的节能比率（第21行）。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "algorithm3 energy( $R$ ）   \ninput: $R$ ：   \noutput: energyratio.   \n1: for $( u , \\nu ) \\in E$ do   \n2：计算链路 $( u , \\nu )$ 链在 $R$ 中出现的次数 $B ( u , \\nu )$   \n3:endfor   \n4:将链路按照 $B ( u , \\nu )$ 进行升序排序   \n5：将排序后的链路存储在链表 $M$ 中   \n6：将所有链路的删除属性标记为0   \n7:while $M$ is not empty do   \n8: 从 $M$ 中取出第一个元素l   \n9: $M = M - \\{ l \\}$   \n10:for $e \\in M$ do   \n11: $u ( e ) \\gets C o m p u t e ( e )$ （204号   \n12:endfor   \n13:if $\\forall u ( e ) < \\theta$ then   \n14: $U \\gets U \\bigcup \\{ l \\}$   \n15:else   \n16: 执行步骤8   \n17:endif   \n18: $Q  C ( l )$   \n19:将 $\\boldsymbol { \\mathcal { Q } }$ 中所有链路的删除属性标记为1   \n20：endwhile   \n21:energyratio $$ energy /totalenergy   \n22:return energyratio ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3.3算法复杂度分析 ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "本节将分析三个算法的时间复杂度。算法1中第1-3行的时间复杂度为 $V O ( V \\lg V + E )$ ，第5-10行的时间复杂度为$E O ( V )$ ，因此算法1的时间复杂度为 $V O ( V \\lg V + E )$ 。算法3的时间复杂度为 $O ( V { + } E )$ 。算法2利用模拟退火算法调用 $T _ { \\phantom { } _ { 0 } }$ 次算法3，因此算法2的时间复杂度为 $T _ { 0 } { } ^ { * } O ( V { + } E )$ 。根据上述分析可知,EEIPFRR 的时间复杂度为 $V O ( V \\log V + E ) + T _ { 0 } ^ { \\ * } O ( V + E )$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "4 实验结果",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "本节将通过实验来评价算法 EEIPFRR 的性能，并且与算法DLF 进行比较，这是因为DLF可以计算出最大关闭链路的数量。DLF算法的时间复杂度为$E ^ { * } V ^ { * } O ( V \\log V + E ) + V ^ { * } O ( V \\log V + E )$ ，因此DLF 的算法复杂度远远大于EEIPFRR的算法复杂度。评价的度量包括节能比率，路径拉伸度和链路利用率。为了评价不同算法的节能比率，假设网络中的线卡主要包括四种类型，OC-3，OC-12，OC-48和OC-192，他们消耗的能量分别为60Watts，80Watts，140Watts和174Watts；并且假设链路消耗的能量与流量无关。本文选择在 Abilene[23]拓扑结构运行上述两个算法，Abilene 网络包括12个路由器和30条链路，该网络主要承载美国教育网中的数据，网络中的具体流量数据可以从公开的数据中获得。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "1)节能比率 ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "节能比率可以定义为关闭链路节省的能量与网络中所有链路消耗的能量的比值，从该定义可以看出节能比率越大，算法节省的能量越多。图2描述了EEIPFRR和DLF在拓扑Abilene中的实验结果。实验中流量数据的采集时间是2004年3月8日。从图2中可以看出，EEIPFRR的节能效果明显优于DLF的效果，EEIPFRR的节能比率不随时间的变化而变化，始终保持在 $34 \\%$ 以上，DLF的节能比率随着时间的变化而变化。这是因为 EEIPFRR关闭链路并不考虑网络中的流量，而仅仅与网络拓扑有关系。DLF的节能比率随着流量的变化而变化。DLF的节能比率在400-1200 秒之间有一些变化，这是因为该段时间内网络中流量有一定的变化。",
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/52ba1b60f07b95f578e17dace25eaee53888faeda6534aa95e64aa1006638783.jpg",
        "img_caption": [
            "图2节能比率随时间变化规律图"
        ],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "2)路径拉伸度",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "当运行节能算法时，网络中的部分链路将会被关闭。当关闭链路后，节点间的重路由路径的代价将会增加。路径拉伸度可以定义为重路由路径和最短路径代价的比值。利用EEIPFRR计算出的重路由路径可能会出现重复节点，导致路径拉伸度增加。因此，为了降低网络中节点对见的路径拉伸度，在实验中本文消除了重复路径。从图3可以看出EEIPFRR的路径拉伸度始终保持在1.1左右，DLF 的路径拉伸度随着时间的变化而变化，并且其数值远远大于EEIPFRR。这是因为EEIPFRR关闭的链路不随流量的变化而变化，而DLF关闭的链路随流量的变化而变化。DLF 的路径拉伸度在 400\\~1200s之间有一些变化，这是因为该段时间内网络中流量有一定的变化，关闭的链路也随之变化，所以路径的拉伸度也有了一些变化。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/d6cc8258635e1dadd10d2f29b93815fca2bc883b66d6885893384c2d60f0272b.jpg",
        "img_caption": [
            "图3路径拉伸度随时间变化规律图"
        ],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "为了进一步细化路径拉伸度，本文描述了网络中所有节点对之间的拉伸度。图4表示路径拉伸度累计概率分布，从该图可以看出在EEIPFRR算法中 $9 5 \\%$ 的节点对之间的路径拉伸度小于2，而DLF算法中仅仅有 $80 \\%$ 的节点对之间的拉伸度小于2。",
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/44616ca6dd42d10e4b9af52097a521d3fe1ad6b0bc92612b8fbc72ed02c1ef2c.jpg",
        "img_caption": [
            "Fig.3Relationship between path stretch and time ",
            "图4路径拉伸度累计概率分布规律图"
        ],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/c7457c4507d499c35b6bd0e060bcfd7ed3c819f0969ce94a422ce47b49a0470b.jpg",
        "img_caption": [
            "Fig.2Relationship between energy saving ratio and time ",
            "Fig.4Cumulative probability distribution of path stretch ",
            "图5最大链路利用率随时间变化规律图",
            "Fig.5Relationship between maximum link utilization and time "
        ],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "3)最大链路利用率",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "本节通过最大链路利用率来衡量网络的性能。图5表示",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "EEIPFRR和DLF在拓扑Abilene中的最大链路利用率的实验结果。从图5可以看出，二者的最大链路利用率基本相似，但是在第1600s的时候DLF的最大链路利用率达到了 $3 3 \\%$ 以上，而EEIPFRR仅仅为 $24 \\%$ 左右。图6表示链路利用率的累计概率分布，从该图可以看出，这两种算法的链路利用率基本接近。",
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/e42ab001aa4c700f8b48511f156a5b057d4d1daf12dc9ced9c28169154746063.jpg",
        "img_caption": [
            "图6链路利用率累计概率分布规律图",
            "Fig.6Cumulative probability distribution of link utilization "
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "5 结束语",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "为了降低互联网的能耗，本文提出了一种基于快速重路由的域内路由节能方案。该方案可以在保证网络性能的前提下实现节能。本文利用LC环将快速重路由和节能联系在一起，可以确保重路由路径可以绕开所有关闭的链路。在此基础上形式化定义了本文需要解决的问题，然后提出了一种启发式的算法解决该问题。本文的算法可以为因特网服务提供商提供一种兼顾执行效率、网络性能和节能的有效解决方案。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "参考文献：",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "[1]Mineraud J,Wang L,Balasubramaniam S,et al. Hybrid renewable energy routing for ISP networks[C]//Proc of IEEE International Conference on Computer Communications.Piscataway,NJ: IEEE Press,2016:1-9.   \n[2]Yang Y,Wang D,Pan D,et al.Wind blows,traffic flows:Green Internet routing under renewable energy[C]//Proc ofIEEE International Conference on Computer Communications.Piscataway,NJ:IEEE Press,2016:1-9.   \n[3]Yang X,Wetherall D.Source selectable path diversity via routing deflections [J].ACM SIGCOMM Computer Communication Review,2006,36 (4): 159- 170.   \n[4]Sridharan A, Guerin R,Diot C.Achieving near-optimal trafic engineering solutions for current OSPF//IS-IS networks [J].IEEE//ACM Trans on Networking,2005,13 (2):234-247.   \n[5]Atlas A, Zinin A.RFC5286,Basic specification for ip fast reroute: loop-free alternates [S].2008.   \n[6]Mérindol P,Francois P,Bonaventure O,et al.An efficient algorithm to enable path diversity in link state routing networks [J].Computer Networks, 2011,55 (5): 1132-1149.   \n[7]Shand M,Bryant S,Previdi S.IP fast reroute using not-via addresses,IETF based IP fast reroute in linear time [J]. Computer Networks,2012,56 (2): 845-857.   \n[9]Banerjee G, Sidhu D. Comparative analysis of path computation techniques for MPLS trafic engineering [J]. Computer Networks,2002,40 (1): 149- 165.   \n[10] Gupta M,Singh S.Greening of the internet [C]// Proc of ACM Special Interest Group on Data Communication,New York: ACMPress,2003: 9-26.   \n[11] Mineraud J, Wang L,Balasubramaniam S,et al. Hybrid renewable energy routing for ISP networks [C]//Proc of IEEE International Conference on Computer Communications.Piscataway, NJ: IEEE Press,2016:1-9.   \n[12] BianzinoAP,Chaudet CRoi D,etal.Asurveyof greennetworking research[J].IEEE Communications Surveys& Tutorials,2012,14(1):3-20.   \n[13] Chabarek J,Sommers J,BarfordP,etal.Power awareness innetwork design and routing [C]// Proc of IEEE International Conferenceon Computer Communications.Piscataway,NJ: IEEE Press,2008: 457-465.   \n[14] Kim YM,Le EJ,Park H S,et al. Ant colony based self-adaptive energy saving routing for energy eficient Internet [J]. Computer Networks,2012, 56 (10): 2343-2354.   \n[15]Amaldia E,Caponea A,Gianoli L. Energy-aware IP traffic engineering with shortest path routing computer networks [J]. Computer Networks,2013, 57 (6): 1503-1517.   \n[16] Li Qi,Xu Mingwei, Yang Yuan,et al. Safe and practical energy-efficient detour routing in IP networks [J].IEEE//ACMTranson Networking,2014, 22 (6): 1925-1937.   \n[17]CuomoF,CianfraniA,Polverini M,etal.Network pruning forergy saving in the Internet [J]. Computer Networks,2012,56 (10): 2355-2367.   \n[18] Chiaraviglio L,Mellia M,Neri F.Minimizing ISP network energycost: formulation and solutions [J].IEEE//ACM Trans on Networking,2012,20 (2): 463-476.   \n[19] CianfraniA,Eramo V,Listanti M,et al. An OSPF enhancement for energy saving in IP networks [C]//Proc of Computer Communications Workshop. Piscataway, NJ: IEEE Press,2011: 325-330.   \n[20] Nedeljko V,Bhurat P, Canini M,et al. Identifying and using energy-critical paths [C]// Proc of Conference on Emerging Networking Experiments and Technologies.New York: ACM Press,2011: 1-12.   \n[21] Zhu Zhijie,Li Qing,Xu Mingwei,et al.A customized and cost-efficient backup scheme in software-defined networks [C]//Proc of IEEE International Conference on Network Protocols.Piscataway,NJ: IEEEPress, 2017: 1-6.   \n[22] Katz D，Kompella K，Yeung D.RFC 3630,Traffcengineering (te) extensions to OSPF version 2 [S].2015.   \n[23] Geng Haijun,Shi Xingang,Wang Zhiliang,et al.A hop-by-hop dynamic distributed multipath routing mechanism for link state network [J]. Computer Communications,2018,116: 225-239. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 4
    }
]