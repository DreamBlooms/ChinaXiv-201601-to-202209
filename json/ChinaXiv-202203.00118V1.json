[
    {
        "type": "text",
        "text": "一个基于迭代局部搜索的区划问题算法",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "孔云峰",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "(河南大学黄河中下游数字地理技术教育部重点实验室，河南 开封，475000)",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "摘要：区划问题是将特定地理区域划分为若干空间连续的分区，满足分区内差异最小和分区间差异最大这一基本原则，广泛应用于地理、环境、生态、经济、农业、城市等领域。60余年来，学者尝试建立各种区划问题数学模型，设计了一系列的求解算法，包括精确算法、基于聚类的算法、启发式算法和基于树图的算法。针对现有算法计算效率与求解质量难以兼顾这一局限，本文提出了一个基于迭代局部搜索(ILS)的区划问题算法。该算法主要机制包括：通过邻域单元移动改进分区质量；参照中心单元快速计算分区方差提升算法速度；使用扰动机制跳出局部最优状态；更新分区中心点提升分区方案目标值；以及使用群搜索探索更大的解空间；算法各步骤中通过分区修复保持分区空间连续。55个基准案例测试表明：ILS算法求解质量优于ARISEL算法和SKATER算法，计算时间大幅低于ARISEL算法。一个多指标气候分区实验也验证了ILS算法的实用性。本文ILS算法兼顾分区质量和计算效率，并允许一个分区包含多个空间连续且面积较大的区域，具有灵活性和实用性。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "关键词：区划问题；迭代局部搜索；基准测试；案例研究",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "1研究背景",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "区划是地理学中的一个基本问题。区划是从区域角度观察和研究地域综合体,探讨区域单元的形成发展、分异组合、划分合并和相互联系，是对过程和类型综合研究的概括和总结(郑度等，2005)[1]。上百年来，区划理论、方法与应用研究取得了显著的进展，广泛应用于地理、环境、生态、经济、农业、城市、地图制图、空间统计等领域。随着我国社会经济的快速发展，为满足国家和地区各行业的战略决策、规划、管理和政策制定，区划仍是一个基础性的研究领域。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "纵观上世纪60年代以来国内外区划研究进展，区划研究有两大重点和难点：区划的理论基础和分区边界的确定。前者基于地理现象的空间格局、结构、过程、机理和异质性规律，针对区划需求，确定区划目标和原则，并遴选区划指标。后者属于定量分析范畴，是在理论研究的基础上，运用地图制图、空间分析、空间聚类、空间优化等手段，科学合理地划定分区边界。刘燕华等(2005)对于编制中国综合区划方案所要解决的重要科学技术问题进行了深入分析[2]。郑度等(2008)深入阐述了自然地理区划的内涵,提出了自然地理区划范式及关键科学问题[3]，相关思想、理论和方法对于自然地理和其他领域区划问题具有指导和借鉴价值。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "区划问题(regionalization problem)是将特定地理区域划分为若干空间连续的分区，满足分区内差异最小化和分区间差异最大化这一基本原则，本质上是一个增加了分区空间连续约束的聚类问题。聚类问题本身的计算复杂度极高，分区空间连续约束使得区划问题求解更为困难。自上世纪60年代开始，学者尝试建立各种数学模型，并设计了一系列算法，包括精确算法、基于聚类的算法、元启发式算法、树图分割算法和混合启发算法(Duque et al,2007)[4]。然而，这些算法存在以下局限：精确算法计算复杂度过高；经典聚类算法难以处理分区空间连续性；树图分割算法仅依据相邻单元生成树图，分割后难以保证区划质量;元启发式算法求解质量较好，但计算时间过长。针对现有区划问题算法这些局限，本文提出一个新的区划算法，既要满足区划质量，又能够降低算法复杂度。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2 文献回顾",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "区划问题也称为空间分类问题(spatial classification problem)、空间聚类问题(spatialclusteringproblem)、空间聚合问题(spatial aggregation problem)、空间分区问题(spatialdistricting problem)、分区设计问题(zone design problem)等。尽管这些术语有差别，但内涵基本一致，均致力于将地理空间划分为若干区域，在满足特定约束条件的前提下确定最优的分区方案。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "区划问题数学建模和模型求解的复杂性主要体现在分区空间连续这一约束条件。针对各种区划需求，不少学者详细定义了区划决策变量、约束条件和目标函数，提出了多个区划问题数学模型(Cliff et al.，1975; Keane,1975;Wright et al.，1983; Cova and Church, 2000;Williams,2002; Shirabe,2005; Duque et al.,2011; Li et al.,2014)[5]。Keane(1975)[6]证明了空间连续性约束区划问题是一类NP-Hard 问题。因此，区划问题模型求解的计算复杂度极高。$P$ -regions问题将 $n$ 个空间单元划分为 $p$ 个连续区域，是一个经典的区划问题。该问题可表达为三种混合整型规划(MIP)模型：树模型、次序模型和网络流模型(Duque et al.,2011)[11]。然而，基于数学模型的精确算法仅能够求解空间单元数量很少的小规模问题。例如，CPLEX模型计算表明：针对 $\\scriptstyle n = 4 9$ 和 $\\scriptstyle p = 3 \\sim 1 0$ 的基准案例，3小时的计算时间均不能获得最优解[11]。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "基于聚类分析的区划方法包括：基于经典聚类分析的方法、距离加权聚类分析方法、M-means 聚类方法和凝聚层次聚类方法。前三种方法，思路简单，但处理空间连续性分区的能力不足，以牺牲分区质量为代价保证分区空间连续。经典的层次聚类方法较为成功地应用于区划，算法流程如下：(1)首先将每一个空间单元作为一个分区；(2)计算各分区见的相似度；(3)寻找近似度最接近且连续的两个分区，把他们合并为一个分区； (4)重复步骤(2)和(3)，直到分区数量满足区划目标。步骤(2)中分区相似度的计算有多种方法，如方差最小(Ward)、两个分区中最接近单元的相似度(single linkage)、两个分区中两个差异最大单元的相似度(complete linkage)、两个分区中单元均值或中值的相似度(average linkage)等。步骤(3)限制相邻区域合并，保证分区的连续性。该方法采用自下而上的分区合并策略，适合于分区数量不确定的区划问题，但步骤(2)相似度计算方法和步骤(3)空间邻接约束对于聚类树的形成影响很大(Guo,2008)[13]。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "启发式区划算法的基本原理是：先构造一个可行的区划方案，再使用邻域算子进行迭代搜索改进。第一步使用区域种子生长、聚类分析或其他简单算法构造一个可行的区划解，第二步根据当前的分区方案和空间单元间的空间关系，尝试进行空间单元的移动迭代地改进区划方案。AZP方法是Openshaw(1977)[14]提出的一个经典区划算法，先将 $n$ 个空间单元随机划分为 $k$ 个区域，在顾及分区空间连续约束的前提下，尝试将某个单元重新分配到另一个区域，持续改进区划方案。本质上，该算法属于爬山算法，搜索过程容易陷入局部最优而过早停滞。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "为避免邻域搜索过程陷入局部最优，学者不断改进算法，通过模拟退火(Browdy,1990;Openshaw and Rao,1995)[15][16]、禁忌(Openshaw and Rao,1995)[16]等元启发机制，提升搜索过程的多样性，从而获得较高质量的区划方案。Duque and Church(2004)改进禁忌算法为ARISEL算法[17]。该算法使用简单方法提供多个初始区划方案，选择高质量区划方案进行禁忌搜索。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "为降低邻域搜索的计算复杂度，学者提出了基于树图的启发式算法：先将区域抽象为网络图，再将网络图简化为树图，通过树分割获得空间连续的区域。树结点代表空间单元，树干表示空间单元间的邻接关系(郭仁忠,1985)[18]。Maravalle and Simeone(1995)[19]提出了一个基于树图的区划问题算法(MIDAS)：根据图 $G$ 生成树 $T$ ，删除 $T$ 的 $p { - } 1$ 条连接获得 $p$ 棵子树，代表 $p$ 个空间连续的区域。因树 $T$ 上的解空间很有限，MIDAS算法尝试不断调整树 $T$ 为 $T ^ { * }$ 获得更好的分区方案。此后，Assuncao etal.(2006)基于最小生成树概念提出了一个区划问题算法 SKATER[20]。Guo(2008)改进该算法为RADCAP 算法，提出了6 种动态树生成方法[13]:First-Order-SLK、First-Order-CLK、First-Order-ALK、Full-Order-SLK、Full-Order-CLK 和Full-Order-ALK。实验发现：Full-Order-CLK 和Full-Order-ALK优于其他生成树方法。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "总体上，聚类算法思路简单且容易实现，但这类方法有的难以保证分区连续性，有的虽顾及分区连续性但不能保证全局优化质量。启发式算法类型众多，启发改进方法设计思路简单，但优化性能有限；元启发方法性能较高，但这一类算法设计较为复杂，计算效率偏低。基于生成树的方法，计算效率大幅提升，但同时大幅降低了搜索空间，影响到区划质量。Aydin et al.(2021)[21]设计了基准测试案例，测试了 AZP、AZP-SA、AZP-Tabu、ARISEL、SKATER 和 REDCAP 算法。计算结果表明：ARISEL 算法总体质量最高，但计算速度很慢；SKATER算法求解质量尚好，计算效率非常高。考虑到区划问题应用领域越来越广，在应用中对于区域规划、决策影响较大，有必要设计更有效地的区划算法，既保证区划质量，又能够快速计算。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3区划问题定义",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "某一地理区域共有 $n$ 个空间单元，记为集合 $U = \\{ 1 , 2 , 3 \\dots n \\}$ 。每个单元有 $\\mathbf { \\nabla } _ { m }$ 个属性，记为集合 $A { = } \\{ 1 , 2 , 3 \\ \\dots m m \\}$ ，单元 $i$ 属性为 $a _ { i l . }$ ai2, $a _ { i 3 } \\dots a _ { i m }$ 。将地理区域划分为 $p$ 个空间连续的分区，记为集合 $C { = } \\{ 1 , 2 , 3 \\ . . . \\ p \\}$ ，分区 $i$ 包含的地理单元解为 $c _ { i }$ ，满足 $c _ { i } \\cap c _ { j } = \\phi ( i \\neq$ $j )$ 和 $c _ { 1 } \\cup c _ { 2 } \\cup c _ { 3 } \\cup \\ldots c _ { p } = U$ ，即任意两个分区无重叠，每个空间单元必须划分在特定分区中。分区目标是分区内单元属性方差之和最小：",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { f ( C ) = \\sum _ { i \\in C } \\sum _ { j \\in c _ { i } } \\sum _ { k \\in A } \\bigl ( a _ { j k } - \\bar { a } _ { i k } \\bigr ) ^ { 2 } } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "式(1)中 ${ { \\bar { a } } _ { i k } }$ 为分区 $i$ 中所有单元属性 $k$ 的平均值。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "在区划实践中，有几个实际问题需要考虑。首先，考虑到不同属性的含义和量纲存在差异，通常采用标准化后的单元属性值。常用的数据标准化方法包括：标准差标准化方法、最大最小极值标准化方法、线性比例标准化方法等。其次，考虑属性的重要性可能不同，可为每个属性设置权重。令单元 $i$ 标准化属性值为 $b _ { i l } , b _ { i 2 } , b _ { i 3 } \\dots b _ { i m }$ 为标准化属性值，属性 $k$ 的权重为 $w _ { k }$ ，区划目标函数为：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { f ( C ) = \\sum _ { i \\in C } \\sum _ { j \\in c _ { i } } \\sum _ { k \\in A } w _ { k } \\big ( b _ { j k } - \\bar { b } _ { i k } \\big ) ^ { 2 } } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "一般地，可统计每个属性的 $R ^ { 2 }$ 指标评价分区质量：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { R _ { k } ^ { 2 } = 1 - \\sum _ { i \\in C } \\sum _ { j \\in c _ { i } } w _ { k } \\big ( b _ { j k } - \\bar { b } _ { i k } \\big ) ^ { 2 } / \\sum _ { j \\in U } w _ { k } \\big ( b _ { j k } - \\bar { b } _ { k } \\big ) ^ { 2 } } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "其中 $\\overline { { b } } _ { k }$ 为属性 $k$ 的平均值。如采用标准差标准化方法，则均值 $\\overline { { b } } _ { k } = 0$ 。同时，可计算总体$R ^ { 2 }$ 指标评价分区质量：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { R ^ { 2 } = 1 - \\sum _ { i \\in C } \\sum _ { j \\in c _ { i } } \\sum _ { k \\in A } w _ { k } \\big ( b _ { j k } - \\bar { b } _ { i k } \\big ) ^ { 2 } / \\sum _ { j \\in \\mathrm { U } } \\sum _ { k \\in A } w _ { k } \\big ( b _ { j k } - \\bar { b } _ { k } \\big ) ^ { 2 } } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "4算法设计",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "求解区划问题存在多个难点。首先，本文将区划问题定义为一个增加了空间连续约束的聚类问题，满足空间连续条件使区划问题求解变得较为复杂。区划算法中，分区空间连续判断与空间连续修复是求解算法中两个较为频繁的操作。其次，目标函数(2)中分区 $i$ 的均值 $\\bar { b } _ { i k }$ 计算较为复杂，容易造成算法计算效率偏低。为加快计算，可采用分区中心点的属性值取代均值 $\\bar { b } _ { i k }$ 。在区划方案中，确定每个分区的中心点，有利于快速评估区划方案目标值。基于以上分析，本文采用基于中心的区划算法，并保持每个分区空间连续。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "选择迭代局部搜索(ILS)算法作为求解区划问题的算法框架。ILS 算法思路简单、易于实现，对于离散优化问题行之有效(Lourenco et al.,2010)[22]。该算法从一个初始解开始，迭代地进行扰动和局部搜索。局部搜索容易陷入局部最优，对当前位置的扰动能够使算法脱离局部最优。初始解生成、局部搜索和扰动使ILS 算法的基本模块。为提升ILS算法优化性能，本文改造单解ILS 算法为群解ILS算法。改进ILS算法流程如下：",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "参数：群大小(psize)，破环强度(strength)，连续未更新最好解循环数(mloops)。  \n1. $P o p =$ GenerateInitialSolutions(psize);  \n2. $s _ { b e s t } { = } \\mathrm { B e s t } ( P o p ) .$   \n3.notImp $r { = } 0$   \n4.While notlmpr $\\prec$ mloops:  \n5. Select a solution $s$ from $P$ randomly;  \n6. $\\mathbf { s } ^ { \\prime } { = }$ Perturbation (s,strength);  \n7. （204 $s ^ { \\prime \\prime } { : }$ LocalSearch(s');  \n8. $s ^ { * } { = }$ updateCenetrs $( s ^ { \\prime \\prime } )$ （20  \n9. （20 $\\mathrm { I f } ~ f ( { s } ^ { * } ) { < } f ( \\mathbf { s } _ { b e s t } )$ $\\boldsymbol { s } _ { b e s t } { = } \\boldsymbol { s } ^ { * }$ ，notImpr $\\scriptstyle \\cdot = 0$   \n10. else:notImpr $+ { = } 1$ ：，  \n11. $P = \\rvert$ UpdatePopulation $( P , s ^ { * } )$   \n12. Output $s .$ ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "步骤(1)算法采用经典 $K \\cdot$ -medoids 算法产生初始解。该算法随机选择 $p$ 个空间单元作为分区中心，迭代进行单元指派和中心点更新，直到所有中心点不能更新为止。指派是将每个空间单元指派到最近的中心单元，计算简单；受研究区形状和地理要素空间分布的影响，指派形成的分区不能满保证其空间连续，为此算法需要判断分区的空间连续性，并进行连续性修复。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "步骤(7)采用分区边界单元移动方法进行局部搜索。该方法尝试移动某一个边界单元到相邻的分区，若该移动能够减少区划目标，则更新当前解。这一操作需要考虑分区的空间连续性，保证单元移动后分区连续性约束仍然得到满足。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "步骤(6)进行分区方案扰动。常用的扰动方法很多，例如，破环若干分区、破环一个连续区域、破环一定比例的边界单元，然后进行解的修复。若修复后，分区不能保证空间连续，则继续进行空间连续修复。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "与基于单解的搜索算法相比，改进 ILS 算法维护一组解。首先，算法步骤(1)生成一组初始解；其次，每一次迭代开始，从群解中随机选择一个解作为当前解进行搜索(步骤 5);第三，搜索完成后，使用新解更新群解(步骤11)。群解更新中，优先考虑解的目标值，其次考虑解的差异程度，保持群解之间有一定的差异。基于群解的 ILS 算法维护一组具有差异度的精英解，扩大了解空间搜索范围，有利于改进求解质量；同时，算法收敛速度通常会变慢，计算时间有一定的增加。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "因本文算法基于中心单元评估分区目标，局部搜索完成后，步骤(8)尝试更新中心单元，使分区目标值进一步降低。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "空间连续性判断是区划算法中的一个关键步骤。本文使用生成树判断分区的连续性(Xiao 2008;Liuetal.2016)[23][24]。若一个分区中的所有单元能构成一个生成树，则该分区连续。考虑到一些特殊情形，本文允许一个分区包含两个或多个面积较大的区域。图1左图中，蓝色、棕色和绿色分区均包括两个部分。所有蓝色或棕色部分的面积均较大，可认为蓝色区域和棕色区域是空间连续的分区。而绿色部分中，因其中一块过小，将其视为空间不连续的破碎单元。本文空间连续判断方法如下：(1)针对某一分区，从任意单元开始构造生成树；(2)若有某些单元不能连接到生成树上，则针对剩余单元构造新的生成树；(3)重复步骤(2)直到没有剩余单元； (4)计算每一个生成树对应单元数和面积，若有某一生成树单元数或面积小于规定的阈值，则认为该区域不连续；同时，单元数或面积过小生成树对应的单元是破碎单元。针对空间不连续分区，需要对破碎的单元进行修复，将其指派到最近的相邻分区中。左图中的绿色部分，有一块很小的斑块，共有5个单元，可将其作为破碎单元；可将其指派到邻近蓝色分区，修复后的分区如右图。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "福",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "5算法测试 ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "5.1基准案例测试 ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "算法测试使用文献(Aydin etal.,2021)[21]提供的基准测试案例集。该案例集基于3个规则格网地图数据生成，网格数量分别为 $1 2 0 ( 1 0 { \\times } 1 2 )$ 、 $3 0 0 ( 1 5 { \\times } 2 0 )$ 和 $1 2 0 0 ( 3 0 \\times 4 0 )$ 。将这些地图事先划分为若干分区，并根据分区模拟每一个单元的属性数值。使用最终的模拟数据进行区划，测试算法的性能。基于每幅地图生成18个案例，即2类分区形状、3个分区数量和3个数值模拟参数的组合。分区形状为简单矩形为主(A)和较复杂图形(B)，分区数量为5、10和15，相邻分区属性均值差异参数设置为2、3和4。另外，针对一幅 $9 0 0 ( 3 0 \\times 3 0 )$ 网格地图，模拟了形状不规则分区案例，共5个分区，数值模拟参数为3。综上，共生成55个分区案例，每个案例的单元属性值分别随机模拟100次。模拟方法是：为每个分区设置一个属性均值，使用参数2、3或4设置相邻分区属性均值，以方差为1的正态分布随机模拟单元属性值。模拟案例基本情况见表1，案例详细介绍见文献Aydin et al.(2021)[21],数据下载地址为 htps://doi.org/10.6084/m9.figshare.14067239。该地址还提供了6 种算法计算结果、质量评价指标和计算时间。",
        "page_idx": 5
    },
    {
        "type": "table",
        "img_path": "images/4b19c4caaff791786c271b0a7304f0f04cea5f89c57cf16b7350789a6cab3394.jpg",
        "table_caption": [
            "表1基准测试案例特征",
            "Tab.1 Characteristics of The benchmark instances "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>地图名称</td><td>网格大小</td><td>分区形状</td><td>分区数量</td><td>数值模拟</td><td>产生区划 方案数量</td><td>数值模拟次数</td></tr><tr><td>G120</td><td>10×12</td><td>A,B</td><td>5,10, 15</td><td>参数 2,3,4</td><td>18</td><td>100</td></tr><tr><td>G300</td><td>15×20</td><td>A,B</td><td>5,10,15</td><td>2,3,4</td><td>18</td><td>100</td></tr><tr><td>G1200</td><td>30×40</td><td>A,B</td><td>5,10, 15</td><td>2,3,4</td><td>18</td><td>100</td></tr><tr><td>Blob</td><td>30×30</td><td>不规则</td><td>4</td><td>3</td><td>1</td><td>100</td></tr></table></body></html>",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "为直观地理解案例，图2展示了4种区划方案：G120-5A、G300-10B、G1200-15A和Blob。方案名称由地图名称、分区数量和分区形状组成。图3为这四个区划方案分别使用模拟参数4、2、3和3生成的模拟数值，色彩深浅代表数值的大小。模拟参数越大，不同分区单元的数值差异越大，相对容易区分事先设置的区域；反之，较难辨认事先设置的区域。",
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/d51304d40c771943665217b4a46f1cb94c9ec13fdeb15f0c5f51a472820ea028.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 6
    },
    {
        "type": "image",
        "img_path": "images/1546baf7c86755c7d96f546a5363b3b30406f4f045ecb1af382186377cb58e75.jpg",
        "img_caption": [
            "Fig.2 Illustration of spatial units and regions (G120_5A,G300_10B,1200_15A and BLOB) 图2分区示意图(G120_5A、G300_10B、1200_15A和BLOB) ",
            "Fig.3 Simulated values of spatial units (G120_5A4, G300_10B2,1200_15A3 and Blob3) 图3单元属性数值模拟示意图(G120_5A4、G300_10B2、1200_15A3和Blob3) "
        ],
        "img_footnote": [],
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "针对每个分区方案的100个数值模拟，使用本文ILS算法进行计算，获得100个区划方案，并计算每个区划方案的ARI指标和 $\\scriptstyle \\mathrm { \\mathsf { R } } ^ { 2 }$ 指标。ARI指标表示分区方案与真实分区的相似程度，越接近于1越好； $\\scriptstyle \\mathbf { R } ^ { 2 }$ 指标度量分区内单元属性方差的相对大小，越接近于1越好。表2列出每个分区方案100个分区结果ARI指标和 $\\scriptstyle { \\mathrm { \\mathrm { R } } } ^ { 2 }$ 指标的平均值，并与Skater和ARISEL算法进行比较，其中，ARISEL 和 Skater 算法区划指标来自文献[21](Aydin et al.,2021)。可以看出：总体上ILS 算法结果优于ARISEL 算法，而ARISEL 算法优于 Skater 算法。针对模拟参数为2的高难度案例，ILS算法优势更为显著。",
        "page_idx": 6
    },
    {
        "type": "table",
        "img_path": "images/d39af92c84438516fadea1bf76b2812122252c0058520832f3d2b717d2d6d619.jpg",
        "table_caption": [
            "表2基准案例ARI指数和 $\\mathbf { R } ^ { 2 }$ 指数均值统计",
            "Tab.2ARIand ${ \\bf R } _ { 2 }$ indexes from 55 benchmark instances "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td colspan=\"3\">100个ARI指数均值</td><td colspan=\"3\">100个R指数均值</td></tr><tr><td>案例名称</td><td>ILS</td><td>Skater</td><td>ARISEL</td><td>ILS</td><td>Skater</td><td>ARISEL</td></tr><tr><td>G120_5A2</td><td>0.804</td><td>0.665</td><td>0.717</td><td>0.901</td><td>0.870</td><td>0.901</td></tr><tr><td>G120_5A3</td><td>0.944</td><td>0.795</td><td>0.916</td><td>0.952</td><td>0.915</td><td>0.952</td></tr><tr><td>G120_5A4</td><td>0.979</td><td>0.912</td><td>0.972</td><td>0.971</td><td>0.953</td><td>0.971</td></tr><tr><td>G120 5B2</td><td>0.861</td><td>0.748</td><td>0.735</td><td>0.903</td><td>0.902</td><td>0.912</td></tr><tr><td>G120 5B3</td><td>0.959</td><td>0.884</td><td>0.927</td><td>0.952</td><td>0.949</td><td>0.953</td></tr><tr><td>G120 5B4</td><td>0.987</td><td>0.924</td><td>0.979</td><td>0.971</td><td>0.966</td><td>0.971</td></tr><tr><td>G120 10A2</td><td>0.852</td><td>0.801</td><td>0.776</td><td>0.972</td><td>0.974</td><td>0.973</td></tr><tr><td>G120 10A3</td><td>0.963</td><td>0.882</td><td>0.885</td><td>0.988</td><td>0.985</td><td>0.986</td></tr><tr><td>G120 10A4</td><td>0.987</td><td>0.926</td><td>0.953</td><td>0.993</td><td>0.991</td><td>0.992</td></tr><tr><td>G120 10B2</td><td>0.851</td><td>0.765</td><td>0.756</td><td>0.974</td><td>0.974</td><td>0.973</td></tr><tr><td>G120 10B3</td><td>0.963</td><td>0.884</td><td>0.890</td><td>0.988</td><td>0.986</td><td>0.987</td></tr><tr><td>G120 10B4</td><td>0.991</td><td>0.934</td><td>0.954</td><td>0.993</td><td>0.992</td><td>0.992</td></tr><tr><td>G120 15A2</td><td>0.850</td><td>0.806</td><td>0.765</td><td>0.986</td><td>0.989</td><td>0.986</td></tr><tr><td>G120 15A3</td><td>0.949</td><td>0.889</td><td>0.868</td><td>0.994</td><td>0.994</td><td>0.993</td></tr><tr><td>G120 15A4</td><td>0.986</td><td>0.931</td><td>0.923</td><td>0.997</td><td>0.996</td><td>0.996</td></tr></table></body></html>",
        "page_idx": 6
    },
    {
        "type": "table",
        "img_path": "images/7c3dd53c9acb5953bec6a70966488b7cc4c7f217fa031c81d21a488f13c0adee.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td>0.850</td><td>0.806</td><td>0.779</td><td>0.988</td><td>0.988</td><td>0.985</td></tr><tr><td>G120 15B2</td><td>0.937</td><td>0.881</td><td>0.867</td><td>0.994</td><td>0.993</td><td>0.992</td></tr><tr><td>G120 15B3 G120 15B4</td><td>0.987</td><td>0.916</td><td>0.924</td><td>0.997</td><td>0.996</td><td>0.996</td></tr><tr><td>G300_5A2</td><td>0.898</td><td>0.739</td><td>0.816</td><td>0.897</td><td>0.861</td><td>0.900</td></tr><tr><td>G300_5A3</td><td>0.969</td><td>0.891</td><td>0.956</td><td>0.950</td><td>0.926</td><td>0.950</td></tr><tr><td>G300_5A4</td><td>0.991</td><td>0.944</td><td>0.988</td><td>0.971</td><td>0.959</td><td>0.971</td></tr><tr><td>G300_5B2</td><td>0.901</td><td>0.817</td><td>0.798</td><td>0.898</td><td>0.892</td><td>0.903</td></tr><tr><td>G300_5B3</td><td>0.968</td><td>0.918</td><td>0.952</td><td>0.950</td><td>0.946</td><td>0.950</td></tr><tr><td>G300_5B4</td><td>0.991</td><td>0.955</td><td>0.988</td><td>0.971</td><td>0.966</td><td>0.971</td></tr><tr><td>G300 10A2</td><td>0.869</td><td>0.759</td><td>0.804</td><td>0.968</td><td>0.950</td><td>0.961</td></tr><tr><td>G300 10A3</td><td>0.962</td><td>0.844</td><td>0.891</td><td>0.987</td><td>0.973</td><td>0.982</td></tr><tr><td>G300 10A4</td><td>0.991</td><td>0.873</td><td>0.961</td><td>0.993</td><td>0.976</td><td>0.991</td></tr><tr><td>G300 10B2</td><td>0.867</td><td>0.832</td><td>0.785</td><td>0.970</td><td>0.969</td><td>0.968</td></tr><tr><td>G300 10B3</td><td>0.973</td><td>0.915</td><td>0.897</td><td>0.988</td><td>0.985</td><td>0.985</td></tr><tr><td>G300 10B4</td><td>0.994</td><td>0.917</td><td>0.975</td><td>0.993</td><td>0.988</td><td>0.992</td></tr><tr><td>G300 15A2</td><td>0.859</td><td>0.835</td><td>0.784</td><td>0.985</td><td>0.985</td><td>0.981</td></tr><tr><td>G300 15A3</td><td>0.962</td><td>0.894</td><td>0.869</td><td>0.994</td><td>0.992</td><td>0.991</td></tr><tr><td>G300 15A4</td><td>0.991</td><td>0.924</td><td>0.933</td><td>0.997</td><td>0.995</td><td>0.995</td></tr><tr><td>G300 15B2</td><td>0.877</td><td>0.847</td><td>0.795</td><td>0.984</td><td>0.987</td><td>0.985</td></tr><tr><td>G300 15B3</td><td>0.968</td><td>0.899</td><td>0.874</td><td>0.994</td><td>0.993</td><td>0.992</td></tr><tr><td>G300 15B4</td><td>0.993</td><td>0.919</td><td>0.924</td><td>0.997</td><td>0.995</td><td>0.996</td></tr><tr><td>G1200_5A2</td><td>0.960</td><td>0.795</td><td>0.902</td><td>0.893</td><td>0.854</td><td>0.891</td></tr><tr><td>G1200_5A3</td><td>0.986</td><td>0.907</td><td>0.982</td><td>0.949</td><td>0.922</td><td>0.949</td></tr><tr><td>G1200_5A4</td><td>0.995</td><td>0.941</td><td>0.994</td><td>0.970</td><td>0.945</td><td>0.970</td></tr><tr><td>G1200_5B2</td><td>0.955</td><td>0.897</td><td>0.888</td><td>0.892</td><td>0.885</td><td>0.894</td></tr><tr><td>G1200_5B3</td><td>0.988</td><td>0.970</td><td>0.976</td><td>0.949</td><td>0.947</td><td>0.948</td></tr><tr><td>G1200_5B4</td><td>0.996</td><td></td><td>0.995</td><td>0.970</td><td>0.969</td><td>0.970</td></tr><tr><td>G1200_10A2</td><td>0.886</td><td>0.985 0.784</td><td>0.826</td><td>0.962</td><td>0.947</td><td>0.956</td></tr><tr><td>G1200_10A3</td><td>0.981</td><td></td><td>0.926</td><td>0.987</td><td>0.968</td><td>0.980</td></tr><tr><td>G1200_10A4</td><td>0.995</td><td>0.853</td><td>0.968</td><td>0.993</td><td>0.973</td><td>0.990</td></tr><tr><td>G1200_10B2</td><td>0.909</td><td>0.870</td><td></td><td></td><td>0.969</td><td>0.968</td></tr><tr><td>G1200_10B3</td><td></td><td>0.901</td><td>0.843</td><td>0.968</td><td></td><td></td></tr><tr><td>G1200_10B4</td><td>0.986</td><td>0.950</td><td>0.909 0.963</td><td>0.987</td><td>0.985</td><td>0.984 0.991</td></tr><tr><td>G1200_15A2</td><td>0.997</td><td>0.962</td><td></td><td>0.993</td><td>0.991</td><td></td></tr><tr><td>G1200_15A3</td><td>0.874</td><td>0.881</td><td>0.809</td><td>0.983</td><td>0.985</td><td>0.981</td></tr><tr><td>G1200_15A4</td><td>0.968</td><td>0.915</td><td>0.896</td><td>0.993</td><td>0.992</td><td>0.991</td></tr><tr><td>G1200_15B2</td><td>0.993</td><td>0.932</td><td>0.932</td><td>0.996</td><td>0.995</td><td>0.995</td></tr><tr><td></td><td>0.892</td><td>0.915</td><td>0.810</td><td>0.983</td><td>0.986</td><td>0.982</td></tr><tr><td>G1200 15B3</td><td>0.978 0.993</td><td>0.932</td><td>0.891</td><td>0.993</td><td>0.993</td><td>0.992</td></tr><tr><td>G1200_15B4</td><td></td><td>0.939</td><td>0.933</td><td>0.996</td><td>0.995</td><td>0.995</td></tr><tr><td>Blob</td><td>0.941</td><td>0.936</td><td>0.898</td><td>0.870</td><td>0.845</td><td>0.865</td></tr></table></body></html>",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "针对图3中Blob模拟数值案例，本文ILS算法的优势更加明显。图4中，左边2个区划方案为ILS算法结果，右边2个区划方案为ArcGIS10.3中Skater算法结果。可以看出，ILS算法较完美地还原了事先设定的分区，而Skater算法混淆了部分分区。ArcGIS的计算时间约为 $2 . 5 { \\sim } 2 . 7 \\mathrm { s }$ ，ILS算法需 $5 . 1 { \\sim } 7 . 1 \\mathrm { s }$ 。图4中，4个区划指标的值分别为0.872、0.891、0.567和 0.719.",
        "page_idx": 7
    },
    {
        "type": "image",
        "img_path": "images/2fc5aca08e520ee7ab50d95774bf80d5d64bc15a61c94b320e702ba4b7f44bbd.jpg",
        "img_caption": [
            "Fig.4Regionalization results from Blob instance ",
            "图4Blob案例分区结果"
        ],
        "img_footnote": [],
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "表3为三个算法的计算时间比较，其中，ARISEL和 Skater算法计算时间来自文献[21](Aydin et al.,2021)。可以看出：(1)在 ArcGIS 中实现的 Skater 算法计算速度最快，随案例规模增大，计算时间增加较少；(2)ARISEL 算法计算时间最长，随案例规模增大，计算时间快速增长；(3)本文ILS算法计算时间高于 Skater算法，但远低于ARISEL算法。应当注意，3个算法的计算环境差异很大，不能直接比较计算时间，但计算时间能够大体上反映各个算法的计算效率。",
        "page_idx": 8
    },
    {
        "type": "table",
        "img_path": "images/3e329b45c9518b77b7d43d038d8e9fa0f53feb33949290d065f6c737da2c765e.jpg",
        "table_caption": [
            "表3计算时间比较",
            "Tab.3 Comparison of the computation times "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>案例</td><td>ARISEL</td><td>Skater</td><td>ILS</td><td>案例</td><td>ARISEL</td><td>Skater</td><td>ILS</td></tr><tr><td>G120_05A</td><td>4.81</td><td>0.53</td><td>0.78</td><td>G120_05B</td><td>4.25</td><td>0.45</td><td>0.80</td></tr><tr><td>G120_10A</td><td>3.21</td><td>0.54</td><td>0.84</td><td>G120_10B</td><td>3.28</td><td>0.51</td><td>0.78</td></tr><tr><td>G120_15A</td><td>4.28</td><td>0.46</td><td>0.74</td><td>G120_15B</td><td>4.26</td><td>0.50</td><td>0.76</td></tr><tr><td>G300_05A</td><td>42.76</td><td>0.55</td><td>1.72</td><td>G300_05B</td><td>48.30</td><td>0.60</td><td>1.60</td></tr><tr><td>G300_10A</td><td>25.22</td><td>0.56</td><td>1.48</td><td>G300_10B</td><td>21.28</td><td>0.58</td><td>1.01</td></tr><tr><td>G300_15A</td><td>28.30</td><td>0.59</td><td>1.32</td><td>G300_15B</td><td>26.24</td><td>0.60</td><td>1.55</td></tr><tr><td>G1200_5A</td><td>1296.96</td><td>0.92</td><td>10.22</td><td>G1200_5B</td><td>1123.03</td><td>0.84</td><td>6.24</td></tr><tr><td>G1200_10A</td><td>740.46</td><td>0.94</td><td>7.16</td><td>G1200_10B</td><td>508.20</td><td>0.95</td><td>7.39</td></tr><tr><td>G1200_15A</td><td>481.21</td><td>0.95</td><td>5.49</td><td>G1200_15B</td><td>338.53</td><td>0.95</td><td>4.78</td></tr></table></body></html>",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "5.2黄淮海地区气候分区",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "为进一步测试本文算法，选择黄淮海地区尝试进行气候区划。首先，本文黄淮海地区包括黄河、淮河、海河流域及山东半岛；其次，使用该区域15分网格30年年均降雨量和年均温度进行分区。该案例区包括2478个空间单元，空间范围如图5所示。研究区每个单元有60个属性数据，即30个年均降雨量数据和30个年均气温数据。",
        "page_idx": 8
    },
    {
        "type": "image",
        "img_path": "images/4c5d64aaa7de0021d7fc150ec8298c6f8828fb19b1ac2933501b81fcd2813b1a.jpg",
        "img_caption": [
            "Fig. 5 Map of a case study area ",
            "图5研究区示意图"
        ],
        "img_footnote": [],
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "针对黄淮海地区气候数据，分别采用ArcGIS10.3中 Skater算法和本文ILS进行气候区划。气候分区数量分别设置为3、4、5、6、7、8、9、10、12和15，并假定所有属性的权重相同，均为1。Skater算法和本文ILS算法均使用标准差标准化方法将60个属性数据进行标准化处理，完成区划后，统计每一个属性数据的 $\\scriptstyle { \\mathrm { \\mathrm { R } } } ^ { 2 }$ 指标和标准化数据的总体 $\\scriptstyle { \\mathrm { \\mathrm { R } } } ^ { 2 }$ 指标。表4中提供了Skater算法和ILS算法区划结果的 $\\scriptstyle \\mathrm { \\mathsf { R } } ^ { 2 }$ 指标，包括60个属性 $\\scriptstyle \\mathrm { \\mathsf { R } } ^ { 2 }$ 指标的最小值(MinR2)、平均值(AvgR2)和最大值(MaxR2)，也包括标准化数据的总体 $\\scriptstyle { \\mathrm { \\mathrm { R } } } ^ { 2 }$ 指标(R2)和计算时间。可以看出，ILS 算法区划质量指标显著高于 Skater 算法，同时 Skater 算法计算效率大幅领先于ILS算法。",
        "page_idx": 9
    },
    {
        "type": "table",
        "img_path": "images/7a284cdcb0b818175d2a89ac8261757b8f3dd447cc6ea0d04cae1485c8249ad9.jpg",
        "table_caption": [
            "表4研究区气候区划 $\\mathbf { R } ^ { 2 }$ 指标统计",
            "Tab 4. The $\\scriptstyle \\mathbf { R } ^ { 2 }$ indexes from the case study area "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td colspan=\"5\">Skater</td><td colspan=\"5\">改进ILS</td></tr><tr><td>K</td><td>MinR2</td><td>AvgR2</td><td>MaxR2</td><td>R2</td><td>时间/s</td><td>MinR2</td><td>AvgR2</td><td>MaxR2</td><td>R2</td><td>时间/s</td></tr><tr><td>3</td><td>0.540</td><td>0.671</td><td>0.786</td><td>0.671</td><td>8.68</td><td>0.304</td><td>0.687</td><td>0.872</td><td>0.687</td><td>36.52</td></tr><tr><td>4</td><td>0.544</td><td>0.755</td><td>0.842</td><td>0.755</td><td>3.79</td><td>0.514</td><td>0.796</td><td>0.892</td><td>0.796</td><td>37.93</td></tr><tr><td>5</td><td>0.582</td><td>0.780</td><td>0.863</td><td>0.780</td><td>3.89</td><td>0.611</td><td>0.829</td><td>0.897</td><td>0.829</td><td>34.87</td></tr><tr><td>6</td><td>0.592</td><td>0.804</td><td>0.896</td><td>0.804</td><td>4.43</td><td>0.645</td><td>0.855</td><td>0.912</td><td>0.855</td><td>33.18</td></tr><tr><td>7</td><td>0.604</td><td>0.826</td><td>0.899</td><td>0.826</td><td>4.55</td><td>0.635</td><td>0.869</td><td>0.927</td><td>0.869</td><td>37.75</td></tr><tr><td>8</td><td>0.621</td><td>0.846</td><td>0.924</td><td>0.846</td><td>4.55</td><td>0.692</td><td>0.885</td><td>0.943</td><td>0.885</td><td>31.58</td></tr><tr><td>9</td><td>0.692</td><td>0.862</td><td>0.926</td><td>0.862</td><td>4.62</td><td>0.706</td><td>0.894</td><td>0.945</td><td>0.894</td><td>32.10</td></tr><tr><td>10</td><td>0.717</td><td>0.871</td><td>0.926</td><td>0.871</td><td>4.60</td><td>0.743</td><td>0.905</td><td>0.951</td><td>0.905</td><td>47.18</td></tr><tr><td>12</td><td>0.732</td><td>0.888</td><td>0.937</td><td>0.888</td><td>4.77</td><td>0.779</td><td>0.917</td><td>0.962</td><td>0.917</td><td>46.62</td></tr><tr><td>15</td><td>0.752</td><td>0.908</td><td>0.950</td><td>0.908</td><td>4.99</td><td>0.810</td><td>0.930</td><td>0.968</td><td>0.930</td><td>35.40</td></tr></table></body></html>",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "图6为分区数量为6时，Skater算法和ILS算法的区划结果。可以看出，两者区划结果差异较大，表现在区域形状、大小和边界的差异。Skater 算法结果中，分区呈块状；而ILS 算法结果中，分区更倾向于条带形状，符合该研究区气温、降雨量、地形变化的总体空间规律。从 $\\scriptstyle { \\mathrm { \\mathrm { R } } } ^ { 2 }$ 指标看，ILS算法分区指标(0.855)显著优于 Skater分区指标(0.804)。Skater算法基于相邻单元的相似性，不考虑非邻单元之间的关系，导致算法具有一定的局限性。ILS 算法克服了Skater算法过于关注局部的局限，从而使提升了区划质量。",
        "page_idx": 9
    },
    {
        "type": "image",
        "img_path": "images/f7ca5a0922582fdecc37d62826fd5faf3e084bf25d9ef844c6438148235e1695.jpg",
        "img_caption": [
            "Fig. 6 The map of climate regions (Top: ArcGIS,bottom:ILS) 图6研究区气候区划示意图(上图ArcGIS，下图ILS算法) "
        ],
        "img_footnote": [],
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "5结论",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "本文提出了一个改进ILS 算法用于求解区划问题。该算法由初始解生成、局部搜索、群解搜索、解扰动、中心点更新等部分构成，且通过分区空间连续判断和修复操作保证当前解中所有分区空间连续。该算法基于分区中心点评价分区目标值，大幅降低了目标函数的计算，从而提升了算法效率。算法采用群搜索、解扰动和中心点更新，扩大了解的搜索空间，从而提升分区质量。基准案例测试表明：改进 ILS 算法区划结果明显优于 Skater 算法和ARISEL算法。对于无明显气候分区边界的多属性气候分区，改进ILS算法分区目标值显著优于Skater算法，分区结果与区域地形、气温、降雨的分布模式相吻合。",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "本文改进 ILS 算法设计具有几个显著的特点和优势。第一，与 AZP、AZP-SA、AZP-Tabu 和ARISEL相比，ILS算法选择分区中心点进行目标函数计算，避免了局部搜索过程频繁地计算分区中单元属性均值，从而大幅地提高了算法计算效率。第二，AZP 算法属于简单的启发式算法，AZP-SA、AZP-Tabu 算法改进了搜索策略，属于元启发算法范畴，有效地提升了算法质量，ARISEL使用多个初始解，并选择高质量解进行禁忌搜索，扩大了搜索空间。改进ILS 算法使用群解、扰动、中心点更新等方法，区别有现有算法设计，充分利用了成熟的优化算法机制。第三，SKATER仅考虑相邻单元区之间的相似性，大幅降低了搜索空间，计算效率很高。而REDCAP算法仅考虑相邻分区之间的相似性，通过自下而上方式完成聚类。ILS算法通过搜索和扰动克服了SKATER和REDCAP算法的过于短视的局限，有利于搜索到高质量分区。综上，ILS 算法的这些特征，保证了分区质量，又有效降低了算法的复杂度。",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "考虑到地理现象的空间渐变性、地理系统的复杂性、空间分异规律的尺度依赖性，本文区划算法的使用应建立在区域研究基础上：把握地理现象格局与变化机理，理解特定区域的地理特征，明确区划任务与目标，进而选择合适的区划指标。进一步的研究方向包括：如何确定合适的分区数量，如何进行数据标准化处理，如何选择最适宜差异度函数，以及如何基于本文算法发展出通用的区划方法和软件工具。",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "参考文献",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "[1]郑度,葛全胜,张雪芹,等.中国区划工作的回顾与展望[J].地理研究,2005,24(3):330-344.   \n[2] 刘燕华,郑度，葛全胜,等.关于开展中国综合区划研究若干问题的认识[J].地理研究, 2005,24(3): 321-329.   \n[3]郑度,欧阳，周成虎.对自然地理区划方法的认识与思考[J].地理学报,2008,63(6):563- 573.   \n[4] Duque J C，Ramos R， Surinach J. Supervised regionalization methods: A survey [J]. International Regional Science Review, 2007, 30(3):195-220.   \n[5] Cliff A D, Haggett P, Ord JK, et al. Elements of Spatial Structure: A Quantitative Approach [M].New York: Cambridge University Press,1975.   \n[6] Keane M. The size of the region-building problem [J]. Environment and Planning A,1975, 7(5): 575-577.   \n[7] Wright J, Revelle C, Cohon J. A multiobjective integer programming model for the land acquisition problem [J]. Regional Science and Urban Economics,1983,13(1): 31-53.   \n[8] Cova T J, Church R L. Contiguity constraints for single-region site search problems [J]. Geographical Analysis, 2000,32(4): 306-329.   \n[9] Wiliams J C. A Zero-One Programming Model for Contiguous Land Acquisition [J]. Geographical Analysis, 2002, 34(4): 330-349.   \n[10] Shirabe T.A model of contiguity for spatial unit allocation [J]. Geographical Analysis,2005, 37(1): 2-16.   \n[11] Duque JC, Church R L, Middleton R S. The p-Region Problem [J]. Geographical Analysis, 2011, 43,104-126.   \n[12]Li W, Church R L, Goodchild M F. The p-compact-regions problem [J]. Geographical Analysis,2014,46(3): 250-273.   \n[13]Guo D. Regionalization with dynamically constrained agglomerative clustering and partitioning (REDCAP) [J]. International Journal of Geographical Information Science, 2008, 22(7): 801-823.   \n[14] Openshaw S. A geographical solution to scale and aggregation problems in region-building, partitioning and spatial modelling [J]. Transactions of the Institute of British Geographers, 1977: 459-472.   \n[15] Browdy M H. Simulated annealing: an improved computer model for political redistricting [J]. Yale Law & Policy Review, 1990: 163-179.   \n[16] Openshaw S, Rao L. Algorithms for reengineering 1991 Census geography [J]. Environment and planning A, 1995, 27(3): 425-446.   \n[17] Duque J C, Church R L. A new heuristic model for designing analytical regions[C]//North American Meeting of the International Regional Science Association, Seattle. 2004.   \n[18]郭仁忠.二维有序聚类方法及其在编制区划地图中的应用[J].武汉测绘学院学报，1985, (2):21-29.   \n[19]Maravalle M, Simeone B. A spanning tree heuristic for regional clustering [J]. Communications in statistics-theory and methods,1995,24(3): 625-639.   \n[20] Assuncao R M, Neves M C, Camara G, et al. Efficient regionalization techniques for socioeconomic geographical units using minimum spanning trees [J]. International Journal of Geographical Information Science, 2006,20(7): 797-811.   \n[21] Aydin O, Janikas M V, Assuncao R M, et al. A quantitative comparison of regionalization methods [J]. International Journal of Geographical Information Science, 2021,35(11): 2287- 2315.   \n[22] Lourenco HR, Martin O, Stutzle T. Iterated Local Search: Framework and Applications [M] // Gendreau M,Potvin JY.eds.Handbook of Metaheuristics,2nd.Edition. New York: Springer, 2010, 363-397.   \n[23] Xiao N. A unified conceptual framework for geographical optimization using evolutionary algorithms. Annals of the Association of American Geographers, 2008, 98(4): 795-817.   \n[24] Liu，Y.，Cho，W. K.，and Wang， S.， 2016. PEAR: a massively parallel evolutionary computation approach for political redistricting optimization and analysis. Swarm and evolutionary computation, 30, 78-92. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "An improved iterative local search algorithm for the regionalization problem ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Yunfeng Kong ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "(Key Laboratory of Geospatial Technology for the Middle and Lower Yellow River Regions,Ministry of Education,Henan University,47500) ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Abstract: Regionalization is to divide a large geographic area into a number of homogenous and spatially contiguous regions. It has been widely used in fields such as geography, cartography, ecology，environment management, socio-economy， and urban planning. Since the general regionalization problem has been proven to be NP-Hard, various models and solution methods for regionalization have be proposed since l96Os. The regionalization methods can be classified into four categories: exact, clustering-based, heuristic,and tree-based. However, the commonly used regionalization algorithms are difficult to solve the problem in an effective and eficient manner simultaneously. An improved iterative local search algorithm is proposed in this paper for the regionalization problem. There are six key mechanisms in the new algorithm: the search of moving boundary units to improve the current solution; the center-based approach to accelerate the computation of solution objective; the solution perturbation to escape from the state of local optimum; the frequent update of regional centers to reevaluate the solution; the population-based search to explore larger solution space; and the region repair to keep spatially contiguous regions. The regionalization experimentations on 55 benchmark instances show that the proposed algorithms outperforms ARISEL algorithm and SKATER algorithm in terms of sum-squared errors and adjusted Rand index. A case study of the climate regionalization using 6O attributes illustrates that the improved ILS is effective to delineate climate regions that are compatible with the precipitation, temperature and landform patterns. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Keywords: regionalization problem; iterative local search; benchmark test; case study ",
        "page_idx": 13
    }
]