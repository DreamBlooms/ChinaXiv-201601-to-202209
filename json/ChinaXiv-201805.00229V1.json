[
    {
        "type": "text",
        "text": "基于特征航迹简化模型的中心航迹提取研究“",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "王莉莉，彭勃",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "(中国民航大学 天津市空管运行规划与安全技术重点实验室，天津 300300)",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "摘要：针对现有中心航迹提取方法存在的问题：进近转弯点容易缺失，2。数据量庞大、运算耗时，有些航迹点没有代表性。根据“以直代曲”思想简化航迹点数据，然后基于特征航迹的航向进行聚类，求得平均航向并得到中心航迹定位点，最后使用B样条曲线拟合得到中心航迹。仿真结果表明，使用新方法航迹点数量减小 $78 . 9 2 \\%$ ，同时准确地得到中心航迹，解决了转弯点缺失和耗时的问题，验证了新方法对于中心航迹的提取具有准确性和有效性。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "关键词：中心航迹提取；特征航迹；进近转弯点；航迹聚类；以直代曲中图分类号：TP391 doi: 10.3969/j.issn.1001-3695.2017.07.0663",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Research on central track extraction based on simplified track model ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Wang Lili, Peng Bo (TianjinKeyLaboratoryofAtcOperationPlanning&SafetyTechnology,CivilAviationAdministrationofChina,Tianjin300300, China) ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Abstract: Inviewoftheexisting problems ofthecentral rack extraction method:1.appoachtupoints areeasytobe mising; 2.the amountofdataishugeandthecomputation timeis time-consuming;3.some track points arenotrepresentative.Firstly simplifythetrack point data according totheideaof\"replacecurveby straight\"inthispaper，thencluster baseon the characteristic trackcourse,obtaintheaverageheadingandthecenter track locating point,finalyuse the B splinecurve tofit and obtain the central track,simulation results show that the number of track points decreases by $78 . 9 2 \\%$ using the new method, atthesame time,obtainthecentral trackaccurately,andsolvedthe problemofturing point missngandtimeconsuming,prove that the new method is accurate and effective for the extraction of the central track. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Key Words: central track extraction; feature track; approach turning point; track clustering; replace curve by straight ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "0 引言",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "通过分析航空器的历史雷达数据，航空公司能够客观地评价飞行员的飞行品质、飞机性能和航班的运行情况，进而科学地调整飞行计划[3\\~8]；对管理单位来说，可以利用航迹数据研究飞行程序的设计与优化以及噪声预测[9,10]。然而空中交通流量与日俱增，航空器的航迹数据也呈几何级数增长，航迹数据的数量十分庞大，人工处理这些数据显然是不实际，因此如何从海量航迹数据中挖掘出有价值的信息越来越受到民航领域研究者的重视，国内外很多学者对航迹聚类进行了相关研究，赵元棣等3将航迹视为以机场雷达为原点建立的立体坐标系下的离散点云集合，利用计算几何的骨架提取算法，求得代表点，经过处理得到中心航迹并识别出中心航迹的特征点；王洁宁等人[4]分析了国内外现有的航迹聚类算法，认为现有的航迹聚类算法忽略了时间信息，而航迹点的分布与进场时间有者密切的联系，提出了时间空间的聚类方法；王涛波等人[研究了基本的聚类算法，认为其在航迹聚类中存在容易陷入局部最优搜索的缺点，提出了采用遗传模拟退火算法对模糊C均值聚类算法进行优化；徐涛等人[8提出了基于航迹间面积加权的航迹相似性度量的CURE算法，使聚类效果更精确；Rehm等人[I]直接利用已有航迹定义其相似性，针对同一机场不同跑道的进近程序聚类。Gariel等人[2]进行了雷达航迹聚类，并对航迹运行进行实时监控。Kenneth等人[13]针对机场的繁忙区域，采用基于网格的聚类方法对不同机场的航迹进行分析，得到其不同机场的进离场中心航迹。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "目前，在对航迹聚类的研究中，进近转弯点中心航迹的提取和拟合是研究的难点。在对进近航迹进行聚类，提取中心航迹时，最终结果往往是直线航段能够得到中心航迹，而转弯航段则容易缺失。因此，如何对进近转弯点的历史航迹进行有效的中心航迹提取与拟合具有很好的理论价值和实际意义，本文提出基于特征航迹简化模型的中心航迹提取方法，根据“以直代曲”思想简化航迹点得到特征点，然后基于特征航迹的航向进行聚类，对聚类结果中的每一类别的特征航迹求得平均航向同时得到中心航迹定位点，最后使用B样条曲线拟合得到平滑的中心航迹，本文通过对进近转弯航段真实的历史航迹数据进行实验分析，验证了该方法的准确性和有效性。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1 雷达数据处理和进近过程描述",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "本文要处理的数据源是原始二次雷达数据，首先对原始二次雷达数据进行解码转换成全文本明码类型，然后再将所有含有有用信息的文本条目按关键字逐一捡出，并将所需字段转换成程序需要的二进制整数或浮点数格式，数据单位保留不变，最后整理得到的规范航迹数据形式如表1所示。",
        "page_idx": 1
    },
    {
        "type": "table",
        "img_path": "images/74aac156aaa05cd65bad81aea5cc0e4f93794b4c4409d882360fe393bf78412d.jpg",
        "table_caption": [
            "表1整理得到的二次雷达数据"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td rowspan=\"2\">时间</td><td rowspan=\"2\">纬度</td><td rowspan=\"2\">经度</td><td rowspan=\"2\">高速</td><td rowspan=\"2\">度</td><td rowspan=\"2\">航向</td></tr><tr><td>度</td></tr><tr><td>11:40:26</td><td>112.2890</td><td>32.1376</td><td>274</td><td>279</td><td>169.00</td></tr><tr><td>11:40:30</td><td>112.2890</td><td>32.1376</td><td>274</td><td>226</td><td>183.00</td></tr><tr><td>11:40:34</td><td>112.2870</td><td>32.1293</td><td>426</td><td>247</td><td>175.00</td></tr></table></body></html>",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "虽然可以从该表的雷达数据中获取航向信息，但是雷达数据每4秒钟采集一次，对于D类航空器，转弯速度较大，4s时间过长，不能准确地刻画出航空器的航向变化规律，所以在本文第2节中重新定义了特征点、特征特征航迹以及航向变化等几个概念。由于二次雷达返回的是经纬度信息，只有转换成大地坐标才能准确的反映出飞机的实际运行轨迹，因此以机场的导航台为坐标原点，建立直角坐标系，将返回航迹的经纬度数据转换为大地坐标，坐标转换得到直角坐标系下的横纵坐标（单位为千米）如表2所示。",
        "page_idx": 1
    },
    {
        "type": "table",
        "img_path": "images/c5cf0832b9480d5bd9fd10a357b24cf3aa39f916b73a6892fca707f2269b9e9d.jpg",
        "table_caption": [
            "表2经纬度坐标转换成平面坐标"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td>横坐标</td><td>纵坐标</td></tr><tr><td>1</td><td>00173.93750</td><td>00244.25000</td></tr><tr><td>2</td><td>00173.56250</td><td>00243.62500</td></tr><tr><td>4</td><td>00173.25000</td><td>00243.00000</td></tr></table></body></html>",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "将原始数据经过坐标转换处理后用MATLAB作图得到该进近程序在实际运行中的情况，如图1所示，筛选截取其中三段转弯部分分别命名为航段1、航段2和航段3。该程序的飞行过程大致如下：脱离航路后向台飞行，在导航台上方转弯，此为航段1的部分；然后直飞下一个导航台（IAF)，过台转弯到下一个导航台，然后再过台转弯，此为航段2的部分；此后进入基线转弯程序直至落地，此为航段三的部分。由得到的数据显示，平均一条航迹一个转弯过程大约有20个点迹，该机场一年的起降架次大约三十多万，也就是说一年的进近转弯数据累计可达进四百万。这样庞大的数据量用计算机处理起来不仅耗时，而且需要占用非常大的内存，不经济。因此需要一种方法既可以在很大程度上减少航迹数据，又可以保证航迹的准确性。",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/8e1f99122fee5a7df5a42b4bcc9fe1336103d034cb8f417438e9d5df443c1ea1.jpg",
        "img_caption": [
            "图1进近航段"
        ],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2 基于特征航迹的简化模型",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "在数学和物理学科中有“以直代曲”的思想，认为一条曲线可以用在曲线上取点连成的折线段近似表示。对于转弯航迹来说，也可以利用这样的思想来做处理：当连续的某几段航迹走向大致相同时，可以用这几段连续航迹的起点和终点间的直线段来近似表示。本文把这里的起点和终点称为特征点，特征点间的直线段称为特征航迹。为了保证准确性，使特征航迹尽可能地接近原航迹，本文希望特征点是表示航迹走向有较大变化的点。假设有如图2中由 $P _ { \\mathrm { { \\scriptscriptstyle 1 } } }$ 到 $P _ { \\mathrm { { s } } }$ 的航迹点构成的一段转弯航迹，可以看出 $P _ { _ 3 }$ 和 $P _ { 6 }$ 航迹点两侧航迹走向明显不同，且差异较大，所以这两点应该是特征点。由 $C P _ { _ { 1 } }$ 到 $C P _ { 4 }$ 组成的特征航迹可以体现出原航迹的趋势。",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/c20e743d5a1dd6a34bd2b21391a956382d49538476b0371ea992783af8bda811.jpg",
        "img_caption": [
            "图2 以直代曲原理图"
        ],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "在所有航迹点中选择特征点，而特征点的最佳选择要遵循两个原则：准确性原则和最简原则。准确性原则是使特征航迹与原航迹间的差异尽可能小，而最简原则是希望特征点的个数尽量少。这两个原则在选取特征点的过程中是相互对立的，只有综合考虑这两个原则的约束才能使得特征点的数量和计算精度达到要求，为了兼顾准确性原则和最简原则，使特征点的选取达到最优，本文引入特征航迹与原航迹的差异度量值一一特征航迹差异矩阵 $E$ 。 $E$ 的定义为原航迹的近似长度与特征航迹表征长度的差。其中原航迹的近似长度为两个航迹点间的直线长度，特征航迹表征长度包含三个部分，分别为：a）特征航迹长度 $d ^ { ' }$ ；b）垂直差异量 $d _ { _ p }$ ，即特征点之间的各原航迹点到特征航迹的距离之和；c）角度差异量 $d _ { a }$ ，如式（1）所示。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\nd a = \\left\\{ l \\times \\sin \\theta , 0 \\leq \\theta < 9 0 ^ { o } \\right.\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "其中： $\\mathbf { \\xi } _ { l }$ 是各原航迹段长度， $\\theta$ 是各原航迹段向量与特征航迹向量间的夹角，由式（1）可以看出，当 $\\theta \\leq 9 0 ^ { o }$ 时 $d _ { \\phantom { a } a }$ 等于该航段两端点垂直差异量之差，如图3所示，原航迹的长度为",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\nd = \\left| p _ { \\scriptscriptstyle 1 } + p _ { \\scriptscriptstyle 2 } \\right| + \\left| p _ { \\scriptscriptstyle 2 } + p _ { \\scriptscriptstyle 3 } \\right| + \\left| p _ { \\scriptscriptstyle 3 } + p _ { \\scriptscriptstyle 4 } \\right|\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "特征航迹表征长度为",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "$d ^ { \\prime } = \\left| p _ { \\scriptscriptstyle 1 } + p _ { \\scriptscriptstyle 4 } \\right| + ( d _ { \\scriptscriptstyle 1 } + d _ { \\scriptscriptstyle 2 } ) + \\left| d _ { \\scriptscriptstyle 1 } + ( d _ { \\scriptscriptstyle 2 } - d _ { \\scriptscriptstyle 1 } ) + d _ { \\scriptscriptstyle 2 } \\right|$ 则特征航迹差异量为 $E = d ^ { ' } - d$ 。通过控制 $E$ 的大小，使得简化选取的特征点结果符合两个原则。综上，新方法在解决处理大数据耗时问题的优势就体现在简化模型上，该简化模型可以在初始数据处理时将数据精简，从而减少算法耗时。",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/6b40f3c66b5afc0e81a421b5e33a9e5a81f7bffacbc7c1cd52b9fb4f143dc9a7.jpg",
        "img_caption": [
            "图3特征航迹差异量"
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3 基于航向的聚类 ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "上文提到传统聚类算法在进近转弯点处的提取效果不好，原因如下：a)按照基本的聚类方法是对轨迹分布在数学上的评价指标（一般考虑距离、密度）进行聚类，没有对于航空器的运行过程进行考虑，最终结果往往只能缺失转弯部分而大致上体现出轨迹的线性走向;b)存在一些不能表征航空器实际运行规律的航迹点，要舍去此类航迹点，因此本文提出基于航向的聚类算法，通过该聚类算法可以将转弯过程体现出来，航空器的转弯轨迹在空间上表现的特点是转弯半径大，通常为 $2 { \\sim } 5 \\mathrm { k m }$ 所以可以近似认为是飞几个直线段完成的转弯。同时转弯的本质是航向的变化，而航向的变化不是一蹴而就的，而是逐渐变化的过程。考虑以上情况，本文提出按照转弯航向对特征航迹进行聚类，将航向差异较小的航段认为是同一转弯阶段，通过求每一阶段的中心航迹从而最后还原出整个转弯过程的中心航迹。转弯阶段聚类的具体步骤是：将所有特征航迹的线段转换为向量形式，随机选择一条线段，计算它与其他向量间的夹角，通过角度阈值 $\\theta$ ，得到与其方向相似的向量作为同一簇，从而完成聚类。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "4 中心航迹定位点的获取",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "传统的聚类算法将所有的航迹数据进行聚类，没有对航迹点进行分类进而对每一类中的航迹点聚类得到中心定位点，所以往往导致最后的中心定位点出现缺失或偏离轨迹的现象，为解决传统聚类算法得到的中心定位点不准确的问题，聚类后每一簇都代表了转弯的某一阶段，对每一簇的航迹求平均值，再将所有簇的数据结合起来可以反映该航段的历史航迹的分布趋势，也就是中心航迹。线段的平均值可以用某一条直线截取线段（下称截取线)，计算截点的平均值。然而截取线不能随意选取，如果直线与簇内航迹间的夹角偏大，那么航迹左右两边则各有一段无法准确计算平均值，所以截取线应该与大部分航迹方向垂直。因此，引入平均向量表示簇内大部分航迹的方向。若选取的截取线与平均向量相垂直，则能够准确求得平均航迹的长度可以得到增加，中心航迹也更精确。在处理的时候需要将航迹用向量表示，平均向量的定义由式（2）给出。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\n\\overline { { { \\nu } } } = \\frac { \\nu _ { 1 } + \\nu _ { 2 } + \\ldots + \\nu _ { n - 1 } + \\nu _ { n } } { n }\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "得到平均向量后，求中心航迹只需要用垂直于平均向量的截取线扫过每一簇中的航段，然后求其交点的平均值即可，因为航迹是由航迹点间的线段构成。在求平均航迹时，应该考虑每一簇中的所有航迹点，用过每一个点的直线与航迹相交的点求平均值，得到点称为中心航迹定位点。连接所有中心航迹定位点便可以得到中心航迹。但并不是所有航迹点得到的平均值都能成为中心航迹定位点。",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/c2ebaa843e00da3e90305ad6cce722ba923b254b2cfb7a60e0c5ea0ee1d44525.jpg",
        "img_caption": [
            "图4平均航迹原理图"
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "如图4所示，假设某一簇中航迹如图分布，其中蓝色的箭头代表平均航向，橘黄色线段与平均航向垂直，红色轨迹表示通过计算每一航迹点的平均值得到的平均航迹。可以看出，如果对每一个点求平均值会使得结果存在很大的偏差。当截取线与航迹交点少于一定数量时，如图中的 $\\textcircled{1}$ 和 $\\textcircled{6}$ ，得到的中心航迹定位点的结果不可信，应该舍去这两个点。因此需要设置交点阈值，只有当交点个数大于某个值时，才认为此时得到的中心航迹定位点是可取的。其次为了使中心航迹更平滑，对于中心航迹定位点的间隔也需要进行控制。如图中的和 $\\textcircled{3}$ ，因为 $\\textcircled{2}$ 和 $\\textcircled{3}$ 相隔太近所以跳过不取，因此图中的中心航迹应该为由定位点 $\\textcircled{2}$ 、 $\\textcircled{4}$ 和 $\\textcircled{5}$ 构成。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "5 样条曲线拟合",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "由上节程序得到了中心航迹定位点，将中心航迹定位点连线得到中心航迹。为了使最后得到的中心航迹平滑且符合动力学约束，本文选择使用三次B样条曲线进行连接。样条曲线在工程设计中应用广泛，是经过一系列给定点的光滑曲线，其在每个点处的一阶和二阶导数连续，具有连续、曲率变化均匀的特点，因此符合飞行性能。三次B样条曲线原理如下：",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "假设在区间（a，b）上给定一个分割：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\Delta \\colon a = x _ { _ 0 } < x _ { _ 1 } < \\ldots < x _ { _ { n - 1 } } < x _ { _ n } = b\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "在（a，b）上的一个函数 $S ( x )$ 称为差值三次样条函数，如果满足下列条件：",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "在每一个区间 $( x _ { i - 1 } , x _ { i } ) , i = 1 , 2 , . . , n$ 内 $S ( x )$ 分别是三次多项式函数；在节点 $x _ { i } ( i = 1 , 2 , . . . , n - 1 )$ 处成立：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\boldsymbol { s } ^ { ( k ) } ( \\boldsymbol { x } _ { i } - \\boldsymbol { o } ) = \\boldsymbol { s } ^ { ( k ) } ( \\boldsymbol { x } _ { i } + \\boldsymbol { o } ) , k = 0 , 1 , 2 , . . . , n - 1\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "即小区间上的三次多项式函数，在拼接点处 $x _ { i }$ 具有二阶连续拼接。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "满足差值条件 $y _ { i } = S ( x _ { i } ) , i = 0 , 1 , . . . , n$ ，当 $n = 3$ 时，则有三次B样条曲线的基函数如下：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { l l } { \\displaystyle G _ { 0 , 3 } ( t ) = \\frac { 1 } { 6 } ( - t ^ { 3 } + 3 t ^ { 2 } - 3 t + 1 ) , } \\\\ { \\displaystyle G _ { 1 , 3 } ( t ) = \\frac { 1 } { 6 } ( 3 t ^ { 3 } - 6 t ^ { 2 } + 4 ) , } \\\\ { \\displaystyle G _ { 2 , 3 } ( t ) = \\frac { 1 } { 6 } ( - 3 t ^ { 3 } + 3 t ^ { 2 } + 3 t + 1 ) , } \\\\ { \\displaystyle G _ { 3 , 3 } ( t ) = \\frac { 1 } { 6 } t ^ { 3 } , } \\end{array} \\right. \\qquad t \\in \\left[ 0 , 1 \\right]\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "三次B样条曲线段：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\nP _ { _ { 0 , 3 } } ( t ) = { \\frac { 1 } { 6 } } { \\left[ { \\begin{array} { l l l l } { 1 } & { t } & { t ^ { 2 } } & { t ^ { 3 } } \\end{array} } \\right] } { \\left[ \\begin{array} { l l l l } { 1 } & { 4 } & { 1 } & { 0 } \\\\ { - 3 } & { 0 } & { 3 } & { 0 } \\\\ { 3 } & { - 6 } & { 3 } & { 0 } \\\\ { - 1 } & { 3 } & { - 3 } & { 1 } \\end{array} \\right] } { \\left[ \\begin{array} { l } { p _ { _ 0 } } \\\\ { p _ { _ 1 } } \\\\ { p _ { 2 } } \\\\ { p _ { 3 } } \\end{array} \\right] }\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "6 仿真分析",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "本文采用MATLAB8.3环境编程进行仿真，选取某机场一套进近程序的转弯段航段三一周的航迹数据，数据样本中共有15341个航迹点，算法中需要设置的三个参数分别为：a）k，它决定了特征点的数量和特征航迹近似程度；b）sita，其决定了类的数量和聚类效果；c）dist，它控制中心航迹定位点间的距离和交点个数，决定了拟合航迹的光滑程度。首先选取不同的 $k$ 值，对航迹点进行剔除，使得航迹点的选取符合准确性原则和最简原则，得到 $k$ 值、剔除后剩余航迹点和剔除率的不同结果如表3所示。为验证剔除效果，从航段三中选取一条航迹数据，选取 $k = 0 . 2 0$ 、0.21、0.22时的剔除效果分别如图5\\~7所示，其中蓝色空心圆代表原始航迹点，红色实心点代表剔除后剩下的航迹点，从图中可以看出，选取0.20和0.22时的航迹点过于集中，存在两个点相邻的情况，而选取0.21时航迹点比较发散，分布较均匀，符合上文所述的两个原则，所以选取 $k = 0 . 2 1$ 进行航迹点剔除，对剔除后得到的航迹点进行聚类分析，选取不同角度阈值sita进行聚类，如图8所示当选取 $s i t a = 2 0 ^ { o }$ 时，将航段聚成八类，聚类效果很好，航段无缺失，然后选取不同的间距阈值dist，选取 $d i s t = 0 . 5 , \\ 1 . 0$ 和1.5的效果图如图9\\~11所示，当选取 $d i s t = 1 . 0$ 时航迹点间距较合适，航迹点比较分散，其他参数不变，取选取 $k = 0 . 2 0$ 、0.21、0.22时，算法耗时都在5s左右；为了验证本方法的优势，使用KMEANS算法与本方法对比，如图12所示：同样选取相同的数据进行聚类分析，算法耗时44s,提取得到17个中心航迹定位点，用黑色十字表示，从图中可以看出KMEANS算法在直线段的提取效果很好，但是在转弯点处出现了缺失现象，尤其是第10、11个点，严重偏离中心航迹，得不到理想的中心航迹点提取效果，从而不能反映出航空器实际的运行规律，说明传统聚类算法在提取进近转弯点、解决算法耗时以及获取中心航迹的问题上存在不足。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "随后对本方法得到的17个中心航迹点进行B样条拟合，选取插值间隔为0.5时得到33个控制点，表4中列出了部分控制点的坐标，随后将控制点依次连接得到最后中心航迹如图13所示，图中蓝色空心圆代表17个中心航迹点，红色十字代表使用B样条曲线得到的33个控制点。",
        "page_idx": 3
    },
    {
        "type": "table",
        "img_path": "images/d3f83158bb2c73cd28f66519b4103edf0073e050bd37ef92a4ded6d2e13b75bb.jpg",
        "table_caption": [
            "表3不同阈值k得到的结果"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>阈值k</td><td>0.20</td><td>0.21</td><td>0.22</td><td></td><td>0.25</td></tr><tr><td>剔除后航迹点</td><td>3327</td><td>3234</td><td>3167</td><td></td><td>2948</td></tr><tr><td>剔除率</td><td>78.31%</td><td>78.92%</td><td>79.36%</td><td></td><td>80.78%</td></tr></table></body></html>",
        "page_idx": 3
    },
    {
        "type": "table",
        "img_path": "images/b7c954a188c75d8dda2c65a6f640064a657b6ce7bb352ec665943af37db1ae33.jpg",
        "table_caption": [
            "表4B样条曲线拟合得到的部分控制点"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>坐标点序列</td><td>1</td><td>2</td><td>3</td><td>…</td><td>33</td></tr><tr><td>控制点坐标X</td><td>150.4979</td><td>150.3399</td><td>150.1492</td><td></td><td>147.6681</td></tr><tr><td>控制点坐标Y</td><td>139.1093</td><td>138.1118</td><td>137.0123</td><td></td><td>141.9310</td></tr></table></body></html>",
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/5fca161bffcbf41631dfce4f4e5dcd8b9d342d00cdedb71bd55eee15895e1424.jpg",
        "img_caption": [
            "图5剔除率 $_ { = 0 . 2 0 }$ 的效果图"
        ],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/aad05620c8b50635e0fb228be550a8dc4847d132bd1b3efdc35210feb3983be3.jpg",
        "img_caption": [
            "图6剔除率 $= 0 . 2 1$ 的效果图"
        ],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/fa9e8eed05aae0cee087514b07a4a4ee5aadbbe60ce2284247b17047f2e219e0.jpg",
        "img_caption": [
            "图7剔除率 $= 0 . 2 2$ 的效果图"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/faa9ea94e85f0d2ae0f897fbf50909fedda59ad5ec738df6e8664252d16a71c4.jpg",
        "img_caption": [
            "图8角度取20时聚成8类"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/7ba03003df5e0fce04fdaf3f0c5b87812e4acabb90f82944e5c67490f3165585.jpg",
        "img_caption": [
            "图9间距为0.5时得到20个航迹中心点"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/405e3615b27298d8edb4658932bffc0c65a3e734fd24aa80ef90caa72e22e1e2.jpg",
        "img_caption": [
            "图10间距为1.0时得到17个航迹中心点"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/93d2b6ca9e6525157e4c4220f0c0e46b2c8fd3371f0b2b15c901b274888cd850.jpg",
        "img_caption": [
            "图11间距为1.5时得到12个航迹中心点"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/849e9393ce91711923e6080968d465a1b3fb4e3044979ecb245afb0f94021a4b.jpg",
        "img_caption": [
            "图12KMEANS算法得到的17个航迹中心点"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/5a153946e80ed7d6a096c5db9f2d66b7fc81f8d829121f0df2a88c5c094a9ec7.jpg",
        "img_caption": [
            "图13最后拟合得到的中心航迹"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "7 结束语",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "本文根据“以直代曲”思想提出基于特征航迹简化模型的中心航迹提取方法，分别经历了原始二次雷达数据转码、原始航迹点经纬度坐标转换、非特征航迹点的剔除和航迹点简化得到特征航迹点，进而对特征航迹聚类分析，提取得到中心航迹点定位点，使用三次B样条曲线拟合得到平滑的符合飞机飞行性能的中心航迹，通过对真实的二次雷达进近数据仿真同时与其他算法对比分析，结果表明本方法在转弯点处得到的中心航迹点无缺失现象，在处理相同数据时新方法耗时更少，解决了现有方法存在的问题，验证了新方法的准确性和有效性，对航迹聚类分析尤其是在转弯航段的中心航迹提取方面具有重要的意义与价值，下一步将围绕终端区内多条进场航班的航迹数据",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "的中心航迹提取问题进行研究。",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "参考文献：",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "[1]Gudmundsson J, Thom A,Vahrenhold J. Of motifs and goals:miningtrajectory data [C]//Proc of the 2Oth International Conference on Advancesin Geographic Information Systems.New York:ACMPress,2012:129-138.  \n[2]吴笛，杜云艳，易嘉伟，等．基于密度的轨迹时空聚类分析[J].地球信息科学学报,2015,17(10):1162-1171.  \n[3]赵元棣，孙禾，王洁宁，等．终端区航迹簇的中心航迹提取方法研究[J]．图学学报,2014,35(3):379-386.  \n[4]王洁宁，孙禾，赵元棣．基于时间-空间的进场航迹聚类分析[J].科学技术与工程,2013,13 (33):10078-10081,10088.  \n[5]王超，徐肖豪，王飞．基于航迹聚类的终端区进场程序管制适用性分析[J]．南京航空航天大学学报,2013,45(1):130-139.  \n[6]王涛波，黄宝军．改进模糊聚类算法在航迹分析中的应用[J].中国安全科学学报,2014,24(2):23-27.  \n[7]王超，王明明，王飞．基于改进的模糊C-means 航迹聚类方法研究[J].中国民航大学学报,2013,31(3):14-18.  \n[8] 徐涛，李永祥，吕宗平．基于航迹点法向距离的航迹聚类研究[J]．系统工程与电子技术,2015,39(9):2198-2204.  \n[9]李永祥．面向机场噪声预测的航迹聚类研究及应用[D].天津：中国民航大学,2015.  \n[10]徐涛，陈雪蕊，等．基于航迹聚类的终端区飞行程序轨迹表示[J]．四川大学学报：工程科学版,2016,(06):188-196.  \n[11]Rehm F.Clustering of flight tracks [C]//AIAA infotech $@$ Aerospace,Atlanta:AIAA 2010-3412.  \n[12] Gariel M, SrivastavaAN,Feron E.Trajectory clustering and an applicationtoairspace monitoring [J].IEEE.Trans on Intelligent TransportationSyatems,2011,12 (4): 1 511-1 524.  \n[13] Kenneth Leiden， Stephen Atkins.Trajectory clustering for metroplexoperations [C]//Proc of the 11th AIAA Aviation Technology, Integration,and Operation Conference.2011.  \n[14] Lee JG,Han J.，et al. Trajectory clustering:a partition-and-groupframework [Cl// Proc of ACM SIGMOD International Conference onManagement of Data.2007: 593-604",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    }
]