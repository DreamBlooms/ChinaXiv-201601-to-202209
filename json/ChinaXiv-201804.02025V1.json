[
    {
        "type": "text",
        "text": "基于改进鱼群算法的几何约束求解",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "高雪瑶，刘云腾",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "(哈尔滨理工大学 计算机科学与技术学院，哈尔滨 150080)",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "摘要：几何约束求解是CAD建模中的关键技术。针对求解质量不高和求解速度慢的问题，进行了研究。提出了一种鱼群算法和混沌算法相结合的几何约束求解方法。首先，将CAD 模型中的几何约束关系表示为一组代数方程组；然后，利用代数方程组来构造目标函数。将几何约束求解问题转换为目标函数的优化问题。最后，使用混沌算法来改进鱼群算法以寻找目标函数的最优解。实验结果表明：该方法可以有效地解决几何约束问题。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "关键词：几何约束求解；鱼群算法；混沌算法；目标函数 中图分类号：TP391.7 doi:10.3969/j.issn.1001-3695.2017.10.0768 ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Geometric constraint solving based on improved fish swarm algorithm ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Gao Xueyao, Liu Yunteng (School ofComputer Science &Technology,Harbin Universityof Science &Technology,Harbin 150080,China) ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Abstract: Geometric constraint solving is akey technique in CAD modeling.This paper researched the problem that solving quality was not highand solving speed was slow.It proposed a methodof geometricconstraint solving,which combined fish swarmalgorithmand chaos algorithm.Firstly,this paper denoted geometricconstraintrelations inCADmodel asa groupof algebraic equations.Secondly,itused this groupofalgebraicequations toconstructobjectivefunction.This paper transformed a problemof geometricconstraint solving intoaproblemofobjective functionoptimization.Finaly,itused chaos algorithmto improve fish swarm algorithm inorder tofindanoptimalsolutionofobjectivefunction.Experimentalresults showthatthis method can effectively solve geometric constraint problems. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Key Words: geometric constraint solving; fish swarm algorithm; chaos algorithm; objective function ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "0 引言",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "在计算机辅助设计中，几何约束求解是一个关键性问题。目前，国内外学者针对这一问题开展了大量的研究工作。曹春红使用了量子行为粒子群算法来解决几何约束问题。在该算法中，利用波函数来确定粒子的状态[1]。戴春来通过添加部分约束来减少复杂耦合约束求解过程中所需要的变量数目。同时，他提出了一种基于自由度分析的耦合几何约束求解方法[2]。周友行将参数化设计过程中的几何约束求解转换为代数方程组的求解，提出了一种可选指数进制变步长数值求解算法[3]。曹春红以几何约束图中节点的度为基础，提出了一种D-Tree分解算法，可以解决欠约束问题和完备约束问题[4]。Thierry 使用粒子弹簧系统的数值迭代法来处理刚性和非刚性的几何约束问题。在这种方法中，粒子对应于几何实体，弹簧对应于几何约束[5]。Mathis 给出了一种新的几何约束求解框架，使用距离几何来保持刚体运动的不变性，采用分解方法来处理模型中约束过多的问题[。Gao 提出了将二维和三维几何约束问题分解为C-Tree的算法。利用该算法能够把一个规模较大的几何约束问题分解为多个子问题。同时，综合这些子问题的解得到原问题的解[7]。De 给出了一种3D建模工具，将几何约束以多种形式反馈给用户，能够帮助用户方便地定义几何约束，创建正确的3D 模型[8]。郭希娟利用D-优化算法将一个欠约束问题分解成若干个单位问题，再对单位问题进行逐一求解。实现了对集群的有效重组，降低了几何约束求解的难度[9。曹春红以雁群飞行特征为基础，保持了粒子的多样性。同时，利用粒子之间的有用信息来增强相互的竞争能力[10]。曹春红使用交互更新模式的量子遗传算法来解决几何约束问题。在该算法中，通过量子门变换来实现遗传算法中的交叉操作[I]。黄学良利用混合图来表示三维几何约束系统，根据混合图的动态更新机制，来确定约束系统动态变化时的影响域。通过这种增量求解的方法，提高了三维几何约束系统的求解效率[12]。李文辉通过把几何约束系统分解为一棵扩展C-树，提出了一种基于增量的LMA算法。利用该方法可以对几何约束系统进行最大化分解[13]。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "本文使用代数方程组来表示几何约束问题。构造目标函数，将代数方程组的求解过程转换为函数的优化过程。使用混沌搜索方法来改进鱼群算法，以寻找几何约束问题的最优解。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "几何约束问题的表示",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "几何约束是指几何元素之间应该满足的关系。根据约束属性不同，可以分为尺寸约束和结构约束。尺寸约束描述了几何元素的形状和大小。结构约束描述了几何元素之间应该满足的拓扑关系，即几何元素之间的相对位置。无论是尺寸约束还是结构约束，都可以使用参数来进行表示。因此，几何约束求解是寻找满足所有几何约束关系的模型参数最优解的过程。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "几何约束问题可以使用二元组 $( E , C )$ 来进行表示。其中，$E { = } \\{ e _ { 1 } , e _ { 2 } , . . . , e _ { \\mathrm { k } } \\}$ 是模型中所有几何元素的集合； $C { = } \\{ c _ { 1 } , c _ { 2 } , . . . , c _ { \\mathrm { m } } \\}$ 是模型中所有几何约束关系的集合。使用代数方程 $f _ { \\mathrm { i } } ( x _ { I } , x _ { 2 } , . . . ,$ （20$\\scriptstyle x _ { n } ) = 0$ 来表示几何约束关系 $c _ { \\mathrm { i } } ( \\mathrm { i } { = } 1 , 2 , . . . , \\mathrm { m } )$ 。 $C$ 中的所有几何约束关系就形成了一个代数方程组，如式(1)所示。",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { l } { f _ { 1 } ( x _ { 1 } , x _ { 2 } , . . . , x _ { n } ) = 0 } \\\\ { f _ { 2 } ( x _ { 1 } , x _ { 2 } , . . . , x _ { n } ) = 0 } \\\\ { \\qquad \\cdots } \\\\ { f _ { m } ( x _ { 1 } , x _ { 2 } , . . . , x _ { n } ) = 0 } \\end{array} \\right.\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $f _ { i } ( x _ { I } , x _ { 2 } , . . . , x _ { n } ) { = } 0$ 为几何约束方程， $m$ 为模型所包含的几何约束关系的个数； $x _ { 1 } , x _ { 2 } , . . . , x _ { n }$ 为几何元素的参数。几何约束问题的求解就转换为代数方程组(1)的求解。当 $m$ 和 $n$ 的数值较大时，代数方程组(1)的求解过程将是非常复杂的。因此，构造目标函数 $F ( X )$ ，如式(2)所示。",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nF ( X ) = F ( x _ { 1 } , x _ { 2 } , . . . , x _ { n } ) = \\sum _ { i = 1 } ^ { m } f _ { i } ^ { 2 } ( x _ { 1 } , x _ { 2 } , . . . , x _ { n } ) = 0\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "式(1)和(2)具有相同的解。 $F ( X )$ 是一个大于等于0的数。当$F ( X )$ 越小时，其 $X$ 的取值就越接近于代数方程组(1)的解。因此，几何约束问题的求解将转换为求使 $F ( X )$ 取最小值时 $X$ 解的过程。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "本文采用混沌算法来改进鱼群算法，并对目标函数 $F ( X )$ 进行优化求解。以保证算法具有较强的全局搜索能力，并能及时跳出局部最优。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1基于改进鱼群算法的几何约束关系求解",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "鱼群算法是一种群智能搜索算法，用以解决函数优化问题。在一片水域中，食物浓度越高的地方鱼的数量就会越多。在寻找食物的过程中，鱼群会出现随机行为、觅食行为、聚群行为和追尾行为。鱼群算法模仿了鱼群在水中运动的规律。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "在鱼群算法中，其参数主要包括： $\\mathbf { \\Omega } _ { n }$ 代表求解维数，try_number为最大试探次数，step为步长，visual为鱼群个体的视野范围，delta为拥挤度因子， $N$ 为算法迭代次数， $\\mathcal { S }$ 为算法精度。鱼群个体的位置用 $X { = } ( x _ { I } , x _ { 2 } , . . . , x _ { n } )$ 来表示。其中， $x _ { i } ( \\mathrm { i } { = } 1$ 2,.,n)为寻优变量。 $d i s _ { \\mathrm { i , j } }$ 表示从位置 $X _ { \\mathrm { i } }$ 到位置 $X _ { \\mathrm { j } }$ 的距离。此处，用欧式距离公式来计算 $d i s _ { \\mathrm { i , j } }$ 。食物浓度使用式(2)中的 $F ( X )$ ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "来表示。此处，函数值越小表示食物浓度越高。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "利用式(3)来修改步长step和视野visual。",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { \\left\\{ \\begin{array} { l l } { \\nu i s u a l = \\nu i s u a l ^ { * } \\alpha + \\nu i s u a l _ { \\mathrm { m i n } } } \\\\ { s t e p = s t e p ^ { * } \\alpha + s t e p _ { \\mathrm { m i n } } } \\\\ { \\alpha = \\exp ( - 3 0 \\times ( k / N ) ^ { s } ) } \\end{array} \\right. } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $\\nu i s u a l _ { \\mathrm { m i n } }$ 表示最小视野范围， $s t e p _ { \\mathrm { { m i n } } }$ 为最小步长， $s$ 为大于1的整数。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "a)随机行为。鱼群个体在视野范围内，从当前位置 $X _ { i }$ 随机选择下一个位置 $X _ { n e x t }$ 的行为。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "b)觅食行为。设鱼群个体的当前位置为 $X _ { i }$ ，在邻域内随机选择下一个位置 $X _ { n e x t }$ 。若 $F ( X _ { n e x t } ) { > } F ( X _ { i } )$ ，则鱼群个体根据式(4)进行移动。否则，继续选择其他位置进行比较。当比较次数达到try_number后，还没有找到食物浓度比较高的位置，执行随机行为。其中，rand(为随机函数。",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nX _ { p r e y } = X _ { i } + ( X _ { n e x t } - X _ { i } ) ^ { * } s t e p ^ { * } r a n d ( ) / d i s _ { i , n e x t }\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "c)聚群行为。设鱼群个体当前位置为 $X _ { i }$ ，搜索邻域内的鱼群个体总数为 $n _ { f } ,$ 中心位置为 $X _ { c }$ 。若 $F ( X _ { c } ) / n { \\scriptstyle \\geqslant } d e l t a ^ { \\ast } F ( X _ { i } )$ ，则$X _ { c }$ 处的食物浓度较高且不太拥挤。根据公式(5)进行移动，否则，执行觅食行为。",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nX _ { s w a r m } = X _ { i } + ( X _ { c } - X _ { i } ) ^ { * } s t e p ^ { * } r a n d ( ) / d i s _ { i , c }\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "d)追尾行为。设鱼群个体当前位置为 $X _ { i }$ ，搜索邻域内的鱼群个体总数为 $n _ { f \\circ }$ 从 $n f$ 个个体中找到具有最小函数值的个体，其位置为 $X _ { \\nu b e s t }$ 。若 $F ( X _ { \\nu b e s t } ) / n _ { f } { > } d e l t a ^ { * } F ( X _ { i } )$ ，则 $X _ { \\nu b e s t }$ 处的食物浓度较高且不太拥挤。根据式(6)进行移动，否则，执行觅食行为。",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nX _ { _ { f o l l o w } } = X _ { i } + ( X _ { _ { \\mathit { \\nu b e s t } } } - X _ { i } ) ^ { * } s t e p ^ { * } r a n d ( ) / d i s _ { i , \\nu b e s t }\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "e)行为选择。每个鱼群个体在执行完觅食行为、聚群行为和追尾行为后，得到 $X _ { p r e y } , X _ { s w a r m }$ 和 $X _ { f o l l o w \\mathfrak { c } }$ 计算 $F ( X _ { p r e y } ) \\lrcorner F ( X _ { s w a r m } )$ 和 $F ( X _ { f o l l o w } )$ 的值，将具有最小函数值的位置记为 $X _ { b \\_ b e s t }$ ，作为鱼群个体要移动的位置。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "f)公告板。记录鱼群个体已发现的食物浓度最高的位置，用$X _ { b e s t }$ 表示。在所有鱼群个体通过觅食行为、聚群行为和追尾行为更新完自身的位置后，找出具有最小函数值的个体，其位置为 $X _ { c b e s t } .$ 若 $F ( X _ { c b e s t } ) { < } F ( X _ { b e s t } )$ ，则 $X _ { b e s t } { = } X _ { c b e s t }$ ， $F ( X _ { b e s t } ) { = } F ( X _ { c b e s t } )$ 否则保持不变。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "鱼群算法是一种群智能优化算法，具有全局寻优特性。当搜索区域过大时，算法收敛速度减慢，求解精度降低，容易陷入局部最优。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "混沌是一种表面无序，但内在具有一定规律性的非线性现象。这种非线性现象使它具有随机性、遍历性和规律性。混沌现象具有类似随机变量的表现，可以在一定时间内不重复地遍历空间内的所有状态。混沌现象可以通过特定的代数方程来进行表示。混沌算法在解空间内随机搜索，从而遍历空间内的所有可行解。本文利用了Logistic 映射模型，如式(7)所示。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\nz _ { k + 1 } = \\mu z _ { { } _ { k } } \\big ( 1 - z _ { { } _ { k } } \\big )\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "其中： $z$ 为映射变量， $k$ 表示迭代次数。 $\\mu$ 为控制变量，取值范围为1到4。当 $\\mu$ 的数值为4时，是一种完全混沌状态。此时，该映射所生成的混沌序列的概率密度函数如式(8)所示。",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\n\\rho ( z ) = \\left\\{ { \\begin{array} { l l } { \\displaystyle { \\frac { 1 } { \\pi { \\sqrt { z \\left( 1 - z \\right) } } } } } & { 0 < z < 1 } \\\\ { 0 } & { \\displaystyle { \\sharp \\nmid \\mathrm { \\dag } } } \\end{array} } \\right.\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "从式(8)可以看出：当 $\\mu$ 的数值为4时，Logistic 映射模型所产生的混沌序列可以对某一邻域内的所有空间进行全局搜索。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "本文使用混沌算法来改进鱼群算法，其主要思想是：在每个鱼群个体完成行为选择之后，得到了 $X _ { b \\_ b e s t \\mathfrak { c } }$ 。在鱼群个体的视野范围之内，使用混沌算法对 $X _ { b \\_ b e s t }$ 的每个分量进行搜索，得到位置 $X _ { n e w } ,$ 。 $X _ { b \\_ b e s t }$ 的第 $i$ 个分量 $X _ { b \\_ b e s t } ( i )$ 的更新过程如式(9)所示。若 $F ( X _ { n e w } ) { < } F ( X _ { b \\_ b e s t } )$ ，则 $X _ { b \\_ b e s t } { = } X _ { n e w }$ 。使用混沌算法来进行改进，可以使鱼群算法跳出局部最优，提高了搜索求解效率。",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { \\left\\{ \\Delta x = - \\nu i s u a l + 2 ^ { * } \\nu i s u a l ^ { * } z \\right. } \\\\ { \\left. \\vphantom { \\sum _ { a v } } X _ { n e w } ( i ) = X _ { b \\_ b e s t } ( i ) + \\Delta x \\right. } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "改进鱼群算法的步骤如下所示：",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "a)使用方程 $f _ { i } ( x _ { I } , x _ { 2 } , . . . , x _ { n } ) { = } 0$ 来表示几何约束关系 $c _ { i } ( \\mathrm { i } { = } 1$ ${ 2 , . . . , \\mathrm { m } } )$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "b)根据式(2)来构造目标函数 $F ( X )$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "c)初始化参数 $N .$ 、 $\\mathcal { S }$ 、step和visual的数值，当前迭代次数$k { = } 1$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "d)初始化所有鱼群个体的位置，计算其函数值。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "e)从所有鱼群个体中，找出具有最小函数值的个体，将其位置放入公告板中，记为 $X _ { b e s t }$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "f)鱼群个体分别执行觅食行为、聚群行为和追尾行为，得到Xprey、 $X _ { s w a r m }$ 和 $X _ { f o l l o w }$ ，根据函数值 $F ( X _ { p r e y } )$ 、 $F ( X _ { s w a r m } )$ 和 $F ( X _ { f o l l o w } )$ 来选择该个体的最优位置 $X _ { b \\_ b e s t } .$ 0",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "g)从 $\\mathrm { X _ { b \\_ b e s t } }$ 出发进行混沌搜索，获得 $X _ { \\mathrm { n e w } }$ 。若 $\\mathrm { F ( X _ { n e w } ) { < } F ( X _ { b _ { - } b e s t } ) }$ ，则 $\\mathrm { X _ { b \\_ b e s t } { = } X _ { n e w } }$ ， $\\mathrm { F ( X _ { b \\_ b e s t } ) { = } F ( X _ { n e w } ) }$ 。 ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "h)鱼群个体移动到 $X _ { b \\_ b e s t }$ 处，更新当前位置。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "i)鱼群中的每个个体执行步骤(6)\\~(8)。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "j)从所有鱼群个体中，找出具有最小函数值的个体，其位置为 $X _ { c b e s t }$ 。若 $F ( X _ { c b e s t } ) { < } F ( X _ { b e s t } )$ ，则 $X _ { b e s t } { = } X _ { c b e s t }$ ， $F ( X _ { b e s t } ) { = } F ( X _ { c b e s t } )$ 否则保持不变。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "k)若 $k { \\leqslant } N$ 或未达到算法精度 $\\mathcal { S }$ ， $k { + } +$ ，利用式(3)来调整参数step和visual，执行步骤f)；否则，转1)。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "1)输出公告板中 $X _ { b e s t }$ 及其函数值 $F ( X _ { b e s t } )$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "2 实验 ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "HUST-CAID系统是由哈尔滨理工大学计算机应用技术研究所开发的，用于设计CAD模型。系统采用Visual $\\mathrm { C } { + } { + } . 6 . 0$ 来实现。将本文所提出的方法应用于HUST-CAID系统的几何约束求解模块，以验证本文所提出方法的有效性。利用HUST-CAID系统建立源模型，如图1所示。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/03c669afc1b5b8cfc46068d17e9be05f9745d512d3bf7fd5cb1b25a13c194a4f.jpg",
        "img_caption": [
            "图1源模型"
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "源模型为在两侧为圆弧的矩形板上开了3个圆孔。圆1的圆心为(-50,0)，半径为 $\\scriptstyle 5 0 { \\sqrt { 2 } }$ ；圆2的圆心为(50,100)，半径为 ${ 5 0 } \\sqrt { 2 }$ ；圆3 的圆心为(52.5,-2.5)，半径为 $4 5 { \\sqrt { 2 } } / 2$ ；矩形板的一条边为直线L，其方程如式(10)所示。在该几何模型中，要求满足3个约束条件。圆1和圆3相切；圆2和圆3相切；圆3与直线L相切。",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\nx - y - 1 0 0 = 0\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "当圆1和圆2的半径都变为100时，将破坏模型的几何约束关系。为了保持以上的几何约束关系，圆3的圆心 $( x _ { I } , x _ { 2 } )$ 和半径 $x _ { 3 }$ 将要发生改变。根据以上几何约束关系，可以得到一个非线性方程组，如式(11)所示。",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { l l } { \\sqrt { \\left( x _ { 1 } + 5 0 \\right) ^ { 2 } + x _ { 2 } ^ { 2 } } - x _ { 3 } - 1 0 0 = 0 } \\\\ { \\sqrt { \\left( x _ { 1 } - 5 0 \\right) ^ { 2 } + \\left( x _ { 2 } - 1 0 0 \\right) ^ { 2 } } - x _ { 3 } - 1 0 0 = 0 } \\\\ { \\frac { - x _ { 1 } + x _ { 2 } + 1 0 0 } { \\sqrt { 2 } } - x _ { 3 } = 0 } \\end{array} \\right.\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "根据式(2)来构造目标函数 $F ( X )$ ，如式(12)所示。",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\n{ \\begin{array} { l } { F ( X ) = \\left( { \\sqrt { \\left( x _ { 1 } + 5 0 \\right) ^ { 2 } + x _ { 2 } ^ { 2 } } } - x _ { 3 } - 1 0 0 \\right) ^ { 2 } + \\left( { \\frac { - x _ { 1 } + x _ { 2 } + 1 0 0 } { \\sqrt { 2 } } } - x _ { 3 } \\right) ^ { 2 } } \\\\ { + \\left( { \\sqrt { \\left( x _ { 1 } - 5 0 \\right) ^ { 2 } + \\left( x _ { 2 } - 5 0 \\right) ^ { 2 } } } - x _ { 3 } - 1 0 0 \\right) ^ { 2 } } \\end{array} }\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "对式(11)所示的代数方程组进行人工求解，可以得到： $x _ { 1 }$ 的精确解为 $( - 2 2 5 + 2 5 0 \\sqrt { 2 } ) / 2$ ， $x _ { 2 }$ 的精确解为${ \\left( { 3 2 5 - 2 5 0 { \\sqrt { 2 } } } \\right) } / { 2 }$ ， $x _ { 3 }$ 的精确解为 $( - 5 0 0 + 3 7 5 { \\sqrt { 2 } } ) / 2$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "为了验证本文所提出方法的有效性，共进行了3组对比实验。在实验1中，利用鱼群算法来搜索使目标函数 $F ( X )$ 最小化的 $X$ 的值。在各次迭代过程中，所获取的全局最优解如表1所示。",
        "page_idx": 2
    },
    {
        "type": "table",
        "img_path": "images/cb9f41a1983d58ded4daf5cc4b63727fc134bb5de6234684b11bc0ca4cf402e8.jpg",
        "table_caption": [
            "表1鱼群算法各次迭代的全局最优解和函数值 "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>迭代 次数</td><td>X1</td><td>X2</td><td>x3</td><td>F(X)</td></tr><tr><td>1</td><td>44.918049677</td><td>42.532715971</td><td>42.573079461</td><td>9391.492079168</td></tr><tr><td>5</td><td>50.163691530</td><td>29.824729964</td><td>15.292300532</td><td>3835.792710413</td></tr><tr><td>11</td><td>59.600146527</td><td>-5.751780193</td><td>16.612155450</td><td>217.983643780</td></tr><tr><td>33</td><td>61.014631057</td><td>-11.853944690</td><td>15.953236851</td><td>41.659222416</td></tr><tr><td>59</td><td>63.025702789</td><td>-16.367897430</td><td>16.777285954</td><td>11.586854095</td></tr><tr><td>1483</td><td>62.022162797</td><td>-14.441899056</td><td>15.046597387</td><td>6.946141181</td></tr><tr><td>1582</td><td>63.445447180</td><td>-13.941893489</td><td>14.173592186</td><td>3.625788803</td></tr><tr><td>1712</td><td>63.000566128</td><td>-14.710041460</td><td>14.588895029</td><td>2.508761004</td></tr><tr><td>2169</td><td>63.352987118</td><td>-14.976752801</td><td>14.812706610</td><td>1.363491782</td></tr><tr><td>2194</td><td>63.745531027</td><td>-14.529802641</td><td>15.262353774</td><td>0.368975245</td></tr></table></body></html>",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "从表1可以看出，鱼群算法在第2194次迭代中获得了最优解 $\\mathbf { \\tau } _ { \\circ } x _ { 1 }$ 的最优值为 $6 3 . 7 4 5 5 3 1 0 2 7 , x _ { 2 }$ 的最优值为-14.529802641，$x 3$ 的最优值为15.262353774， $F ( X )$ 的最优值为0.368975245。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "在实验2中，利用本文所提出的改进鱼群算法来搜索使目标函数 $F ( X )$ 最小化的 $X$ 的值。在各次迭代过程中，所获取的全局最优解如表2所示。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "从表2可以看出，改进鱼群算法在第784次迭代中获得了最优解 $\\mathbf { \\sigma } _ { \\circ } x _ { 1 }$ 的最优值为 $6 4 . 4 4 0 1 3 9 6 6 9 , x _ { 2 }$ 的最优值为-14.447227389，$x 3$ 的最优值为15.362495618， $F ( X )$ 的最优值为0.188276500。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "目前，粒子群算法被广泛地应用于函数优化问题。在实验3中，利用粒子群算法来搜索使目标函数 $F ( X )$ 最小化的 $X$ 的值[14]。在各次迭代过程中，所获取的全局最优解如表3所示。",
        "page_idx": 3
    },
    {
        "type": "table",
        "img_path": "images/c979a49dd138dad65960fa34c5737ac7cda981ebf4c1f03f565ac248d75e43be.jpg",
        "table_caption": [
            "表2改进鱼群算法各次迭代的全局最优解和函数值 "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>迭代次数</td><td>X1</td><td>x2</td><td>X3</td><td>F(X)</td></tr><tr><td>1</td><td>13.433212671</td><td>11.392035136</td><td>13.294932375</td><td>5823.022311359</td></tr><tr><td>3</td><td>24.351671842</td><td>6.993509501</td><td>15.071088575</td><td>3857.715236888</td></tr><tr><td>10</td><td>70.394742726</td><td>-2.461992450</td><td>12.819360556</td><td>168.071955844</td></tr><tr><td>13</td><td>69.404992310</td><td>-10.415457193</td><td>18.472989875</td><td>60.1095058804</td></tr><tr><td>16</td><td>66.947563325</td><td>-9.383974933</td><td>13.559048790</td><td>32.501231862</td></tr><tr><td>38</td><td>62.001200065</td><td>-13.623315915</td><td>16.175446820</td><td>16.025789995</td></tr><tr><td>145</td><td>67.468607697</td><td>-12.717839755</td><td>14.988403576</td><td>11.839974557</td></tr><tr><td>782</td><td>62.723831564</td><td>-16.227194083</td><td>15.606681150</td><td>5.2127209534</td></tr><tr><td>784</td><td>64.440139669</td><td>-14.447227389</td><td>15.362495618</td><td>0.188276500</td></tr></table></body></html>",
        "page_idx": 3
    },
    {
        "type": "table",
        "img_path": "images/9d1ae6de22042478caf462a8ef17fb656fb36f8c8b18dd450ee8bf532f2bb11e.jpg",
        "table_caption": [
            "表3粒子群算法各次迭代的全局最优解和函数值 "
        ],
        "table_footnote": [
            "从表3可以看出,粒子群算法在第1263次迭代中获得了最 优解 $\\scriptstyle \\circ X 1$ 的最优值为 $6 3 . 9 4 2 0 7 3 8 2 2 , x _ { 2 }$ 的最优值为-14.404706001，"
        ],
        "table_body": "<html><body><table><tr><td>迭代次数</td><td>X1</td><td>X2</td><td>X3</td><td>F(X)</td></tr><tr><td>1</td><td>0.947493542</td><td>10.256312015</td><td>20.109044649</td><td>8231.060008148</td></tr><tr><td>5</td><td>6.540738582</td><td>7.614471435</td><td>19.437942504</td><td>6900.146019210</td></tr><tr><td>11</td><td>42.174404144</td><td>-19.904806137</td><td>21.201372146</td><td>756.318507301</td></tr><tr><td>15</td><td>55.333858489</td><td>-18.359180450</td><td>17.046781539</td><td>106.984610363</td></tr><tr><td>127</td><td>64.512969970</td><td>-13.938835144</td><td>16.805196762</td><td>8.339549484</td></tr><tr><td>189</td><td>63.161537170</td><td>-15.774456024</td><td>14.334611892</td><td>5.096380299</td></tr><tr><td>262</td><td>63.211776733</td><td>-14.562725067</td><td>14.204966545</td><td>3.534084232</td></tr><tr><td>287</td><td>63.471771240</td><td>-14.137941360</td><td>14.424797058</td><td>2.242321970</td></tr><tr><td>325</td><td>64.240600585</td><td>-14.031445503</td><td>14.378672599</td><td>1.779835471</td></tr><tr><td>1263</td><td>63.942073822</td><td>-14.404706001</td><td>15.385561943</td><td>0.311520001</td></tr></table></body></html>",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "$x _ { 3 }$ 的最优值为15.385561943， $F ( X )$ 的最优值为0.311520001。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "对比表1和2可以看出,实验2的 $F ( X )$ 的最优值要小于实验1的 $F ( X )$ 的最优值。因此，实验2所获取的全局最优解要优于实验1所获取的全局最优解。相对于鱼群算法而言，本文所提出的算法的全局最优解要更接近于人工求解结果。此外，实验2在第784次迭代中获得了最优解，其收敛速度要远远高于实验1。其原因是：实验2使用混沌算法来改进鱼群算法，使其能快速地跳出局部最优，提高了搜索效率。对比表2和3可以看出，实验2的 $F ( X )$ 的最优值要小于实验3的 $F ( X )$ 的最优值。因此，实验2所获取的全局最优解要优于实验3所获取的全局最优解。本文所提出的方法的收敛速度要高于实验3。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "3 结束语",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "本文使用代数方程来表示几何约束关系。通过构造目标函数，将几何约束求解转换为函数优化问题。为了提高搜索求解效率，利用混沌算法来改进鱼群算法，以寻找目标函数的最优解。实验结果表明：相对于鱼群算法而言，本文所提出的方法无论在求解质量还是求解效率上都有所提高。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "参考文献：",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "[1]曹春红，唐川，赵大哲，等.量子行为粒子群优化算法在几何约束问题上的应用[J].东北大学学报：自然科学版,2011,32(9):1230-1232.  \n[2]戴春来．基于自由度分析的耦合几何约束求解[J].计算机辅助设计与图形学学报,2010,22(12):2169-2176.  \n[3]周友行，张建勋，董银松，等．基于约束问题求解的方向可选指数进制步长优化算法[J]．中南大学学报：自然科学版,2011,42(5):1327-1331.  \n[4]曹春红，王鹏，曹犁歌．基于D-tree分解的欠约束与完备约束的几何约束求解[J].东北大学学报：自然科学版,2014,35(5):627-629.  \n[5]Thierry S E.A particle-spring approach to geometric constraints solving[C]// Proc ofthe 26th ACM Symposium on Applied Computing.2011: 1100-1105.  \n[6]Mathis P, Schreck P. Coordinate-free geometry and decomposition ingeometrical constraint solving [J]. CAD Computer Aided Design,2014,50(1): 51-60.  \n[7]Gao Xiaoshan，Lin Qiang，Zhang Guifang.A C-tree decompositionalgorithm for 2D and 3D geometric constraint solving [J]. CAD ComputerAided Design,2006,38 (1): 1-13.  \n[8]De RegtR,Van der MeidenHA,HilderickA,etal.A workbench forgeometric constraint solving [J]. Computer-Aided Design and Applications,2008,5 (1-4): 471-482.  \n[9]郭希娟，吴金垒.D-优化算法实现几何约束问题的重组[J].小型微型计算机系统,2011,32(9):1891-1893.  \n[10]曹春红，唐川，赵大哲，等．基于雁群启示的粒子群优化算法的几何约束求解[J].小型微型计算机系统,2011,32(11):2299-2302.  \n[11]曹春红，易荣庆，曹海龙，等．交互更新模式的量子遗传算法的几何约束求解[J].中国图像图形学报,2016,21(4):499-509.  \n[12]黄学良，王蕾，王旗华，等．三维几何约束系统的在线增量求解方法[J]．计算机辅助设计与图形学学报,2017,29(8):1571-1578.  \n[13]李文辉，孙明玉，曹春红．几何约束求解的扩展C-树分解法[J]．吉林大学学报：工学版,2017,47(4):1274-1279.  \n[14]王书亭，王战江．粒子群优化算法求解非线性问题的应用研究[J].华中科技大学学报：自然科学版,2005,33(12):4-7.",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 4
    }
]