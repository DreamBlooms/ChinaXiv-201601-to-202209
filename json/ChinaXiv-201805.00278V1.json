[
    {
        "type": "text",
        "text": "基于B-list的最大频繁项集挖掘算法",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "张昌1，文凯1²，郑云俊1",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "(1.重庆邮电大学 通信新技术应用研究中心，重庆 400065;2.重庆信科设计有限公司，重庆 401121)",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "摘要：针对现有的最大频繁项集挖掘算法挖掘时间过长、内存消耗较大的问题，提出了一种基于构造链表 B-list 的最大频繁项集挖掘算法BMFI，该算法利用B-list数据结构来挖掘频繁项集并采用全序搜索树作为搜索空间，然后采用父等价剪枝技术来缩小搜索空间，最后再结合基于MFI-tree的投影策略实现超集检测来提高算法的效率。实验结果表明，BMFI算法在时间效率与空间效率方面均优于FPMAX算法与MFIN算法。该算法在稠密数据集与稀疏数据集中进行最大频繁项集挖掘时均有良好的效果。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "关键词：最大频繁项集挖掘；深度优先搜索；剪枝技术；超集检测中图分类号：TP301.6 doi:10.3969/j.issn.1001-3695.2017.08.0873",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Maximal frequent itemset mining algorithm based on B-list ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Zhang Changl†, Wen Kai1.2, Zhengyunjun1 (1.InstituteofAppliedCommunicationTechnologyChongqing UniversityofPosts&elecommunications,Chongqing40065, China; 2. Chongqing Information Technology Designing Co.Ltd,Chongqing 401121, China) ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Abstract: In order to solvethe problems that existing in the maximal frequent itemset mining algorithms,such as the mining time is toolong andthememoryconsumption is too large,this paper presentsamaximal frequent itemset mining algorithm BMFI which employs B-list to mining frequent itemsets and employs the whole sequence search treeas thesearch space,then, theparentequivalence pruning techniqueisused toreducethe search space.Finaly,whichcombined with theMFI-tree-based projectionstrategytoachieve superset detection to improvethe efciencyof thealgorithm.Theexperimentalresults show that theperformanceofBMFIalgorithmis superiortoFPMAXalgorithmandMFINalgorithmintermsoftimeeficiencyand spatial eficiency.The proposed algorithm has good performance when mining the maximal frequent itemset in dense data set and sparse data set. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Key Words: maximal frequent itemsets mining; depth-first search; pruning techniques; superset detection ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "0 引言",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "数据挖掘是从大型数据集中挖掘模式的一种计算过程。频繁模式挖掘挖掘经典算法包括Agrawal等人[1]在1994年提出的Apriori 算法、Han 等人[2]在2004 年提出的FP-growth 算法等。关联规则被广泛应用于“购物篮\"分析、电子商务以及医学等领域。在挖掘频繁模式的过程中，也会遇到一些现实的问题，例如在挖掘一个稠密的数据集时，若最小支持度阈值设置较低时，那么产生的频繁模式的数量就会非常庞大。另一方面，当频繁项集较长时，其频繁非空子集的数量也会非常庞大。所以在这种情况之下，将所有的频繁项集都挖掘出来是不可行的。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "最大频繁项集是频繁项集的一种紧凑表示，具备更高的挖掘效率[3]。若一个频繁项集S满足其真超集都是不频繁的，那么称S是最大频繁项集。近年来有很多的专家学者都对最大频繁项集挖掘算法进行了深入研究，Bayardo等人[4]提出了MaxMiner算法，该算法采用了广度优先搜索策略和基于动态排序的超集检测方法。Agrawal等[5]提出了DepthProject 算法，该算法不仅采用了深度优先搜索策略和基于动态排序的超集检测方法之外，还采用了基于桶计算的的项集计算方法。Burdick等人[提出了MAFIA算法，该算法采用了DFS策略，并且提出了结合DFS 的剪枝策略PEP、FHUT、MFIHUT 和 DynamicReordering，同时还采用了一种高效的超集检测策略LMFI。Grahne等人[7提出了FPMAX算法，该算法先根据事务数据库建立FP-tree，再采用基于MFI-tree的投影策略实现超集检测，从而提升了算法的性能。沈戈晖等[8在深度优先搜索的基础之上，引入了基于N-list最大频繁项集挖掘算法，该算法利用了N-list的高效压缩率与高效求交集的特点，并采用了搜索空间的剪枝策略与超集检测方法提升了挖掘效率，但该算法在数据集稀疏的情况下，算法性能有待提高。林晨等[9]提出了基于Nodeset的最大频繁项集挖掘算法—MFIN算法，该算法采用了POC-tree结构对",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "节点编码，用全序搜索作为搜索空间，然后结合了父等价剪枝等技术对数据进行剪枝处理，提高了算法的效率。当数据量较大时该算法也会存在运行时间过长和内存消耗大的问题，挖掘效率有待提高。在2015年Deng 等[提出了基于N-list 的PrePost+算法，该算法运用的是子孙-祖父等价的剪枝技术，使用这种剪枝技术在挖掘频繁项集方面比FIN算法与PrePost算法性能更好。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "针对现有的最大频繁项集挖掘算法挖掘时间过长、内存消耗较大的问题，本文提出了一种基于构造链表B-list[12]的最大频繁项集挖掘算法BMFI。该算法在深度优先算法的基础上利用B-list高压缩率和高效求交集并能快速计算项集支持度的特点，然后采用父等价剪枝技术来缩小搜索空间。在多个数据集上运行的实验结果表明BMFI比FPMAX算法和BMFI算法在时间效率与空间消耗方面都有明显的提升，在稠密数据集下时优化效果更为明显。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1 相关知识 ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1.1基本概念",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "设 $I { = } \\{ i _ { I } , i _ { 2 } , \\cdots , i _ { m } \\}$ 是 $\\mathfrak { n }$ 个不同项组成的集合，包含 $\\mathbf { m }$ （ $0 { \\leqslant } \\mathrm { m }$ $\\leqslant \\mathtt { n }$ ）个项的集合称为项集。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "定义1若项集X的支持度大于或等于用户规定的最小支持度阈值(minSup)，则项集X是频繁项集。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "定义2若频繁项集X的任何超集Y都不是频繁项集，则X 是最大频繁项集。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1.2 TB-tree ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "针对现有的频繁项集挖掘算法中PPC-tree[13]，POC-tree[10]等建树复杂、效率较低等问题。本文引入了一种TB-tree[12]的结构，TB-tree 是由一个root根节点和其项目前缀子树构成，项目前缀子树中的每个节点由五个部分组成，分别是item-name,count,parent-pointer,start-build 和 finish-build。TB-tree 的结构与PPC-tree相似，但PPC-tree 需要前序和后序两次遍历得到每个节点的pre-order和post-order来获取各节点信息。POC-tree虽然只需要前序或后序一种编码，结构相对PPC-tree更加的简洁，但仍需要一次遍历才能获得各节点信息。TB-tree各节点的start-build与finish-build依据各节点在TB-tree 的构建顺序中得到，即每个节点的信息在树构建完成时就已获得，所以比PPC-tree 与POC-tree的建立更具有时间效率。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "如表1所示是事务数据库DB，BMFI算法首先扫描事务数据集，并将事务集中的事务按支持度降序排列，删除掉支持度低于minSup 的事务。然后根据排序后的事物集，构造TB-tree。构造树的优势在于各节点信息在构建树的过程中就已获得，不需再对树进行遍历，详细的构造过程参考文献[12]。TB-tree 的构建过程见算法1，图1是对应数据库DB构造完成的TB-tree。",
        "page_idx": 1
    },
    {
        "type": "table",
        "img_path": "images/aacd862a9c18b835ee1ee41dc4b4a5b3c76cae2df49801152c085515c8d5b042.jpg",
        "table_caption": [
            "表1事务数据集DB"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>ID</td><td>Items</td><td>Order frequent items</td></tr><tr><td>1</td><td>e,a,c</td><td>c,e,a</td></tr><tr><td>2</td><td>a,b,c,g,f</td><td>b,c,f,a</td></tr><tr><td>3</td><td>e,c,b,f,i</td><td>b,c,e,f</td></tr><tr><td>4</td><td>b,h,c</td><td>b,c</td></tr><tr><td>5</td><td>b,f,e,d</td><td>b,e,f</td></tr></table></body></html>",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/6333dc01606ab1271bdc89f399b13f51fd241306af428a0f8b05f152747d38a9.jpg",
        "img_caption": [
            "图1DB 对应的TB-tree（minSup $scriptstyle \\hbar = 0 . 4$ ）"
        ],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "算法1构建 TB-tree输入：事务数据库DB;",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "输出：TB-tree，L1。扫描事务数据库 $D B$ 得到频繁1-项集 $\\mathrm { L } _ { 1 }$ ，并按项目支持度降序排  \n列,将 $D B$ 中的事务的项按 $\\mathrm { L } _ { 1 }$ 的顺序排列,创建根节点root，初始化全局  \n变量star $t { = } 0$ ， $f i n i s h = 0$ for each different first item $p$ in $D B$ doCall BuildTree $( p , N o d e )$ （20end forendfunction buildTree(p,parent)Let $T _ { P }$ be a list of transactions in $D B$ which contain prefix $p$ Creat node $N$ ：N.item-name $\\mathbf { \\Sigma } =$ item-name of the last item in $p$ N.count $\\mathbf { \\bar { \\rho } } = \\mathbf { \\rho }$ count of transactions in $T _ { P }$ N.parent $\\ c =$ parentN.start-build $= + +$ startfor each different first item $q$ in $T _ { P }$ doCall buildTree ${ \\mathfrak { o } } \\cup q , N )$ end forN.finish-build $\\it \\Omega _ { \\cdot } = \\mathrm { + + f i n i s h }$ end function",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1.3 B-list结构",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "定义3B-info-code。在TB-tree 中的每个节点N[(N.start-build，N.finish-build)，sup(N)]即节点N的B-info-code。其中start-build和finish-build分别是改点的开始构造与结束构造的顺序。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "性质1对于 $\\mathbf { N } _ { 1 }$ 和 $\\mathbf { N } _ { 2 }$ 两个节点而言，当且仅当 $\\mathrm { N } _ { 1 }$ start-build< $\\Nu _ { 2 }$ .start-build与 $\\mathbf { N } _ { 1 }$ .finish-build> $\\Nu _ { 2 }$ .finish-build同时成立时 $\\mathrm { N } _ { 1 }$ 才是 $\\Nu _ { 2 }$ 的祖先节点。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "例1如图1中的TB-tree所示，节点B与A的B-info-codes分别为 $\\mathrm { B _ { \\mathrm { b } } } { = } \\{ [ ( 4 { , } 1 1 ) { , } 4 ] \\}$ 和 $\\mathbf { B } _ { \\mathrm { c } } { = } \\{ [ ( 7 , 1 0 ) , 3 ] \\}$ ， $\\mathrm { B } _ { \\mathrm { b } }$ .start-build",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "${ < } \\mathrm { B } _ { \\mathrm { c } }$ .start-build $( 4 < 7 )$ ， $\\mathrm { B } _ { \\mathrm { b } }$ .finish-build> ${ \\bf \\cdot B } _ { \\mathrm { c } }$ .finish-build( $1 1 { > } 1 0 _ { , }$ L所以b是a的祖先节点。任意两节点都能根据该性质通过start-build与finish-build信息来判定是否存在祖先-子孙关系。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "定义41-项集的 B-list。对于已构建完成的 TB-tree 与节点N，其中名为N的节点的所有B-info-code的集合成为节点N 的B-list，记为BLN。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "例2如图1 所示的 TB-tree 中，节点B 的 B-list 是$\\mathrm { B L } _ { \\mathrm { B } } = \\{ [ ( 2 , 1 ) , 1 ] , [ ( 7 , 4 ) , 2 ] \\}$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "定义52-项集的 B-list。假设一个2-项集 $\\{ \\mathrm { i } _ { 1 } , \\mathrm { i } _ { 2 } \\}$ ，且i在i之前。i的B-list为 $\\{ [ ( s _ { 1 1 } , f _ { 1 1 } ) , c _ { 1 1 } ]$ ，[(s12, fi2)，c12]，[(s1n,$f _ { \\mathrm { l n } } ) , c _ { \\mathrm { l n } } ] \\}$ ， $i _ { 2 }$ 对应的B-list 为 $\\{ [ ( s _ { 2 1 } , f _ { 2 1 } ) , c _ { 2 1 } ] , [ ( s _ { 2 2 } , f _ { 2 2 } ) , c _ { 2 2 } ] , \\cdots$ （20 $[ ( s _ { 2 \\mathrm { m } } , \\ f _ { 2 \\mathrm { m } } )$ ， $ c _ { 2 \\mathrm { m } } \\} \\}$ ，则生成2-项集 $\\{ \\mathrm { i } _ { 1 } , \\mathrm { i } _ { 2 } \\}$ 的B-list 要遵循以下规则。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "a)存在[ $\\cdot ( s _ { \\mathrm { l i } } , \\ f _ { \\mathrm { l i } } )$ ， $\\left| c _ { \\mathrm { l i } } \\right]$ （ $1 { \\leqslant } i { \\leqslant } \\mathtt { n }$ ）是 $[ ( s _ { 2 \\mathrm { j } } , \\ f _ { 2 \\mathrm { j } } )$ ， $\\left| c _ { 2 \\mathrm { j } } \\right\\}$ （ $1 \\leqslant j \\leqslant$ $\\mathbf { \\nabla } _ { m }$ ）的祖先，就将[ $\\cdot ( s _ { \\mathrm { l i } } , \\ f _ { \\mathrm { l i } } )$ ， $| c _ { 2 }  { \\mathrm { j } } ]$ 添加到 $\\{ \\mathrm { i } _ { 1 } , \\mathrm { i } _ { 2 } \\}$ 的 B-list 中。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "b)对于 $\\{ \\mathrm { i } _ { 1 } , \\mathrm { i } _ { 2 } \\}$ 的B-list 中 $( s , f )$ 相同的节点信息，可以将支持度直接相加，合并为 $[ ( s , \\ f )$ ， $c _ { 1 } { + } c _ { 2 } { + } \\cdots { + } c _ { \\mathrm { n } } ]$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "定义6 $\\mathbf { k } .$ 项集的B-list。( $\\mathbf { k } \\geqslant 3$ ）假设两个 $\\mathbf { k } { - } 1$ 项集分别为$\\mathbf { N } { = } \\mathrm { i } _ { 1 } \\mathrm { i } _ { 2 } { \\cdots } \\mathrm { i } _ { \\mathrm { k - l } }$ $\\mathbf { M } { = } \\mathrm { i } _ { 1 } \\mathrm { i } _ { 2 } { \\cdots } \\mathrm { i } _ { \\mathrm { k - 1 } } , \\mathbf { N }$ 的B-list 记做 $\\{ [ ( s _ { 1 1 } , f _ { 1 1 } ) , c _ { 1 1 } ] ,$ [(s12,$f _ { 1 2 } ) , \\ c _ { 1 2 } ] , \\ \\cdots [ ( s _ { \\mathrm { l n } } , f _ { \\mathrm { l n } } ) , \\ c _ { 1 n } ] \\} , \\mathbf { M } \\left\\{ \\left[ \\left( s _ { 2 1 } , f _ { 2 1 } \\right) , \\ c _ { 2 1 } \\right] , \\ \\left[ \\left( s _ { 2 2 } , f _ { 2 2 } \\right) , \\ c _ { 2 2 } \\right] , \\ \\cdots \\right\\} .$ $[ ( s 2 \\mathrm { m } , f _ { 2 \\mathrm { m } } ) , c _ { 2 \\mathrm { m } } ] \\}$ ，其相互连接与合并生成 $\\mathbf { k }$ -项集的规则与定义4中的2-项集生成过程类似（参考文献[12]有详细过程)，求交集的算法如算法2所示。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "算法2IntersectionIntersection(BL_cur，BL_HUT，threshold)输入：项集X与Y的B-list，最小支持度阈值 threshold。输出：两个B-list的交集以及支持度计数。$\\scriptstyle \\mathrm { R }  \\varnothing$ Let i=0,j=0,Rsupport=0$\\mathbf { C } _ { 1 }$ 是BL_cur 的支持度计数， $\\mathbf { C } _ { 2 }$ 是BL_HUT的支持度计数Let $\\mathbf { s } { = } 1$ While( $\\mathrm { i } <$ BL_cur.size and j<BL_HUT.size) doif(BL_cur[i].start-build $>$ BL_HUT[j].start-build) thenif(BL_cur[i].finish-build<BL_HUT[j].finish-build)then$\\scriptstyle \\mathbf { s } = 0$ （204if(R.size>O and R[R.size-1].start-build $\\ c =$ BL_HUT[j].start-build) thenR[R.size-1].support $+ { = }$ BL_cur[j].supportelse$\\mathbf { R } {  } \\mathbf { B }$ -info-code{BL_HUT[j].start-build,BL_HUT[j].finish-build,_cur[i].support}end if",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Rsupport $+ =$ BL_cur[i $+ + { \\bf \\dot { \\bar { \\rho } } }$ .support   \nelse   \n${ \\bf C } _ { 2 = } { \\bf C } _ { 2 } { \\bf - S } ^ { * }$ BL_HUT[j $+ + { \\bf \\bar { \\Psi } }$ .support   \n$\\mathbf { s } { = } 1$   \nend if   \nelse   \nC1=Ci-BL_cur[i $+ + ]$ .support   \n$\\scriptstyle \\mathbf { s } = 1$ （204号   \nend if   \nif( $\\mathrm { C } _ { 1 }$ <threshold or $\\mathrm { C } _ { 2 }$ <threshold）then   \nreturn NULL   \nend if   \nend while   \nreturnRandRSupport ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "1.4 BMFI算法",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "本节提出了一种基于B-list的最大频繁项集挖掘算法—BMFI算法，BMFI算法首先根据事务数据及构建TB-tree同时生成B-lis 然后根据B-list的连接原则将两个频繁k-1项集连接成频繁k项集同时能得到其支持度。本算法采用了全序搜索树[6]为搜索空间，然后采用深度优先搜索（DFS）策略来遍历整个全序搜索树。再采用父等价剪枝策略来缩小搜索空间，最后采用基于MFI-tree 的投影策略实现超集检测来提高算法的效率。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "1.4.1基于B-ist的深度优先搜索策略",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "假设一个完整的事务数据库，其中包含的数据集按照字典序进行排列，即若项目i出现在项目j之前，可以用 $\\mathrm { i } { \\leqslant } \\mathrm { L } ^ { \\mathrm { j } }$ ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "表示，如图2所示是由4个项目（ $\\bar { \\cdot } \\mathrm { \\mathbf { a } } \\leqslant \\mathrm { \\mathbf { L } } ^ { \\mathrm { b } } \\leqslant \\mathrm { \\mathbf { L } } ^ { \\mathrm { c } } \\leqslant \\mathrm { \\mathbf { L } } ^ { \\mathrm { d } }$ ）构成的字典搜索树结构。该结构对于每个节点而言需要与右侧的每个节点分别做并集，从而生成该节点的子集。BMFI算法采用将2个（k-1）项集的B-list求交集生成 $\\mathbf { k }$ -项集的B-list。",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/1da48a88192a2a7eec8cf5271c21b09f8b9914bb793ea6203ce4f3cb0d4d85ee.jpg",
        "img_caption": [
            "图2字典搜索树"
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "定义 $7 ^ { [ 6 ] }$ 在全序搜索树中的节点C，该节点的项集记为C.head，从该节点可扩展的项的集合记为C.tail，C.tail中会包含多个扩展项，每个扩展项集都是C节点的扩展1-项集。C节点右侧同父节点的集合记C.sibling+。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "例3如图2所示，假设{b，c}表示节点C，则根据定义",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "6,C.head={b,c},C.tail={d}，则C.HUT={b,c,d},C.sibling $+ { = }$ {{b，$\\{ \\} \\}$ 。d称为节点C的1-扩展信息。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "深度优先搜索策略的核心思想是检测每个节点的C.tail中的每个1-扩展项i。计算C.headUi的支持度，若支持度均小于minSup 时，此时在频繁模式树中C就是一个叶节点。此时检测C.head是否是最大频繁项集MFI中任意集合的子集。若不是，就将C加入到MFI。若C.headUi支持度均大于minSup，则继续向下递归。这里参考了文献[6]中将DFS 策略与其他剪枝策略相结合的思想和文献[8]中将N-list与DFS相结合的思想，从而引入了一种基于B-list的DFS 算法，由于B-List的高压缩率以及TB-tree的高效建树的特点，所以在挖掘最大频繁项集时效率会更高。算法如下所示：",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "算法3 基于B-list的DFS算法输入：事务数据库DB 和 minSup;",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "输出：DB 的所有的 MFI。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "MFI←O ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "root.head $\\it - \\infty$ root.tail←DB 频繁项的集合(按照项的支持度升序排列)在构建TB-tree 树完成之后，得到了所有的频繁1项集的B-list,记为BLCall DFS_based_BList(root,NULL,NULL)Function DFS_based_BList(Current node C,C's BList",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "_cur,C.sibling $+ \\mathbf { s }$ BList[] BLS)   \n$\\mathbf { k } {  } \\mathbf { C } .$ head 中支持度最大的项   \nfor each itemiin C.tail   \nif(BL_cur $\\scriptstyle = =$ NULL)   \nBL_child[i]=BL1[i]   \nelse   \nC_HUT $$ C.head U {i}-{k}   \nBL_HUT $$ BLS中记录C_HUT的元素   \nBL_child[i]=BL_intersection(BL_cur,BL_HUT)   \nendif   \nendfor   \nfor each itemiin C.tail   \n$C _ { \\mathfrak { n } }$ .head←C.head $\\cup$ {}   \nCn..tail $$ {jcC.taili≤Lj}   \nC_HUT $$ C.head U {i}-{k}   \nBLS_child←BL_child   \nif(BL_child[i].support≥minSup)   \nDFS_based_BList(Cn..head,BL_child[i],BLS_child)   \nendif   \nendfor   \nif(C is a leaf and C.head is not in MFI )do   \nMFI←MFIUC.head   \nendif ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "1.4.2优化策略",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "性质2设 $\\mathbf { \\boldsymbol { X } } { \\in } { \\mathbf { \\boldsymbol { C } } }$ head, $\\mathbf { y } \\in \\mathbf { C }$ .tail，若存在X的事务集与XU{y}完全相同，即 $\\scriptstyle { \\mathrm { t } } ( \\mathrm { X } ) = { \\mathrm { t } } ( \\mathrm { X } \\cup \\{ \\mathsf { y } \\} )$ ，那么 $\\forall \\mathrm { S } \\in \\mathrm { C } . \\operatorname { t a i l }$ ，都有XUS与 $\\operatorname { X U } \\{ y \\} \\cup \\operatorname { S }$ 的支持度相同。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "证明由于 $\\operatorname { t } ( \\mathrm { X } ) { = } \\operatorname { t } ( \\mathrm { X } \\cup \\{ \\operatorname { y } \\} )$ ，则 $\\scriptstyle \\operatorname { S u p } ( \\mathrm { X } ) = \\operatorname { S u p } ( \\mathrm { X } \\cup \\{ \\mathrm { y } \\} )$ ，所以任意包含X的事务必然包含 $\\mathbf { y }$ 。所以，包含S的任意项集也必然包含y，所以 $\\operatorname { S u p } ( \\operatorname { X } \\cup \\operatorname { S } ) { = } \\operatorname { S u p } ( \\operatorname { X } \\cup \\{ \\mathbf { y } \\} \\cup \\operatorname { S } ) .$ 0",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "BMFI算法根据性质2采用了父等价剪枝技术来缩小搜",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "索空间。当搜索C节点时，若遇到性质2中的情况，就可以将y从C.tail中删除，并放入C.head，这样会提高挖掘的效率并不会影响MFI挖掘的准确性。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "性质3若字典搜索树的节点C没有右侧的邻居节点，并且节点C不是已经挖掘的最大频繁项集的子集，则该项集是最大频繁项集。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "证明若C节点存在右侧的兄弟节点，那么节点C所表示的项集就有可能是该右侧兄弟节点所表示项集的子集，所以C节点所表示的项集不一定是已表示最大频繁项集的子集。同理，若某节点表示的项集是已挖掘到的最大频繁项集的子集，那么该节点表示的项集不是最大频繁项集。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "基于性质3，本文引入了GrahneG等7提出的基于MFI-tree 投影策略来实现超集检测。对于自底向上深度优先遍历FP-tree 树空间过程中发现的单一路径FP-tree头表项集与头项集中的项目构成的项目集，当头表不包含当前项，那么必定不会不存在超集，只有在当前节点路径上存在于与项集重合的部分，那么MFI-tree 就存在该项集的超集，即实现超集检测。若该项集在MFI不存在超集，该项集是最大频繁项集并加入到MFI。算法4中有比较详细的过程。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "算法4基于MFI-tree 投影策略的超集检测  \n输入：进行剪枝后按支持度递减排序后的项集M输出：最大频繁模式树  \nint len=M.length;  \nif(!headerTable.contains(M[len-1]))  \nreturn false;  \nelse  \nBMFINode  \nnode=headerTable.get(M[M.len-1])  \nWhile(node!=null)  \nBMFINode high=node;  \nWhile(high!=null)  \nif(high.label $= =$ M[len-1])  \nlen--;  \nhigh=high.parent;  \nif(len $\\scriptstyle = = 0$ )//此时就存在超集  \nreturn true;  \nnode $\\left. = \\right.$ node.sibling;  \nlen=M.length;",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "return false; ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "2 实验结果及分析",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "由于FPMAX算法在不同的数据集中都保持着良好的性能。所以通过比较BMFI与FPMAX算法和MFIN算法在不同数据集上挖掘最长频繁项集所用的时间来验证BMFI算法的有效性。实验所有的程序均用 $\\mathrm { C / C ^ { + + } }$ 编写，实验环境为Inter(R)Core(TM)i5CPUM330 $@$ 3.1GHzCPU，4GB内存，64位Windows10操作系统。在该环境下实现了FPMAX算法与BMFI算法和MFIN算法。实验所使用的是Pumsb、Retail数据集以及由IBM数据生成器生成的人工数据集T10I4D100K（各数据集参数如表2所示)。通过改变最小支持度来进行频繁模式的挖掘，然后对比分析了算法的运行时间以及内存消耗情况。运行时间对比如图3所示，内存消耗情况对比如图4所示。",
        "page_idx": 4
    },
    {
        "type": "table",
        "img_path": "images/7a89586874e1e8e179e68c5e436babc339dc6648d75416a673aaa816551e00b7.jpg",
        "table_caption": [
            "表2数据集参数"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>数据集</td><td>项数</td><td>平均长度</td><td>事务数目</td></tr><tr><td>Pumsb</td><td>7117</td><td>74</td><td>49046</td></tr><tr><td>Retail</td><td>16470</td><td>10.3</td><td>88162</td></tr><tr><td>T10I4D100K</td><td>870</td><td>10.1</td><td>100000</td></tr></table></body></html>",
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/87a4de4aea224a445593bece3d968988b5bb7eb5ee9cab7b61b165297abdf040.jpg",
        "img_caption": [
            "图3运行时间对比"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/1e75a161c3d9ad7bf95a815d66269d80704dca62c9f39d5685ddf9c06da74b6c.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "",
        "img_caption": [
            "图4内存消耗对比"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "本实验将BMFI算法与FPMAX算法和MFIN算法在不同数据集下的挖掘结果进行了分析，首先三种算法在同一数据集同一支持度下挖掘出了最大频繁项集的内容与数量是相同的，表明本算法是正确的。Pumsb、Retail、T10I4D100K数据集分别代表着稠密型、稀疏型的数据集和IBM数据生成器生成的人工数据集，如图3所示，三种算法的运行时间都随支持度增加而减少，在Retail数据集中上运行时，虽然三种算法在各最小支持度阈值情况下的运行时间相差不大，但在支持度阈值较小时，BMFI算法的运行时间上有较显著的优势。在T10I4D100K数据集上运行时，当最小支持度阈值为0.1时,其运行时间相对于FP-max算法提升了近1倍,随着最小支持度阈值的升高,BMFI算法运行时间的优势逐渐减小。如图4所示,在内存的消耗方面，在不同的数据集中，三种算法的内存消耗也是随着最小支持度阈值的升高而减小，在支持度阈值较小时，BMFI算法的内存消耗都明显少于FP-MAX算法与MFIN算法。结果表明BMFI算法在不同类型数据集中都有着较高的时间效率与空间效率。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "3 结束语",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "本文提出了一种新的最大频繁模式挖掘算法一BMFI，该算法采用了基于B-list的高压缩率以及高效的求交集的方法实现支持度的快速的计算，同时采用父等价剪枝技术来缩小搜索空间，最后再结合基于MFI-tree的投影策略实现超集检测，从而来提高算法的效率。结果表明,与FPMAX 算法和MFIN算法相比，BMFI算法具有较显著的性能优势。但随着如今互联网大数据时代的到来，BMFI算法还需要再进行优化，例如在BMFI的剪枝优化策略方面还有优化空间，这将是接下来需要思考的问题。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "参考文献：",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "[1]Agrawal R,Srikant R.Fast algorithms for mining association rules [C]// Proc of the 2Oth International Conference on Very Large Data Bases.San Francisco:Morgan Kaufmann Publishers,1994: 487-499   \n[2]Han J,Pei J,Yin Y,et al.Mining frequent patterns without candidate generation: a frequent-pattern tree approach [J]. Data Mining & Knowledge Discovery,2004,8(1): 53-87.   \n[3]Aggarwal C C,Han J.Frequent pattern mining [M]. [S.l] : Springer International Publishing,2014   \n[4]Jr Bayardo R J.Efficiently mining long patterns from databases [J].ACM Sigmod Record,1998,27(2): 85-93.   \n[5]Agarwal R C,Aggarwal C C,Prasad VVV.Depth first generation of long patterns [C]// Proc of the 6th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining.NewYork:ACMPress,20oo:108- 118.   \n[6]Burdick D,Calimlim M,Flannick J,et al.MAFIA:a maximal frequent itemset algorithm [J].IEEE Trans on Knowledge and Data Engineering, 2005,17(11): 1490-1504.   \n[7]Grahne G, Zhu J.High performance mining of maximal frequent itemsets [C]//Proc of the 6th International Workshop on High Performance Data Mining.2003.   \n[8]沈戈晖，刘沛东，邓志鸿.NB-MAFIA：基于 N-List 的最长频繁项集挖 掘算法 [J].北京大学学报：自然科学版,2016,52(2):199-209.   \n[9]林晨，顾君忠．基于 Nodeset 的最大频繁项集挖掘算法[J].计算机工 程,2016,42(12):204-207,216.   \n[10]Deng ZH,Lv SL.Fast mining frequent itemsets using Nodesets [J].Expert Systems with Applications,2014,41 (10): 4505-4512.   \n[11] Deng Z H,Lv S L.PrePost+: an efficient N-lists-based algorithm for mining frequent itemsets via children-parent equivalence pruning [J].Expert Systems with Applications,2015,42(13): 5424-5432.   \n[12] Dam TL,Li K,Fournier-Viger P,etal.An efficient algorithm for mining top-rank-k frequent patterns [J].Applied Intelligence,2016, 45 (1): 9   \n[13]Deng ZH,Wang ZH, Jiang JJ.A new algorithm for fast mining frequent itemsets using N-lists[J].Science China Information Sciences,2012,55 (9): 2008-2030. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    }
]