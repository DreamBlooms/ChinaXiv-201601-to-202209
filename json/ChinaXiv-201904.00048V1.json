[
    {
        "type": "text",
        "text": "基于高斯扰动和指数递减策略的改进蝙蝠算法",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "宋一民1,²，李煜2,3†",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "(1．郑州财经学院 现代物流与管理系，郑州 45000;2.河南大学 商学院，河南 开封 475004;3.河南大学 管理科学与工程研究所，河南 开封 475004)",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "摘要：针对基本蝙蝠算法后期收敛速度慢、收敛精度不高、稳定性不强等问题，提出基于高斯扰动和指数递减策略的改进蝙蝠算法（GDEDBA)。把指数递减策略引入速度更新公式，使算法迅速进入局部寻优并展开精确搜索；构造高斯扰动项加入到局部新解产生公式，使局部新解中所有粒子与当前全局最优粒子产生信息交流与学习，防止陷入局部最优，增加种群多样性；设计扰动控制因子来控制高斯扰动的扰动范围，增强算法的稳定性。15个测试函数的仿真结果表明，改进算法的寻优性能显著提高，收敛速度更快，求解精度更高，稳定性更强。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "关键词：蝙蝠算法；高斯扰动；指数递减策略；算法改进；函数优化 中图分类号：TP301.6 doi:10.19734/j.issn.1001-3695.2018.10.0802 ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Improved bat algorithm based on Gaussian disturbance and exponential decreasing strategy ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Song Yimin1,2, Li Yu2,3† (1.College of Logistics& Management， Zhengzhou Instituteof Finance& Economics，Zhengzhou 450o,China;2. Business School,Henan University，KaifengHenan475o04,China;3.ResearchInstituteofManagementScience& Engineering,Henan University, Kaifeng Henan 475004,China) ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Abstract: Aiming atthe shortcomings of thebasic bat algorithm such as slow convergence,lowconvergence precisionand weak stability,this paper designed an improved bat algorithm(GDEDBA)based on Gaussian disturbance and exponential decreasing strategy.It introduced the exponential decreasing strategy into thespeed update formula,could enable the algorithmtoenterlocaloptimizationquicklyand exactly;itadded theconstructed Gaussan disturbance term to the local new solution generation formula,then the information exchangeand studybetween allparticles inthe localnew solution andthe curent global optimal particles cloud happened,prevented falling into local optimum and increased population diversity;it designed the disturbancecontrolfactor tocontrolthe disturbancerangeof Gausian disturbance,enhanced the stabilityof the algorithm.The simulationresultsof15classical testfunctions shows thattheoptimization performanceof improvedalgorithm issignificantly improved,theconvergence speed is faster,the solutionaccuracy is higher,and the stability is stronger. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Key Words: bat algorithm; Gausian disturbance; exponential decreasing; algorithmimprovement; function optimization ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "0 引言",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "2010 年，剑桥大学学者Yang通过模拟蝙蝠回声定位行为，提出一种新的智能优化算法——蝙蝠算法(bat-inspiredalgorithm)[1]。蝙蝠算法自提出以来，以其模型简单、易于实现等优点被广泛应用于多个领域，如函数优化[2.3]、工程结构设计[4-6]、PID控制器参数估计[7]、调度问题[8.9]、图像处理[10,11]等。但是蝙蝠算法存在后期收敛速度慢、易陷入局部最优，稳定性差等缺点。为此，研究者对此作了许多改进。Selim等人[12]用惯性权重因子来控制上一步速度的影响大小，从而来平衡全局和局部搜索之间的强度。Meng等人[13]融合栖息地选择和多普勒效应改进蝙蝠算法(NBA)，进一步模仿了蝙蝠的生物学行为对蝙蝠算法改进。Luo等人[14]提出双子群莱维飞行蝙蝠算法(DLBA)。此外还有混合蝙蝠算法[15\\~18]。针对蝙蝠算法的不足，本文提出一种新的改进算法(GDEDBA)。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "1 基本蝙蝠算法",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "蝙蝠是一种神奇的物种，是地球上目前为止发现的唯一一种会飞的兽类。其中的微型蝙蝠由于视觉退化，靠回声定位来代替视觉功能。微型蝙蝠在飞行过程中，不断发出 $2 5 \\sim$ 150千赫兹范围内的超声波，超声波遇到障碍物返回到微型蝙蝠的双耳，微型蝙蝠通过判断发出声波到收到返回声波的时间差感知障碍物的距离，通过返回声波的时间间距感知障碍物在哪里，利用回声的响度变化感知障碍物是什么，以此构建三维立体图像。微型蝙蝠利用多普勒效应对周围场景作出判断，离猎物越近，波长越短，频率越高；离猎物越远，波长越大，频率越低，比并且可以判断猎物的移动速度。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "蝙蝠算法模拟微型蝙蝠搜索猎物，是一种基于种群的随机寻优算法，问题的解被抽象成搜索空间中的蝙蝠粒子，每只蝙蝠都有一个由优化问题决定的适应度与之对应，蝙蝠个体通过调整频率、响度、脉冲发射率，追随当前的最优蝙蝠在解空间中搜索。蝙蝠粒子在位置 $X _ { i }$ 以速度 $V _ { i }$ 随机飞行，以固定频率 $f _ { \\mathrm { m i n } }$ （或）、可变化波长（或 $f$ ）和响度 $A _ { 0 }$ 搜索猎物，根据猎物与自己的距离调节发射出的脉冲波长（或频率)，并在靠近猎物时调整发射脉冲的频度 $r \\in [ 0 , 1 ]$ ，其中0表示没有脉冲，表示刚发现猎物，在接近猎物的过程中，逐渐调整为最大脉冲1。而响度则在搜索猎物过程中从最大值（正值） $A _ { 0 }$ 到最小值 $A _ { \\operatorname* { m i n } }$ 。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "蝙蝠位置 $X _ { i } ^ { t }$ 和速度 $V _ { i } ^ { t }$ 在步骤 $t$ 时的更新公式如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nf _ { i } = f _ { \\operatorname* { m i n } } + ( f _ { \\operatorname* { m a x } } - f _ { \\operatorname* { m i n } } ) \\beta ,\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nV _ { i } ^ { t } = V _ { i } ^ { t - 1 } + ( X _ { i } ^ { t - 1 } - X ^ { * } \\mathbf { \\epsilon } ) f _ { i } ,\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nX _ { i } ^ { t } = X _ { i } ^ { t - 1 } + V _ { i } ^ { t }\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $\\beta \\in [ 0 , 1 ]$ 是一个随机向量； $X ^ { * }$ 是当前全局最优位置。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "微型蝙蝠具有群体学习能力，能追随当前最接近猎物的蝙蝠个体搜索猎物。受此启发，蝙蝠算法设计局部新解的更新机制，在当前全局最优解的附近产生局部新解，局部新解的更新公式如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nX _ { n e w } ^ { t } = X ^ { * t } + \\varepsilon A ^ { t } , \\varepsilon \\in [ - 1 , 1 ]\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $\\varepsilon \\in [ - 1 , 1 ]$ 是随机数； $A ^ { t } = < A _ { i } ^ { t } >$ 是所有蝙蝠在这一代里的平均响度。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "脉冲发射的响度 $A _ { i }$ 和速率 $r _ { i }$ 也要随着迭代过程进行更新。脉冲发射的响度 $A _ { i }$ 和速率 $r _ { i }$ 的更新公式如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nA _ { i } ^ { t } = \\alpha A _ { i } ^ { t - 1 }\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nr _ { i } ^ { t } = r _ { i } ^ { 0 } \\left[ 1 - \\mathrm { e } ^ { - \\gamma t } \\right]\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $\\alpha$ 和 $\\gamma$ 是恒量， $0 < \\alpha < 1$ 和 $\\gamma > 0 .$ 0",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2 基于高斯扰动和指数递减策略的改进蝙蝠算法",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2.1指数递减策略分析",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "蝙蝠算法和粒子群算法都是通过粒子在解空间中进行全局搜索和局部精确搜索相结合的方法来实现最终寻优的。有效的全局搜索可以帮助粒子跳出局部最优解，有效的局部搜索则帮助粒子在当前搜索区域进行精确搜索，利于算法收敛。那么，如何来平衡全局搜索能力和局部搜索能力，无疑会对算法的寻优性能产生巨大影响。为此，许多专家学者进行了大量研究工作，PSO算法在此方面的改进策略主要有线性递减权重策略[19]、自适应权重策略[20]、随机权重策略[21]。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "文献[22]受线性递减权重策略的启发，构造三种不同策略对粒子群算法改进。实验结果表明，指数递减策略效果最佳。针对基本蝙蝠算法后期收敛速度慢且易在全局最优解附近产生震荡的不足，受文献[22]启发,用指数递减策略对蝙蝠算法进行改进。指数递减策略因子 $w$ 的表达式为",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nw = w _ { \\mathrm { m i n } } \\stackrel { * } { \\sim } ( w _ { \\mathrm { m a x } } / w _ { \\mathrm { m i n } } ) ^ { 1 / ( 1 + c t / t _ { \\mathrm { m a x } } ) }\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $w _ { \\mathrm { m a x } }$ 、 $w _ { \\mathrm { m i n } }$ 分别代表 $w$ 的最大值和最小值； $\\textit { t }$ 代表当前迭代次数； $t _ { \\mathrm { m a x } }$ 代表最大迭代次数；参数 $\\mid c \\mid$ 的取值选取与文献[22]一致， $c = 1 0$ ，取 $w _ { \\mathrm { m a x } } = 0 . 9$ ， $w _ { \\mathrm { m i n } } = 0 . 4$ 。",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/11aba5d3e7165fbac80fff2be28b608bbb5865b7a3d156be52c8274c5eacb011.jpg",
        "img_caption": [
            "图1指数递减策略因子 $w$ 的迭代曲线",
            "Fig.1Iterative curve of exponential decreasing strategy factor W "
        ],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "指数递减策略因子随迭代次数的变化如图1所示。通过观察： $w$ 在迭代初期随着迭代次数增加以很快的速率递减，而在迭代的中后期， $w$ 下降速度逐渐变得缓慢。在基本蝙蝠算法中， $w$ 是个恒定值1，容易造成算法在迭代前期陷入局部最优，在迭代后期收敛速度变慢。这里将指数递减策略因子 $w$ 加入到基本蝙蝠算法的速度更新公式中，可以使算法迅速进入局部寻优，并有效展开精确搜索，确保找到最优解。这样一来，既有利于提高算法的收敛速度，又有利于提高算法的寻优精度。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "为了测试该策略对算法性能的有效性，对比分析本文的改进算法（GDEDBA）与删除该策略的算法（BA1)，在保证相关参数一致的基础上，分别独立运行五个测试函数，取其平均值进行求解精度对比，结果如表1所示。给出GDEDBA与BA1运行函数F1的收敛对比图进行收敛速度对比，结果如图2所示。",
        "page_idx": 1
    },
    {
        "type": "table",
        "img_path": "images/f33c52d7977ecf9ca19f6d8154aaa6836cbed005b32a6f272bd4663bab9c1fd5.jpg",
        "table_caption": [
            "表1GDEDBA 与BA1的仿真结果",
            ""
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td colspan=\"5\">Table1 SimulationresultsofGDEDBA&BA1</td></tr><tr><td></td><td>F1</td><td>F2</td><td>F3</td><td>F4</td><td>F5</td></tr><tr><td>BA1</td><td>5.79E-13</td><td>2.73E-06</td><td>4.42E-14</td><td>5.56E-15</td><td>0</td></tr><tr><td>GDEDBA</td><td>9.87E-121</td><td>4.27E-61</td><td>0</td><td>0</td><td>0</td></tr></table></body></html>",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/eb15e21b3619ad756fa9fb56c5c456b6f6cd40940b8fe998574ef81dcb37fd43.jpg",
        "img_caption": [
            "图2GDEDBA与BA1运行F1的收敛曲线 Fig.2Iterative curve of flabout GDEDBA&BA1 "
        ],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "分析表1和2可得，删除指数递减惯性权重后，算法的收敛速度和收敛精度大幅下降，说明指数递减惯性权重可以有效提高算法的寻优性能。那么，改进后算法的速度更新公式为",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nV _ { i } = w V _ { i } ^ { t - 1 } + ( X _ { i } - X ^ { * } ) f _ { i }\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2.2高斯扰动过程分析",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "观察基本蝙蝠算法中局部新解的更新公式(式(4))，可以发现它是由当前全局最优解和随机数与响度的乘积项简单相加构成，新解粒子与当前全局最优粒子之间没有产生信息交流和学习，全靠响度项来调节,这就使得对当前全局最优粒子的有效信息利用能力不高，使新解粒子丧失学习能力，还会带来种群多样性的损失,也不符合生物习性。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "因此，这里在产生局部新解的公式 $X _ { n e w } ^ { t } = X ^ { * _ { t } } + \\varepsilon A ^ { t }$ 中，对当前全局最优位置的每一个粒子都加入一个高斯扰动项[23]Gaussian $\\scriptstyle ( \\mu , \\sigma ^ { 2 } )$ ，其中： $\\mu$ 表示均值; $\\sigma ^ { 2 }$ 表示方差； $\\mu = 0 , \\sigma ^ { 2 } = \\big | X ^ { * _ { t } } { } _ { i j } \\big |$ $\\left| X ^ { * _ { t } } { } _ { i j } \\right|$ 表示第 $t$ 次迭代时种群的全局最优粒子的绝对值。改进后的局部新解产生公式描述如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\nX _ { n e w } ^ { t } = X ^ { * _ { \\iota } } { } _ { j } + a \\oplus G a u s s i a n ( \\mu , \\sigma ^ { 2 } ) + \\varepsilon A ^ { t } , \\varepsilon \\in [ - 1 , 1 ]\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $\\mu = 0 , \\sigma ^ { 2 } = \\big | X ^ { * _ { t } } { } _ { i j } \\big |$ ； $\\varepsilon \\in [ - 1 , 1 ]$ 是随机数； $A ^ { \\iota } = < A _ { i } ^ { \\iota } >$ 是所有蝙蝠在这一代里的平均响度； $a$ 表示扰动控制因子； $\\oplus$ 表示点对点乘法。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "如此,新解的产生是由当前全局最优解、均值为 $0$ ，方差",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "为当前全局最优粒子绝对值的高斯扰动项以及响度项三项构成，更加符合蝙蝠之间会有信息交流和相互学习的生物学特点的实际。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "2.3 扰动控制因子",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "基本蝙蝠算法存在求解不稳定、求解精度不高的缺点。可以观察式(4)，改进之前局部新解的产生实际上仅靠响度项在当前全局最优粒子周围调整产生,具有很大的随机性，往往使新解过大的偏离当前全局最优解，或者调整不足，导致种群多样性的丧失，从而产生求解不稳定和精度不高的缺点。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "因此这里设计扰动控制因子 $\\boldsymbol { a }$ 来控制高斯扰动项的干扰范围(式(9))，增强算法稳定性和增加种群多样性。关于 $a$ 的取值，本文通过仿真实验来说明，当 $a$ 取值为1、0.5、0.1、0.05、0.01时，分别用GDEDBA算法对测试函数F1和F2（迭代1000次，维数为30）分别独立进行求解30次取其平均值，结果如表2所示。",
        "page_idx": 2
    },
    {
        "type": "table",
        "img_path": "images/dea969f3de95e1da230178ec96c9d1d6f161c58b0bffe237ef297c62b4a6d463.jpg",
        "table_caption": [
            "表 $2 a$ 不同取值下仿真结果对比",
            "Table 2Simulation results of $a$ under different values "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td>a=1</td><td>a=0.5</td><td>a =0.1</td><td>a=0.05</td><td>a=0.01</td></tr><tr><td>F1</td><td>3.68E-24</td><td>5.08E-62</td><td>3.19E-117</td><td>7.50E-104</td><td>3.85E-50</td></tr><tr><td>F2</td><td>5.19E-16</td><td>1.06E-34</td><td>4.62E-60</td><td>2.824E-52</td><td>4.95E-26</td></tr></table></body></html>",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "通过观察可以发现，在 $a = 0 . 1$ 时函数的求解结果最好，所以，本文中 $\\boldsymbol { a }$ 取值为0.1，可以保证算法的最优性能。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "经过以上分析，高斯扰动项能有效利用当前全局最优位置的信息来保证新解中所有粒子之间的信息交流与学习，一方面可以有效帮助粒子避免陷入局部最优，提高算法搜索精度，另一方面提高了种群多样性，加快了算法收敛速度，可以有效提高算法的寻优性能。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "2.4算法实现流程",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "a)设置相关参数并初始化蝙蝠种群，随机生成蝙蝠种群的脉冲频率 $f _ { i }$ 、位置 $X _ { i }$ 、速度 $V _ { i }$ 、脉冲速率 $r _ { i }$ 和声音响度A；",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "b)计算初始化种群的函数适应度值，并判断是否达到迭代终止条件；",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "c)按照式（7）计算指数递减策略因子 $w$ ，用式（1）（8）",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "（3）调整蝙蝠个体的频率并更新速度和位置，找到当前最优位置 $X ^ { * _ { t } }$ 并记录下来;",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "d)生成一个随机数rand，并判断是否 $( \\mathrm { r a n d } ) > r _ { i }$ )，利用式",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "（9）生成高斯扰动项，在当前迭代次数的全局最优位置附近生成新解 $X _ { n e w } ^ { t }$ ：",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "e)判断是否满足随机数rand $\\ 、 < A _ { i }$ 且适应度值 $f \\ ( \\ X _ { n e w } ^ { t } ) < f$ $\\left( \\begin{array} { l } { X ^ { * _ { l } } } \\end{array} \\right)$ ，同时满足就接受这个新的解，此时 $X _ { n e w } ^ { t }$ 成为当前全局最优解，并计算出 $X _ { n e w } ^ { t }$ 对应的的适应度值 $f _ { N E W }$ ，然后按照式(5)，（6）更新 $r _ { i }$ 和 $A _ { i }$ ，本文将 $r _ { i }$ 和 $A _ { i }$ 设置为一个固定的常数；",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "f)判断 $f _ { N E W }$ 是否为最优适应度值，找到当前全局最优解$X ^ { \\ast }$ ，并记录此时的适应度值为目标函数的最优解；",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "g)判断是否满足算法结束条件，若满足，转到步骤h)， 若未满足，返回步骤c); ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "h)显示全局最优解和最优目标函数适应度值。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "为了更加直观地理解改进蝙蝠算法的实现流程，改进蝙蝠算法的算法实现流程如图3所示。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3 仿真实验 ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3.1算法测试函数",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "为了测试改进算法的寻优性能，选取15个经典测试函数[3,24,25],通过对基本蝙蝠算法(BA)[1]、标准粒子群算法(PSO)[26]、基本布谷鸟算法（CS）[27]做横向对比，通过对改进蝙蝠算法指数递减权重蝙蝠算法（IWBA）[28]、动态调整惯性权重的自适应蝙蝠算法（DAWBA）[29]作纵向对比，分别进行寻优计算并记录结果。测试函数表3所示。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/4de5dc5440bd7c5bc0ae9925bb8dc0a758c39a2092137e9e6f690e4e46151454.jpg",
        "img_caption": [
            "图3改进蝙蝠算法的算法流程",
            "Fig.3Flow chart of improved bat algorithm "
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "表3列出了15个测试函数的函数名、对应的函数表达式以及理论最优值。为了方便下文描述，对其进行编号。函数F1是非线性连续单峰函数，难以求到最优值，常用于检验算法的求解精度高低；函数F2是连续的平滑多峰函数，当自变量趋近于无穷大时，函数会形成大量局部极值区域，具有较高的寻优难度；函数F3由于其各维上的变量是密切相关、互相作用的，函数解释变量随着自量变而改变，函数的分布中存在大量局部极值因此很难取得最优解，可以检测算法跳出局部的能力；函数F4有1个全局极小值点 $\\scriptstyle \\mathrm { f } ( 0 , 0 ) = 0$ ，该函数在狭长的全局极值点周围拥有很多的局部极值，主要用以测试算法的收敛性能；函数F5是一个复杂的多峰问题，具有大量的局部极值点，主要用于检验算法的群体多样性；函数F6是虽然单峰连续函数，具有一个全局极小点f(1,1)=0，但它却是病态的（螺旋型)，它在全局极小点邻近的狭长区域内取值变化极为缓慢，会发生振荡，可用于评价算法的收敛性能；函数F7\\~F10以及F14，最小值均为非零常数，其中函数F7共有760个局部极小值，F9有6个局部极小点，常用来测试算法的求解成功率；函数F11\\~函数13以及函数15用来测试算法的求解稳定性和求解成功率。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "通过上述分析可知，文中选取多种不同类型的测试函数，以求全方位测试算法性能，其中不乏求解难度极高的测试函数，这里为了增加求解难度，把所有函数的求解维度都设为30维。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3.2实验环境及参数设置 ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "在仿真实验中，仿真环境的硬件配置为Windows7旗舰版操作系统，CPU为IntelRCorei5 $2 . 4 0 ~ \\mathrm { G H z }$ 处理器，6GB内存，仿真环境的软件配置为MATLABR2014a。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "为保证比较的公平性，这里对各个算法的参数作出说明。对于BA、IWBA、DAWBA、GDEDBA的参数设置都设置为",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "种群规模 $\\scriptstyle \\mathrm { n = 4 0 }$ ，响度 $_ { \\mathrm { A } = 0 . 2 5 }$ ，脉冲 $_ { r = 0 . 5 }$ ，最大频率 $f _ { \\mathrm { m a x } } = 2$ 最小频率 $f _ { \\mathrm { m i n } } = 0$ ；对于PSO，参数设置为种群规模 $\\scriptstyle \\mathrm { n = 4 0 }$ ，学 习因子 $\\mathrm { c } 1 { = } 2$ ， $\\mathrm { c } 2 { = } 2$ ，惯性权重 $\\mathrm { w } { = } 0 . 5$ ；对于CS，参数设置 ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "为种群规模 $\\scriptstyle \\mathrm { n = 4 0 }$ ，概率 $\\mathtt { p a } { = } 0 . 2 5$ ；以上所有算法迭代次数都设为1000次；为了提高求解难度，证明算法的优越性，15个测试函数的求解维数都设为30维。",
        "page_idx": 3
    },
    {
        "type": "table",
        "img_path": "images/7d5950e5ba69522ff98ead089ff7edcbe606b9d7198465aaaee3449e9ef5e482.jpg",
        "table_caption": [
            "表3测试函数",
            "Table 3 Test function "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>编号</td><td>函数名</td><td>函数表达式</td><td>最优值</td></tr><tr><td>F1</td><td>Sphere</td><td>fi(x)= i= 2x²</td><td>0</td></tr><tr><td>F2</td><td>Schwegel's Problem 2.22</td><td>f(x)=∑lxi｜+Ixil i=1 =]</td><td>0</td></tr><tr><td>F3</td><td>Griewank</td><td>f(x)= 400 I[cos()+1</td><td>0</td></tr><tr><td>F4</td><td>Ackley's</td><td>n台 n台</td><td>0</td></tr><tr><td>F5</td><td>Rastrigin's</td><td>fs(x)=∑[x²-10cos(2πx)+10 i=l</td><td>0</td></tr><tr><td>F6</td><td>Rosenbrock's</td><td>∑[100(xi+1-xi²)² +(1-x,2)] =1 f(x）=</td><td>0</td></tr><tr><td>F7</td><td>Hansen</td><td>f(x)= i( i=1</td><td>-176.54</td></tr><tr><td>F8</td><td>Branin</td><td>f8(x)=(x ²-6)² +10·(1- 1)cos x +10 4π 8π 5.1x</td><td>0.39789</td></tr><tr><td>F9</td><td>Six-Hump Camel-Back</td><td>-+xx-4x²+4x 3 f（x）=4x²-2.1x²++</td><td>-1.0316</td></tr><tr><td>F10</td><td>Goldstein-Price</td><td>f0(x)=[1+(x +x+1)²·(19-14x +3x²-14x+6xx+3x²)] x[30+(2x-3x²)²·(18-32x +12x²+48x²-36xx+27x²)</td><td>3</td></tr><tr><td>F11</td><td>Tabel</td><td>f=10x+</td><td>0</td></tr><tr><td>F12</td><td>Matyas</td><td>i=2 f12 =0.26(x²+y²)-0.48xy</td><td></td></tr><tr><td>F13</td><td>Eggcrate</td><td>𝑓13 =x²+y²+25(sin² x+ sin²y)</td><td>0 0</td></tr><tr><td>F14</td><td>Easom</td><td>f14(x)=-cos(x)cos(x)exp[-((x𝑖-π)²+(x-π)²)]</td><td>-1</td></tr><tr><td>F15</td><td>Axis parallel hyper-ellipsoid</td><td></td><td>0</td></tr></table></body></html>",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "3.3 寻优性能分析",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "为了减少随机因素对算法求解结果的影响，把每个函数分别独立运行50次，分别计算15个测试函数独立运行50次的最优解（Best）、平均值（Avg）和方差（Var)，并把求解精度最高的解进行加粗，结果对比如表4所示。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "由表4可以看出，对于15个测试函数而言，GDEDBA可以对其中的11个求到最优解，其余4个的寻优结果远远优于其他算法，说明改进算法的求解达优率很高。仔细分析，对于函数F7\\~F10和F14，本文选取的五个算法以及GDEDBA都可以求到最优解，说明本文选取的所有算法在求解函数F7\\~F10和F14都显示了优良的求解性能，但是对于函数F7和F10来说，GDEDBA的求解结果方差最小，说明改进后的算法稳定性更强；对于函数F4\\~F6，PSO，IWBA和GDEDBA可以求到最优解，而其余算法求不到最优解；对于函数F1,F2,F11和F15本文选取的五个算法以及改进后的算法都没有求到最优解，但是GDEDBA的求解精度高出其余算法近百倍的数量级，而且求解方差远远高于其余算法，说明GDEDBA的稳定性更强；而对于函数F3,F12和F13，只有本文的改进算法GDEDBA可以求到最优解，其余算法都没有求到最优解。经过以上分析可以得出，本文设计的改进算法在在寻优性能上明显优于其他算法，显示了更高的寻优精度和更高的稳定性。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "3.4 收敛性能分析",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "算法的收敛速度是衡量算法性能的重要指标，算法的收敛图可以更加直观地对比各种算法的收敛性能。图4\\~18展示了BA、PSO、CS、IWBA、DAWBA和GDEDBA这6种优化算法在求解15个标准测试函数时的适应度值收敛曲线。图中横轴为迭代次数，纵轴为适应度值。另外，为了更清楚地显示收敛情况，把函数F1\\~F6，F11\\~F13和F15的纵轴取对数。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "由图4\\~8、图14\\~16以及图18可知，在求解函数F1\\~F5、F11\\~F13以及F15时，GDEDBA的收敛曲线向图的右下角迅速下降，尤其是图6\\~8对应的函数F3\\~F5，GDEDBA的收敛曲线几乎接近垂直下降，收敛非常快，远远高于其余算法；观察图6\\~8可发现，其余5种算法在收敛过程中出现了不同程度的阶梯状，观察图14\\~16发现，PSO在求解函数F11\\~F13时，在迭代前期出现了剧烈震荡，而GDEDBA收敛曲线平滑，由收敛曲线可以看出，GDEDBA求解稳定性很强，显示了很强的鲁棒性。由图10\\~13以及图17可知，求解函数F7\\~F10以及F14时，GDEDBA的收敛曲线几乎与其余算法重合，并且由上文可知F7\\~F10以及F14都可以求到最优解，两者互为证明，算法的收敛速度与收敛精度是存在一定联系的。由图9可知，PSO的收敛速度快于其余算法，而DGEDBA和IWBA的收敛曲线呈现重合趋势，而由上文得知，对于函数F6，PSO、IWBA和GDEDBA都可以求到最优解。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "表4寻优精度的对比结果",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "table",
        "img_path": "images/fd7ff9132ad3c8d253c4a3c8c3be57a9c0d705b49ae77840d3b4900c6cfa8c1b.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td colspan=\"5\">Table 4 Comparison results of optimization accuracy</td></tr><tr><td>函数</td><td>算法</td><td>Best</td><td>Avg</td><td>Var</td></tr><tr><td></td><td>BA</td><td>9.0151E-04</td><td>1.4130E-03</td><td>3.4986E-08</td></tr><tr><td rowspan=\"8\">F1</td><td>PSO</td><td>2.0146E-01</td><td>5.3673E-01</td><td>3.5194E-02</td></tr><tr><td>CS</td><td>1.6948E-05</td><td>5.1693E-05</td><td>7.2214E-10</td></tr><tr><td>IWBA</td><td>6.0092E-05</td><td>2.8104E-04</td><td>8.0002E-09</td></tr><tr><td>DAWBA</td><td>3.7525E-07</td><td>1.1544E-06</td><td>3.4034E-13</td></tr><tr><td></td><td>4.4294E-123</td><td>2.1932E-117</td><td>5.1902E-233</td></tr><tr><td>GDEDBA</td><td>1.2693E-01</td><td>2.1723E-01</td><td>1.78E-02</td></tr><tr><td>BA</td><td>1.309</td><td>2.680037255</td><td>0.425097685</td></tr><tr><td>PSO</td><td></td><td>2.6981E-01</td><td>6.1909E-03</td></tr><tr><td rowspan=\"7\">F2</td><td>CS</td><td>1.2434E-01</td><td>3.2902E-01</td><td></td></tr><tr><td>IWBA</td><td>7.5163E-02 3.4754E-03</td><td>1.3185E-01</td><td>6.10E-02</td></tr><tr><td>DAWBA</td><td>3.9700E-63</td><td>3.4265E-60</td><td>3.92E-02</td></tr><tr><td>GDEDBA</td><td></td><td></td><td>5.8851E-119</td></tr><tr><td>BA</td><td>3.6417E-05</td><td>7.2499E-05</td><td>1.13885E-10</td></tr><tr><td>PSO</td><td>1.0912E-02</td><td>2.2616E-02</td><td>6.3948E-05</td></tr><tr><td>CS</td><td>5.1171E-05</td><td>7.0376E-04</td><td>1.2800E-06</td></tr><tr><td rowspan=\"8\">F3</td><td>IWBA</td><td>8.7483E-06</td><td>3.0170E-05</td><td>1.19875E-10</td></tr><tr><td>DAWBA</td><td>1.9098E-08</td><td>8.2571E-08</td><td>2.42595E-15</td></tr><tr><td>GDEDBA</td><td>0</td><td>0</td><td>0</td></tr><tr><td>BA</td><td>4.9913E-05</td><td>2.9146E-04 0</td><td>1.64453E-08</td></tr><tr><td>PS0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>CS</td><td>0</td><td>0</td><td>0</td></tr><tr><td>IWBA</td><td>0</td><td>2.0547E-06</td><td>0</td></tr><tr><td>DAWBA</td><td>9.7607E-08</td><td></td><td>1.96856E-12</td></tr><tr><td rowspan=\"6\">F5</td><td>GDEDBA</td><td>0</td><td>0</td><td>0</td></tr><tr><td>BA</td><td>1.78E-15</td><td>1.31E-10</td><td>4.97312E-20</td></tr><tr><td>PSO</td><td>0</td><td>0</td><td>0</td></tr><tr><td>CS</td><td>0</td><td>0</td><td>0</td></tr><tr><td>IWBA</td><td>0</td><td>0</td><td>0</td></tr><tr><td>DAWBA</td><td>0</td><td>6.77E-14</td><td>1.7116E-26</td></tr><tr><td rowspan=\"7\">F6</td><td>GDEDBA</td><td>0</td><td>0</td><td>0</td></tr><tr><td>BA</td><td>1.49E-09</td><td>8.96E-08</td><td>8.48199E-15</td></tr><tr><td>PSO</td><td>0</td><td>0</td><td>0</td></tr><tr><td>CS</td><td>0</td><td>1.1434E-25</td><td>1.4415E-49</td></tr><tr><td>IWBA</td><td>0</td><td>0</td><td>0</td></tr><tr><td>DAWBA</td><td>5.25E-13</td><td>9.11E-11</td><td>2.54143E-20</td></tr><tr><td>GDEDBA</td><td>0</td><td>0</td><td>0</td></tr><tr><td rowspan=\"8\">F7</td><td>BA</td><td>-176.54</td><td>-171.1060784</td><td>176.2489323</td></tr><tr><td>PSO</td><td>-176.54</td><td>-172.9331373</td><td>135.213922</td></tr><tr><td>CS</td><td>-176.54</td><td>-176.36676</td><td>85.762971</td></tr><tr><td>IWBA DAWBA</td><td>-176.54</td><td>-171.7623529 -174.7129412</td><td>196.5068224</td></tr><tr><td>GDEDBA</td><td>-176.54</td><td>-175.3219608</td><td>54.47850918</td></tr><tr><td></td><td>-176.54</td><td></td><td>37.07565208</td></tr><tr><td>BA</td><td>0.39789</td><td>0.39789</td><td>5.02899E-32</td></tr><tr><td>PSO</td><td>0.39789</td><td>0.39789</td><td>5.02899E-32</td></tr><tr><td rowspan=\"8\">F8</td><td>CS</td><td>0.39789</td><td>0.39789</td><td>2.87239E-32</td></tr><tr><td>IWBA</td><td>0.39789</td><td>0.39789</td><td>5.02899E-32</td></tr><tr><td>DAWBA</td><td>0.39789</td><td>0.39789</td><td>5.02899E-32</td></tr><tr><td>GDEDBA</td><td>0.39789</td><td>0.39789</td><td>5.02899E-32</td></tr><tr><td>BA</td><td>-1.0316</td><td>-1.0316</td><td>4.52609E-31</td></tr><tr><td>PSO</td><td>-1.0316</td><td>-1.0316</td><td>4.52609E-31</td></tr><tr><td>CS</td><td>-1.0316</td><td>-1.0316</td><td>4.59582E-31</td></tr><tr><td>IWBA</td><td>-1.0316</td><td>-1.0316</td><td>4.52609E-31</td></tr><tr><td rowspan=\"8\">F10</td><td>DAWBA</td><td></td><td>-1.0316</td><td>4.52609E-31</td></tr><tr><td>GDEDBA</td><td>-1.0316 -1.0316</td><td>-1.0316</td><td>4.52609E-31</td></tr><tr><td>BA</td><td>3</td><td>4.058823529</td><td>28.01647059</td></tr><tr><td>PSO</td><td>3</td><td>3</td><td>0</td></tr><tr><td>CS</td><td>3</td><td>3</td><td>0</td></tr><tr><td>IWBA</td><td>3</td><td>4.588235294</td><td>41.16705882</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>DAWBA GDEDBA</td><td>3 3</td><td>4.058823529 3</td><td>28.01647059 0</td></tr></table></body></html>",
        "page_idx": 4
    },
    {
        "type": "table",
        "img_path": "images/d6feb67538f2aa1644817add9d109c472f906774dbf0df41c3006583a364d636.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td colspan=\"5\">续表4</td></tr><tr><td>函数</td><td>算法</td><td>Best</td><td>Avg</td><td>Var</td></tr><tr><td rowspan=\"6\">F11</td><td>BA</td><td>3.5727E-04</td><td>6.9015E-01</td><td>0.477236782</td></tr><tr><td>PSO</td><td>1.8816E-123</td><td>2.6125E-110</td><td>1.9336E-218</td></tr><tr><td>CS</td><td>2.1420E-25</td><td>9.4176E-22</td><td>5.7827E-42</td></tr><tr><td>IWBA</td><td>1.1134E-51</td><td>7.9783E-46</td><td>5.51478E-90</td></tr><tr><td>DAWBA</td><td>3.5727E-04</td><td>6.9015E-01</td><td>0.477236782</td></tr><tr><td>GDEDBA</td><td>1.9677E-270</td><td>6.8276E-258</td><td>0</td></tr><tr><td rowspan=\"6\">F12</td><td>BA</td><td>1.3617E-11</td><td>8.8821E-10</td><td>6.2287E-19</td></tr><tr><td>PSO</td><td>7.0720E-161</td><td>3.1377E-148</td><td>2.1632E-294</td></tr><tr><td>CS</td><td>1.3575E-45</td><td>1.6298E-40</td><td>5.3858E-79</td></tr><tr><td>IWBA</td><td>4.7641E-76</td><td>2.9422E-69</td><td>3.1479E-136</td></tr><tr><td>DAWBA</td><td>1.3617E-11</td><td>8.8821E-10</td><td>6.2287E-19</td></tr><tr><td>GDEDBA</td><td>0</td><td>0</td><td>0</td></tr><tr><td rowspan=\"6\">F13</td><td>BA</td><td>2.7643E-09</td><td>2.3366E-07</td><td>5.09804E-14</td></tr><tr><td>PSO</td><td>2.3539E-158</td><td>1.5851E-147</td><td>1.2409E-292</td></tr><tr><td>CS</td><td>1.1081E-39</td><td>1.7153E-34</td><td>5.3844E-67</td></tr><tr><td>IWBA</td><td>1.6051E-74</td><td>4.9126E-67</td><td>1.053E-131</td></tr><tr><td>DAWBA</td><td>2.7643E-09</td><td>2.3366E-07</td><td>5.09804E-14</td></tr><tr><td>GDEDBA</td><td>0</td><td>0</td><td>0</td></tr><tr><td rowspan=\"6\">F14</td><td>BA</td><td>-1</td><td>-1</td><td>0</td></tr><tr><td>PSO</td><td>-1</td><td>-1</td><td>0</td></tr><tr><td>CS</td><td>-1</td><td>-1</td><td>0</td></tr><tr><td>IWBA</td><td>-1</td><td>-1</td><td>0</td></tr><tr><td>DAWBA</td><td>-1</td><td>-1</td><td>0</td></tr><tr><td>GDEDBA</td><td>-1</td><td>-1</td><td>0</td></tr><tr><td rowspan=\"6\">F15</td><td>BA</td><td>4.1359E-02</td><td>2.4627E-02</td><td>3.5267E-05</td></tr><tr><td>PSO</td><td>3.0380E+00</td><td>6.6265E+00</td><td>3.5508E+00</td></tr><tr><td>CS</td><td>2.0909E-04</td><td>5.9789E-04</td><td>8.0044E-08</td></tr><tr><td>IWBA</td><td>5.5066E-03</td><td>2.1726E-02</td><td>1.5174E-04</td></tr><tr><td>DAWBA</td><td>6.7472E-06</td><td>2.3829E-05</td><td>1.3612E-10</td></tr><tr><td>GDEDBA</td><td>1.1240E-121</td><td>6.3033E-117</td><td>2.7792E-232</td></tr></table></body></html>",
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/c9c5d15b5c44dc1ffbc794ab8bb31ad1f09d7d6c5c75d504b6effcf24e76303c.jpg",
        "img_caption": [
            "图4函数F1的收敛曲线"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/8511ef422de41eb03041ac4c08c304bb6b776abf873b9806c539904f418d21e8.jpg",
        "img_caption": [
            "Fig.4Convergence curves of function F1 ",
            "图5函数F2的收敛曲线",
            "Fig.5Convergence curves of function F2 "
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/4b68dc1ca1013df238377537f9cadacd3c1bdd6cc6e7187167ddcfc90ed5bb7d.jpg",
        "img_caption": [
            "图6函数F3的收敛曲线"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/546889ce72477892ec58bff90a27aad25ff75df24d0fe1c0a0f5b0028d700cbc.jpg",
        "img_caption": [
            "图7函数F4的收敛曲线Fig.7Convergence curves of function F4"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/9236729693702b8ab71964d4f6aae21e8d3071e0e7d80578fa2a07f07abdc59a.jpg",
        "img_caption": [
            "Fig.6Convergence curves of function F3 "
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/0ca14a96fe4ed8006390f269325162225ed7f40ef2fcf338b62a7fa7e5b33d3e.jpg",
        "img_caption": [
            "图8函数F5的收敛曲线Fig.8Convergence curves of function F5"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/2ab8d362f2de46df12f6ce9e27ec09e229f8142b028f0d3ba0bf437a9a0f774a.jpg",
        "img_caption": [
            "图10函数F7的收敛曲线"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/c22e6e48f736c3d1b648116e833d9ae73398dab27df3d2f81b5ef14fcb153b40.jpg",
        "img_caption": [
            "图9函数F6的收敛曲线Fig.9Convergence curves of function F6"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/db92b7bf4969ef25bb8869196bc4842a66ef6e07a15d9a02d53b43b6f6b1aef8.jpg",
        "img_caption": [
            "图11函数F8 的收敛曲线"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/9968a0cf6cca9ea578a303affdc229690b0af872a89d1765a49f45e210471553.jpg",
        "img_caption": [
            "Fig.10 Convergence curves of function F7 ",
            "Fig.11 Convergence curves of function F8 ",
            "图14函数F11的收敛曲线"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/c8128223484424f32c447c064b011cbbbdacd8809c90a4d87add23e2cef755fe.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/6b5f1839e8aa6dbdeee92616e7d4b77515d35ec98fa25265cae7c02f46e52c55.jpg",
        "img_caption": [
            "图12函数F9的收敛曲线",
            "图15函数F12的收敛曲线"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/97437ac1836cd9e708ac22ef02b50ea15ac3ec89308299ef7a38850c58a7b7c8.jpg",
        "img_caption": [
            "Fig.12Convergence curves of function F9 ",
            "图16函数F13的收敛曲线"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/57e409d8a814a62ecd9e0264d78bf7f8c24e2a5275964106feecc03a19998f38.jpg",
        "img_caption": [
            "Fig.13Convergence curves of function F10 ",
            "Fig.14 Convergence curves of function F11 ",
            "图17函数F14的收敛曲线",
            "Fig.17Convergence curves of function F14 "
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Fig.16Convergence curves of function F13 ",
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/92894b264b7a0b1dc0365645503436b2ea8c8b08ac246520526a19ee16867206.jpg",
        "img_caption": [
            "图13函数F10的收敛曲线",
            "Fig.15Convergence curves of function F12 ",
            "图18函数F15的收敛曲线Fig.18Convergence curves of function F15"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "综合以上分析，GDEDBA在处理单峰多维、多峰多维的问题上可以显示很高的收敛速度与收敛精度，并且稳定性高于其他算法，表明了改进后的算法（GDEDBA)在寻优精度、收敛速度和求解稳定性方面比其余五种算法有显著的优越性，求解性能优良。",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "4 结束语",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "针对基本蝙蝠算法后期收敛速度慢、寻优精度低、求解不稳定等不足，通过在产生局部新解的公式中加入均值为0、方差为当前迭代次数的最优解绝对值的高斯扰动项，加入步长控制因子确保扰动幅度，既提高了算法的精确搜索能力，又增加种群多样性与活跃性，进一步挖掘蝙蝠算法的仿生性能；对速度更新公式加入指数递减策略使算法迅速进入局部精确搜索，实现对基本蝙蝠算法从全局寻优到局部寻优都做了有效改进来提高算法性能。仿真结果表明，GDEDBA的寻优精度、收敛速度以及算法稳定性方面均有很大程度的提升，寻优性能优良。",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "参考文献：",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "[1]Yang Xinshe.Anew meta-heuristic bat-inspired algorithm [C]// Proc of Nature Inspired Cooperative Strategies for Optimization. Berlin Eidelberg: Springer-Verlag,2010: 65-74.   \n[2]Tsai PW,Pan JS,LiaoB Y,et al.Bat algorithm inspired algorithm for solving numerical optimization problems [J].Applied Mechanics and Materials,2012,148-149 (148): 134-137.   \n[3]李煜，裴宇航，刘景森．融合均匀变异与高斯变异的蝙蝠优化算法 [J]．控制与决策,2017,32(10):1775-1781.(LiYu,Pei Yuhang,Liu Jingsen.Bat optimal algorithm combined uniform mutation with Gaussian mutation [J].Control and Decision，2017，32 (10): 1775-1781. )   \n[4]Yang Xinshe.Bat algorithm for multi-objective optimization [J]. International Journal of Bio-Inspired Computation,2011,3(5): 267-274.   \n[5]Kang M,KimJ,Kim JM,et al.Reliable fault diagnosis for incipient low-speed bearings using fault feature analysis based on a binary bat algorithm [J].Information Sciences,2015,294 (2): 423-438.   \n[6]Abd-Elazim S M,Ali E S.Load frequency controller design via BAT algorithm for nonlinear interconnected power system [J]. Electrical Power and Energy Systems,2016,77 (5):166-177.   \n[7]Singh K,Vasant P.Elamvazuthi I,et al. PID tuning of servo motor using bat algorithm [J].Procedia Computer Science，2015,60(1): 1798-1808.   \n[8] 马邦雄，叶春明．基于蝙蝠退火算法的无等待流水线调度问题研究 [J]．数学理论与应用，2014，34(1):92-101.(Ma Bangxiong，Ye Chunming.A bat annealing algorithm for solving the no-wait flow shop scheduling problem [J].Mathematical Theory and Applications,2014, 34 (1): 92-101. )   \n[9]金伟健，王春枝．基于蝙蝠算法的云计算资源分配研究[J].计算机 应用研究,2015,32(4):1184-1187.(Jin Weijian,Wang Chunzhi. Study onbat algorithm in cloud computing resources allocation [J]. Application Research of Computers,2015,32 (4): 1184-1187.)   \n[10] Ye Zhiwei, Wang Mingwei,Liu Wei, et al.Fuzzy entropy based optimal thresholding using bat algorithm [J].Applied Soft Computing,2015,31 (6): 381-395.   \n[11]陈海挺．改进蝙蝠算法优化极限学习机的图像分类[J]．激光杂志, 2014,35 (11): 26-29.(Chen Haiting.Image classification based on extreme learning machine optimized by improved bat algorithm [J]. Laser Journal,2014,35 (11): 26-29.)   \n[12] Selim Y,Ecir U.Kücüksille.A new modification approach on bat algorithm for solving optimization problems [J].Applied Soft Computing,2015,28 (12): 259-275.   \n[13] Meng Xianbing,Liu Yu, Zhang Hengzhen,et al.A novel bat algorithm with habitat selection and doppler effect in echoes for optimization [J]. Expert Systems with Applications,2015,42 (17): 6350-6364.   \n[14] Luo Jun,Liu Liheng,Wu Xianyi.A double-subpopulation variant of the bat algorithm [J]. Applied Mathematics and Computation,2015,263 (7): algorithm for feature selection [C]// Proc of the 25th SIBGRAPI Conference on Graphics, Paterns and Images. Piscataway: IEEE Press, 2012:291-297.   \n[16] He Xingshi,Ding Wenjing,Yang Xinshe.Bat algorithm based on simulated annealing and Gaussian perturbations [J]. Neural Computing and Applications,2013,25 (2): 459-468.   \n[17]戚远航，蔡延光，蔡颢，等．旅行商问题的混沌混合离散蝙蝠算法 [J].电子学报,2016,44 (10): 2543-2547. (Qi Yuanhang,Cai Yanguang, Cai Hao,et al. Chaotic hybrid discrete bat algorithm for traveling salesman problem [J].Acta Electronica Sinica，2016，44 (10): 2543-2547.)   \n[18] Premkumar K, Manikandan B V, Speed control of Brushless DC motor using bat algorithm optimized adaptive neuro-fuzzy inference system [J]. Applied Soft Computing,2015,32 (7): 403-419.   \n[19] Shi Yuhui,Eberhart R C.Empirical study of particle swarm optimization [C]// Proc of Congress on Evolutionary Computation. Washington DC: IEEE Press,1999:1945-1949.   \n[20] Shi Yuhui,Eberhart R C.Fuzzy adaptive particle swarm optimization [C]// Proc of Congress on Evolutionary Computation.Piscataway,NJ: IEEE Press,2001: 101-106.   \n[21] Eberhart R C,Shi Yuhui. Tracking and optimizing dynamic systems with particle swarms [C]// Proc of Congresson Evolutionary Computation.Piscataway,NJ: IEEE Press,2001:101-106.   \n[22]陈贵敏，贾建援，韩琪．粒子群优化算法的惯性权值递减策略研究 [J]．西安交通大学学报，2006,40(1):53-61.(Chen Guimin，Jia Jianyuan, Han Qi. Study on the strategy of decreasing inertia weight in particle swarm optimization algorithm [J]. Journal of Xi’an Jiaotong University,2006,40 (1):53-61.)   \n[23]朱德刚，孙辉，赵嘉，等．基于高斯扰动的粒子群优化算法[J]．计 算机应用,2014,34(3):754-759.(Zhu Degang,Sun Hui,Zhao Jia,et al.Particle swarm optimization algorithm based on Gaussian disturbance [J]. Journal of Computer Applications，2014,34 (3): 754-759.)   \n[24] Jordehi AR. Chaotic bat swarm optimization (CBSO)[J]. Applied Soft Computing,2014,26 (1): 523-530.   \n[25]尚俊娜，刘春菊，岳克强，等．具有自学习能力的变异蝙蝠优化算法 及性能仿真[J]．系统仿真学报,2017,29(2):301-307.(Shang Junna, Liu Chunju,Yue Keqiang，et al.Variation bat algorithm with self-learingcapabilityand itspropertyanalysis[J].Jouralof System Simulation,2017,29 (2):301-307.)   \n[26] Kennedy J, Eberhart R.Particle swarm optimization [C]// Proc of IEEE International Conference on Neural Networks.Piscataway,NJ: IEEE Press,1995: 1942-1948.   \n[27] Yang Xinshe,Deb S.Cuckoo search via Lévy flights [C]// Proc of World Congress on Nature & Biologically Inspired Computing. Piscataway,NJ: IEEE Press,2009:210-214.   \n[28]宋一民．基于改进蝙蝠算法的物流中心选址问题研究[D].开封：河 南大学,2017. (Song Yimin. Research on logistics center location based on improved bat algorithm [D]. Kaifeng: Henan University,2017.)   \n[29]裴宇航，刘景森，李煜．一种动态调整惯性权重的自适应蝙蝠算法 [J].计算机科学,2017,44(6):240-244.(Pei Yuhang,Liu Jingsen,Li Yu.An adaptive bat algorithm with dynamically adjusting inertia weight [J].Computer Science,2017,44(6): 240-244.） ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 6
    }
]