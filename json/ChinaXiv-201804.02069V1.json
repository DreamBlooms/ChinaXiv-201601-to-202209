[
    {
        "type": "text",
        "text": "多模态多目标差分进化算法求解非线性方程组",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "许伟伟‘，梁静1，岳彩通1，瞿博阳²(1．郑州大学 电气工程学院，郑州 450001;2.中原工学院 电子信息学院，郑州 450007)",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "摘要：针对当前算法在求解非线性方程组时面临解的个数不完整、精确度不高、收敛速度慢等问题进行了研究，提出一种多模态多目标差分进化算法。首先将非线性方程组转换为多模态多目标优化问题，初始化一个随机种群并对种群中全部个体进行评价;然后通过非支配解排序和决策空间拥挤距离选择机制，挑选种群中的一半优质个体进行变异；接着在变异过程中采用一种新的变异策略和边界处理方法以增加解的多样性；最后通过交叉和选择机制使优质个体进行进化，直到搜索到全部最优解。在所选测试函数集和工程实例上的实验结果表明，该算法能有效地搜索到非线性方程组的解，并通过与当前四个算法进行比较，该算法在解的数量和成功率上具有优越性。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "关键词：非线性方程组；多模态；多目标；差分进化；非支配解排序 中图分类号：TP183 doi:10.3969/j.issn.1001-3695.2017.11.0734 ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Multimodal multi-objective differential evolution algorithm for solving nonlinear equations ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Xu Weiwei1, Liang Jingl, Yue Caitong1, Qu Boyang² (1.SchoolofElectricalEngineering,ZhenghouUniversityZhengzhou4o,China;2.hooloflectronic&fotion Engineering,Zhongyuan University of Technology,Zhengzhou 45oo07, China) ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Abstract: Aimingathe problemssuchas incomplete solutions,lowaccuracyandslowconvergence speed ofcurrent algorithms insolving nonlinearequations,this paperproposedamultimodal ulti-objectivediferentialevolutionalgorithm.Firstly,it transformed thenonlinear equations intomultimodalmulti-objectiveoptimizationproblems,andinitializedarandompopulation and evaluated allindividuals in the population.Throughthe non-dominated sortingand decision spacecrowding distance selection mechanism,itselectedhalfof theindividuals inthepopulation to mutate.Then itusedanewmutationstrategyand boundary processng methodto increase thediversityofsolutions.Finallyitevolvedthe high-quality individuals through crosoverandselectionmechanismuntil itfoundallteoptimal solutions.The experimentalresultson selected test function setsand enginering examples showthat te algorithmcan efectivelysearch foroptimalsolutionsanditis superiortotheother four algorithms in the number of solutions and success rate. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Key words: nonlinear equations; multimodal; multi-objective; diferential evolution; non-dominated sorting ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "0 引言",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "非线性方程组的求解一直以来都是数学学科中的一个难题。在实际生活中，很多物理、生物、工业里复杂的问题都可以看做是非线性方程组问题[12]。考虑到非线性方程组本身的复杂性，如何有效地获得非线性方程组的所有解已成为目前研究的主要目标。传统数学方法如牛顿法、拟牛顿法、欧拉法、复合形法、梯度法、迭代法、共轭方向法、混沌法、最速下降法、单纯型法等，大多对问题的初始值具有很严格的要求；另外对于某些导数不存在或是导数难求的方程，传统数学方法也具有一定的局限性。与传统数学方法相比，进化算法是一种成熟的具有高鲁棒性和广泛适用性的全局优化方法，具有自组织、自适应、自学习的特性，能够不受问题性质的限制，有效地处理传统数学方法难以解决的复杂问题。因此，利用进化算法求解非线性方程组已成为当前一个重要的研究方向。目前应用于求解非线性方程组的主要进化算法有遗传算法[、差分进化算法[4、人工鱼群算法、人工蜂群算法[、人工萤火虫算法、布谷鸟算法[]等。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "差分进化算法作为当前流行的进化算法之一，由于其容易实现、可控参数少等特点，已经被一些研究学者用来求解非线性方程组。陈海霞等人提出将非线性方程组转换为一个不可微优化问题，并用光滑函数代替不可微的极大值函数，最终结果表明该算法在求解非线性方程组的准确性和有效性上均优于其他同期算法。针对差分进化算法进化后期收敛缓慢和稳定性不强的缺陷，刘利斌等人\"将拟牛顿法插入到差分进化算法当中，有效提高了差分进化算法的收敛速度和鲁棒性。封全喜等人\"通过代理约束概念和修正极大熵函数，将非线性方程组转换为无约束优化函数并利用自适应正交差分进化算法求解，验证了所提算法的有效性。",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "上述算法在一定程度上实现了非线性方程组的求解，但仍然存在所得解的个数不完整、精确度不高、收敛速度慢等问题。为解决这些问题，本文提出了一种多模态多目标差分进化算法。首先将种群初始化并计算每个个体的适应度值，然后通过一种预选择机制将优质个体筛选进行变异，接着在变异过程中采用新的变异策略和边界处理办法提高搜索解的多样性，最后经过交叉选择优质个体进行多次进化，最终搜索到全部最优解。实验结果表明，该算法能够有效提高非线性方程组的解的数量和质量。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1 问题描述和转换方法",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "一般地，一个非线性方程组可以被描述如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { c } { f _ { 1 } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) = 0 } \\\\ { f _ { 2 } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) = 0 } \\\\ { \\vdots } \\\\ { f _ { m } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) = 0 } \\end{array} \\right.\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "其中： $m$ 代表方程的个数； $n$ 代表决策变量的个数。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "进化算法在求解非线性方程组时需要将非线性方程组转换为优化问题。当前转换的方法主要单目标优化、约束优化和多目标优化有三种。第一种是将非线性方程组转换为单目标优化问题，它的形式如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\operatorname* { m i n } P ( x ) = \\sum _ { i = 1 } ^ { m } \\Bigl | f _ { i } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\Bigr |\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "或者",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\operatorname* { m i n } P ( x ) = \\sum _ { i = 1 } ^ { m } { f _ { i } } ^ { 2 } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } )\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "第二种是将非线性方程组转换为约束优化问题，它的形式如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { l l } { \\displaystyle { \\operatorname* { m i n } _ { { \\bf \\Pi } } P ( x ) = \\sum _ { i = 1 } ^ { m } \\left| f _ { i } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\right| } } \\\\ { \\displaystyle { \\mathrm { s u b j e c t ~ t o } f _ { i } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) ~ \\geq 0 , i = 1 , 2 , . . . , m } } \\end{array} \\right.\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "这两种转换方法的共同点是都有一个优化目标，得出的结果是一个最优解。而要想同时找到多个最优解，需要采用第三种转换方法：多目标优化。当前将非线性方程组转换为多目标优化问题的形式主要有三类，第一类是直接转换法，它的表达式如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { \\left\\{ \\begin{array} { l l l } { \\operatorname* { m i n } } & { g _ { 1 } ( x ) = \\big | f _ { 1 } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\big | } \\\\ { \\operatorname* { m i n } } & { g _ { 2 } ( x ) = \\big | f _ { 2 } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\big | } \\\\ & { \\qquad \\vdots } \\\\ { \\operatorname* { m i n } } & { g _ { m } ( x ) = \\big | f _ { m } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\big | } \\end{array} \\right. } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "该方法将方程组中每一个方程都当成一个优化目标，简单方便。但随着方程个数的增多，求解的复杂度将会增大。因此该方法只适用于具有少量方程的非线性方程组的求解。第二类方法是双目标转换法，它的表达式如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { l l } { \\displaystyle \\operatorname* { m i n } f _ { 1 } ( x ) = x _ { 1 } + \\sum _ { i = 1 } ^ { m } \\left| f _ { i } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\right| } \\\\ { \\displaystyle \\operatorname* { m i n } f _ { 2 } ( x ) = 1 - x _ { 1 } + \\sum _ { i = 1 } ^ { m } \\left| f _ { i } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\right| } \\end{array} \\right.\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "该方法将线性方程与单目标优化方程结合，把非线性方程组的解转换成线性Pareto前沿上的解，直观有效。但是由于选择机制的作用容易造成部分解的丢失。第三类方法是多权值双目标转换法，它的表达式如下：",
        "page_idx": 1
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { l l } { \\displaystyle \\operatorname* { m i n } \\ f _ { 1 } ( x ) = \\frac { \\displaystyle \\sum _ { i = 1 } ^ { n } \\omega _ { i } x _ { i } } { \\displaystyle \\sum _ { i = 1 } ^ { n } \\omega _ { i } } + \\sum _ { i = 1 } ^ { m } \\left| f _ { i } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\right| } \\\\ { \\displaystyle \\operatorname* { m i n } \\ f _ { 2 } ( x ) = 1 - \\frac { \\displaystyle \\sum _ { i = 1 } ^ { n } \\omega _ { i } x _ { i } } { \\displaystyle \\sum _ { i = 1 } ^ { n } \\omega _ { i } } + \\sum _ { i = 1 } ^ { m } \\left| f _ { i } ( x _ { 1 } , x _ { 2 } , x _ { 3 } , . . . , x _ { n } ) \\right| } \\end{array} \\right.\n$$",
        "text_format": "latex",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "该方法在双目标转换法的基础上对每一个未知变量都设定一个权值，能够有效避免最优解的丢失。因此，本文采用多权值双目标转换法求解非线性方程组。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2 标准差分进化算法",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "差分进化算法是一门新兴的进化计算技术，主要用于求解连续变量的全局优化问题。该算法通过变异、交叉、选择三种操作不断地迭代计算，保留优良个体，淘汰劣质个体，直到找到全局最优解。差分进化算法具有操作简单、控制参数少、易编程实现等优点，同时它又尤其适合求解多变量、非凸、多峰以及非线性优化问题。其基本的算法流程如下：",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "a)初始化种群个体和相关参数。主要包括种群大小、交叉率、缩放因子、最大评价次数和终止条件等。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "b)变异。通过变异策略将当前个体进行变异。具体操作是通过把种群中两个成员之间的加权差向量加到第三个成员上，以此来产生新参数向量，从而产生新个体。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "c)交叉。变异向量的参数与另外预先确定的目标向量参数按一定规则混合来产生实验向量。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "d)选择。若实验向量的适应度值比目标向量的适应度值好，实验向量就在下一代中代替目标向量；否则，保留目标向量。对每一个体都进行选择以此得到新种群。",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "e)循环。直到满足终止条件，停止。 ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "3 多模态多目标差分进化算法",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "多模态多目标优换问题，是指在决策空间中至少有两个",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Pareto解集对应目标空间上的同一个Pareto前沿。如图1所示，决策空间上的Pareto 解集1和Pareto 解集2同时对应目标空间上的同一条Pareto 前沿。",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/7e74435507ce37c43e03af2edb27727ff3e602bd1382091a65ec673c783b2cff.jpg",
        "img_caption": [
            "图1多模态多目标问题"
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "而非线性方程组中也有一些解的分布情况与多模态多目标问题中的情况类似。基于这种思想，本文提出了一种多模态多目标差分进化算法（MMODE)。MMODE在标准差分进化算法基础上又增加了一种个体预选择机制和一个变异边界处理方法，这样可以有效提高搜索精度和效率。它的具体步骤如下：",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "a)初始化。生成一个种群大小为 $N$ 的随机种群 $P$ ，将缩放因子、交叉率、最大评价次数等赋初始值。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "b)评价。利用评价函数评价 $P$ 中每一个个体。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "c)预选择机制。在目标空间中使用非支配解排序和决策空间中使用拥挤距离选择方法，选择前 $50 \\%$ 的优良个体并将其放入 $\\varrho$ 中。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "d)变异。对 $\\varrho$ 中的每一个个体采用DE/rand/2 策略进行变异。解决变异边界问题的方法具体参见3.2节。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "e)交叉。利用二进制交叉算子产生子种群 $R$ 。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "f)选择。在目标空间中使用非支配解排序和拥挤距离选择机制，选择 $N$ 个个体进入下一代。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "g)循环。如果满足终止条件，停止并返回全部最优解，否则重新返回步骤c)。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3.1个体预选择机制",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "在变异之前，通过设计一种个体预选择机制，将初始种群进行预处理，优先挑选Pareto最优前沿和决策空间中拥挤距离较大的解，这样可以有效增加所得解的多样性。预选择机制的过程如图2所示。首先将种群 $P$ 中每个个体的适应度值经过非支配解排序得出排名F1、F2、F3等，颜色越深代表Pareto 前沿排序越靠前；接着利用拥挤距离选择机制保留临界个体并舍弃拥挤距离小的个体；然后得到种群 $\\boldsymbol { \\mathscr { Q } }$ ，并利用种群 $\\varrho$ 进行变异。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3.2变异边界处理方法",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "为了提高种群多样性并保证足够的搜索范围，本文采用DE/rand/2进行变异。其表达式为",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\nV _ { i , G } = X _ { r _ { 1 } ^ { i } , G } + F ^ { * } ( X _ { r _ { 2 } ^ { i } , G } - X _ { r _ { 3 } ^ { i } , G } ) + F ^ { * } ( X _ { r _ { 4 } ^ { i } , G } - X _ { r _ { 5 } ^ { i } , G } )\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "其中： $X _ { r _ { 1 } ^ { i } , G } \\setminus X _ { r _ { 2 } ^ { i } , G } \\setminus X _ { r _ { 3 } ^ { i } , G } \\setminus X _ { r _ { 4 } ^ { i } , G }$ 和 $X _ { r _ { 5 } ^ { i } , G }$ 是从 $\\left[ 1 , N \\right]$ 中随机生成的整数，且 $r _ { 1 } ^ { i } \\neq r _ { 2 } ^ { i } \\neq r _ { 3 } ^ { i } \\neq r _ { 4 } ^ { i } \\neq r _ { 5 } ^ { i } \\neq i$ 。缩放因子 $F$ 的取值是[0,1]。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/d96893b9a1ca8f19d96099ed9abebda4a0aaca96dce1e18f4cdc011a34580740.jpg",
        "img_caption": [
            "图2个体预选择机制"
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "就传统差分进化算法而言，对于超出了搜索边界的个体往往将其置为边界值。而对于MMODE，该算法加入了一种新的边界处理方法。它将停留在边界上的个体重新分布在整个决策空间中，目的是在搜索过程中保证解的多样性。这种新的变异策略表达式如下：",
        "page_idx": 2
    },
    {
        "type": "equation",
        "text": "$$\nV _ { i , G } = X _ { r _ { i } ^ { i } , G } - F ^ { * } ( X _ { r _ { i } ^ { i } , G } - X _ { r _ { i } ^ { i } , G } ) - F ^ { * } ( X _ { r _ { i } ^ { i } , G } - X _ { r _ { i } ^ { i } , G } )\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "若采用这种变异策略变异后新个体仍然超出边界，就将该个体随机分布在种群中。变异过程中的个体有三种情况，如图3所示。对于情况1，因为不出边界，直接采用式（8）进行变异，变异前个体 $P$ 变异成个体 $P _ { 1 }$ ；对于情况2，首先采用式（8）进行一次变异，所得变异个体超出边界，此时利用变异策略式（9）重新进行二次变异，新变异个体没有超出边界，所以个体$P$ 变异成个体 $P _ { 1 }$ 后再次变异成个体 $P _ { 2 }$ ；对于情况3，二次变异之后仍然超出边界，将个体重置为种群内随机个体，因此个体$P$ 变异成个体 $P _ { 1 }$ 再次变异成个体 $P _ { 2 }$ ，最后设置为种群中的随机个体 $o$ 。",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/52c94575f24a061c20fb14ac370e2506042ee91a4c555890eb3c6da9f1f04145.jpg",
        "img_caption": [
            "图3变异边界的三种情况和处理方法"
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "4 实验及结果",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "4.1测试函数描述",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "为了测试MMODE的有效性，选择文献[12]中的五个测试函数进行测试，分别是F12、F15、F19、F27、F38。这五个测试函数解的个数如表1所示。这五个测试函数的数学表达式和解的具体信息如下：",
        "page_idx": 3
    },
    {
        "type": "table",
        "img_path": "images/72eb8bc6e7c1d825cef9d781a43ceb50e1e4c445077b9b001c94b8766a47b744.jpg",
        "table_caption": [
            "表1被测试的五个非线性方程组"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>函数</td><td>F12</td><td>F15</td><td>F19</td><td>F27</td><td>F38</td></tr><tr><td>解</td><td>10</td><td>16</td><td>4</td><td>12</td><td>4</td></tr></table></body></html>",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "问题1(F12)：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { \\left\\{ \\begin{array} { l l } { \\sin ( x _ { 1 } ^ { 3 } ) - 3 x _ { 1 } x _ { 2 } ^ { 2 } - 1 = 0 } \\\\ { \\cos ( 3 x _ { 1 } ^ { 2 } x _ { 2 } ) - \\left| x _ { 2 } ^ { 3 } \\right| + 1 = 0 } \\end{array} \\right. } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "其中： $x _ { i } \\in \\left[ - 2 , 2 \\right] , i = 1 , . . . , n , n = 2$ 。该方程组有10个解，分别是(-1.81089,-0.34909)，(-1.81089,0.34909)，(-1.50222,-0.40908)(-1.50222,0.40908），(-1.79130,0.30193)，(-1.79130,-0.30193)(-0.94727,0.78502），(-0.94727,-0.78502），(-0.21306,1.25685)(-0.21306,-1.25685）。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "问题2（F15)：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r l } & { [ x _ { 1 } ^ { 2 } + x _ { 2 } ^ { 2 } - 1 . 0 = 0  } \\\\ & {  [ x _ { 3 } ^ { 2 } + x _ { 4 } ^ { 2 } - 1 . 0 = 0   } \\\\ & {   x _ { 5 } ^ { 2 } + x _ { 6 } ^ { 2 } - 1 . 0 = 0   } \\\\ & {   x _ { 7 } ^ { 2 } + x _ { 8 } ^ { 2 } - 1 . 0 = 0   } \\\\ & {   x _ { 9 } ^ { 2 } + x _ { 8 } ^ { 2 } - 1 . 0 = 0   } \\\\ & {   + 4 . 7 3 1 \\times 1 0 ^ { 3 } x _ { 1 . 8 } - 0 . 3 5 7 8 x _ { 3 . 8 } - 0 . 1 2 3 8 x _ { 1 } + x _ { 7 }  } \\\\ & {   - 1 . 6 3 7 9 + 1 0 ^ { 3 } x _ { 2 . 0 } - 0 . 9 3 3 8 x _ { - } - 0 . 3 5 7 1 = 0   } \\\\ & {   0 2 2 3 8 x _ { 1 . 5 } + 0 . 7 6 2 3 \\ x _ { 2 . 7 } + 0 . 2 6 3 8 x _ { 1 } - x _ { 7 }   } \\\\ & {   - 0 . 0 7 7 4 5 x _ { 2 . 0 } - 0 . 6 7 3 4 x _ { 4 . 8 } - 0 . 6 0 2 2 = 0   } \\\\ & {    x _ { 6 } x _ { 1 . } + 0 . 3 5 7 8 x _ { 1 . } + 4 . 7 3 1 ^ { * } 1 0 ^ { 3 } x _ { 2 . 0 } - 0    } \\\\ & {   - 0 . 7 6 2 3 x _ { 1 . } + 0 . 2 3 8 x _ { 2 } + 0 . 3 4 6 1 = 0   } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "中： $x _ { i } \\in \\left[ - 1 , 1 \\right] , i = 1 , . . . , n , n = 8$ 。该方程组有16个解，分别是 (0.1644,-0.9864,-0.9471,-0.321,-0.9982,-0.0594,0.411,0.9116), (0.1644,-0.9864,-0.9471,-0.321,-0.9982,0.0594,0.411,-0.9116), (0.1644,-0.9864,-0.9471,-0.321,0.9982,-0.0594,0.411,0.9116), (0.1644,-0.9864,-0.9471,-0.321,0.9982,0.0594,0.411,-0.9116), (0.1644,-0.9864,0.7185,-0.6956,-0.998,-0.0638,-0.5278,0.8494), (0.1644,-0.9864,0.7185,-0.6956,-0.998,0.0638,-0.5278,-0.8494), (0.1644,-0.9864,0.7185,-0.6956,0.998,-0.0638,-0.5278,0.8494), (0.1644,-0.9864,0.7185,-0.6956,0.998,0.0638,-0.5278,-0.8494), (0.6716,0.741,-0.6516,-0.7586,-0.9625,-0.2711,-0.4376,0.8992), (0.6716,0.741,0.6516,-0.7586,-0.9625,02711,-0.4376,-0.992), (0.6716,0.741,-0.6516,-0.7586,0.9625,-0.2711,-0.4376,0.8992), (0.6716,0.741,0.6516,-0.7586,0.9625,0.2711,0.4376,-0.8992), (0.6716,0.741,0.9519,-0.3064,-0.9638,-0.266,0.4046,0.9145), (0.6716,0.741,0.9519,-0.3064,-0.9638,0.2666,0.4046,-0.9145), (0.6716,0.741,0.9519,-0.3064,0.9638,0.2666,0.4046,-0.9145), (0.6716,0.741,0.9519,-0.3064,0.9638,-0.2666,0.4046,0.9145）。 ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "问题3（F19)：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ { \\begin{array} { l } { x _ { 1 } ^ { 2 } + x _ { 2 } ^ { 2 } - 2 = 0 } \\\\ { x _ { 1 } ^ { 2 } + x _ { 2 } ^ { 2 } / 4 - 1 = 0 } \\end{array} } \\right.\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "其中： $x _ { i } \\in \\left[ - 2 , 2 \\right] , i = 1 , . . . , n , n = 2$ 。该方程组有4个解，分别是(-0.8165,-1.1547)，(0.8165,-1.1547)，(-0.8165,1.1547)，(0.8165,1.1547)。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "问题4（F27)：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { l l } { 5 x _ { 1 } ^ { 9 } - 6 x _ { 1 } ^ { 5 } x _ { 2 } ^ { 2 } + x _ { 1 } x _ { 2 } ^ { 4 } + 2 x _ { 1 } x _ { 3 } = 0 } \\\\ { - 2 x _ { 1 } ^ { 6 } x _ { 2 } + 2 x _ { 1 } ^ { 2 } x _ { 2 } ^ { 3 } + 2 x _ { 2 } x _ { 3 } = 0 } \\\\ { x _ { 1 } ^ { 2 } + x _ { 2 } ^ { 2 } - 0 . 2 6 5 6 2 5 = 0 } \\end{array} \\right.\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "其中 $x _ { 1 } \\in \\left[ - 0 . 6 , 6 \\right] , x _ { 2 } \\in \\left[ - 0 . 6 , 0 . 6 \\right] , x _ { 3 } \\in \\left[ - 5 , 5 \\right]$ 。该方程组有12个解，分别是",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "(0.27986,0.43279,-0.01419)，(0.27986,-0.43279,-0.01419)， (-0.27986,0.43279,-0.01419),(-0.27986,-0.43279,-0.01419)， (0.46698,0.21807,0.00000),(-0.46698,0.21807,0.00000), (0.46698,-0.21807,0.00000),(-0.46698,-0.21807,0.00000), (0.00000,0.51539,0.00000），(0.00000,-0.51539,0.00000), (0.51539,0.00000,-0.01245),(-0.51539,0.00000,-0.01245）。 ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "问题5（F38)：",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ { \\begin{array} { l } { x _ { 1 } ^ { 4 } + 4 x _ { 2 } ^ { 4 } - 6 . 0 = 0 } \\\\ { x _ { 1 } ^ { 2 } x _ { 2 } - 0 . 6 7 8 7 = 0 } \\end{array} } \\right.\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "其中： $x _ { 1 } \\in \\left[ - 2 , 2 \\right]$ $x _ { 2 } \\in$ [0,1.1]。该方程组有4个解，分别是(-1.56353,0.27763) (-0.78971,1.08830) (1,56353,0.27763)(0.78971,1.08830)。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "4.2评价指标",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "对于有限解的非线性方程组，需要在算法运行结束后确定已搜索到解的个数。以其中一个解为例，如果算法获得的解与已知最优解的欧氏距离小于预先设定的精确度 $\\varepsilon$ ，就认为该最优解已经找到。这里将精确度设为",
        "page_idx": 3
    },
    {
        "type": "equation",
        "text": "$$\n\\varepsilon = \\left\\{ { 0 . 0 1 \\atop 0 . 1 } { n \\leq 5 } \\right.\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "其中： $n$ 为未知数的个数。算法获得的解的个数与所有最优解的个数之间的比值称为峰比率，用PR表示， $P R$ 代表单次运行中找到最优解的平均概率。如果全部最优解都能在一次运行中找到，那么就称为一次成功的运行。成功运行的次数与全部运行总次数之间的比值称为成功率，用 $S R$ 表示， $S R$ 代表单次运行成功找到全部最优解的平均概率。本文采用 $P R$ 和SR两个性能指标来评价当前算法的性能，它们的值越大，就说明算法的性能越好。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "4.3比较算法",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "与本文所提出的MMODE比较的算法如下：",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "a)A-WeB。该算法由Gong等人[于2017年提出，主要是用多权值双目标转换技术求解非线性方程组的最优解。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "b)DN-NSGAII。该算法由Yue 等人[13]于2016 年提出，主要是用决策空间非支配解排序算法求解多模态多目标优化问题。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "c)NSGAII。该算法由Deb 等人[4]于2002 年提出，用于求解非支配解排序的问题。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "d)Omni-Opt。该算法由Deb 等人[15]于2005 年提出，用于改",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "善搜索解在决策空间的分布。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "4.4参数设置 ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "在实验中参数设置如下：种群大小 $N P = 1 0 0$ ，最大评价次数$\\operatorname* { m a x } F E S = 5 0 0 0 0$ ，缩放因子 ${ F = } 0 . 5$ ，交叉率 $C r = 0 . 9$ 。为保证比较的公平性，所有算法的种群大小、最大评价次数等参数均保持相等。每种算法均独立运行51次，结果取平均值。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "4.5 实验结果和分析",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "为避免偶然性，首先将第26次所提MMODE 算法搜索到的非线性方程组的解的情况输出，其中问题 $1 { \\sim } 5$ 的所有解在决策空间和目标空间的分布如图4所示。从图4(a)可以看出，对于有2个决策变量的问题1，在决策空间和目标空间上，10个解都能够找到，而且搜索到的解与真实最优解之间比较接近，可以看出MMODE对于问题1解决的比较好，它的10个最优解全部都能搜索到；从（b）可以看出，对于有8个决策变量的问题2，由于维度的限制，这里给出了前两维的图形，在决策空间上，搜索到的解都分布在16个最优解的周围，而在目标空间上，搜索到的解与真实最优解之间还有一定的差距，可以看出 MMODE对于问题2解决的并不好，它的16个最优解还不能很好的搜索到，说明MMODE对于决策变量较多的问题2的求解上仍然还有待改进；从（c）可以看出，对于有2个决策变量的问题3，在决策空间和目标空间上，4个解都能够找到，而且搜索到的解与真实最优解之间比较接近，不过仍存在一些与真实最优解相距较远的搜索解，可以看出MMODE对于问题3解决的比较好，它的4个最优解全部都能搜索到，但是搜索到的全部解还不能完全地趋近真实最优解；从（d）可以看出，对于有3个决策变量的问题4，在决策空间和目标空间上，12个真实最优解只有8个能够被找到，另外4个最优解与搜索到的解还有一些差距，可以看出MMODE对于问题4只能搜索到一部分真实最优解；从（e）可以看出，对于有2个决策变量的问题5，在决策空间和目标空间上，4个真实最优解都能被很好地找到，可以看出MMODE对于问题5的求解表现的比较好。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "接下来，将MMODE 算法与A-WeB、DN-NSGAII、NSGAII和Omni-Opt算法在峰值率上进行比较，详细结果如表2所示。从表2可以看出，对于问题1，MMODE 在峰比率PR上数值最大，A-WeB 排第二，A-WeB 和 MMODE 相差不大,NSGAII、Omni-Opt和DN-NSGAII分别排在第三到第五，说明MMODE平均搜索到解的个数比其他算法更多；对于问题2，MMODE在峰比率PR 上数值最大,A-WeB 排在第二,NSGAII、DN-NSGAII和Omni-Opt分别排在第三到第五，与前两名相差较多，说明MMODE平均搜索到的解的个数比其他算法更多，并且效果比其他算法表现更好；对于问题3，MMODE 在峰比率PR上数值为1，A-WeB、NSGAII、DN-NSGAII 和 Omni-Opt分别排在第二到第五，但与 MMODE 相差不大，说明 MMODE 每次都能够搜索到全部最优解，其他四种算法也可以搜索到绝大部分的最优解；对于问题4，MMODE在峰比率PR上数值最大，Omni-Opt、DN-NSGAII、NSGAII和A-WeB和分别排在第二到第五，说明 MMODE 在五个算法比较上表现最好，但是全部算法平均搜索到的最优解并不多；对于问题5，MMODE和A-WeB在峰比率PR上数值均为1,NSGAII排在中间,DN-NSGAII和Omni-Opt的PR值一样大，排在最后，说明MMODE和A-WeB每一次都能够搜索到全部最优解，其他三个算法可以搜索到大部分的最优解。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/604fbca023ced602b1a162a2380bd45949f9e40de1d6fe008a0de5b96d1993b1.jpg",
        "img_caption": [
            "(a)问题1的10个最优解在决策空间和目标空间的分布"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/f4a221622d6a6db4647b9c05c61f8166a0c44db8a91afe710b028b703b550797.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/a75b1876ee6aa48f56d134ee3fb98a49a6d5e01f192ab68b703473b27ba539c9.jpg",
        "img_caption": [
            "(b)问题2的16个最优解在决策空间和目标空间的分布"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/ddd5e105074109e79462b8016faf56470f76f48413530eb6f77e1352a07f4c7f.jpg",
        "img_caption": [
            "(c)问题3的4个最优解在决策空间和目标空间的分布"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/18572027cabc1e525b489cfdf716deb28e18aa2ad796b12fb498470fb396686d.jpg",
        "img_caption": [
            "(d)问题4的12个最优解在决策空间和目标空间的分布 ",
            "(e)问题5的4个最优解在决策空间和目标空间的分布图4问题 $1 { \\sim } 5$ 的所有解在决策空间和目标空间的分布"
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "table",
        "img_path": "images/002c52cdff5da181c768447e17a6d024f1fbec5fdc4087f4c674d16ea3e02596.jpg",
        "table_caption": [
            "表2MMODE 和四个算法在问题1-5上的峰比率 PR"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>算法</td><td>问题1</td><td>问题2</td><td>问题3</td><td>问题4</td><td>问题5</td></tr><tr><td>MMODE</td><td>0.8980</td><td>0.7350</td><td>1.0000</td><td>0.3967</td><td>1.0000</td></tr><tr><td>A-WeB</td><td>0.8880</td><td>0.6688</td><td>0.9950</td><td>0.0933</td><td>1.0000</td></tr><tr><td>DN-NSGAII</td><td>0.4080</td><td>0.0850</td><td>0.9650</td><td>0.2800</td><td>0.7100</td></tr><tr><td>NSGAII</td><td>0.6400</td><td>0.0888</td><td>0.9800</td><td>0.2783</td><td>0.7250</td></tr><tr><td>Omni-Opt</td><td>0.5020</td><td>0.0725</td><td>0.9550</td><td>0.2900</td><td>0.7100</td></tr></table></body></html>",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "为了避免单独比较峰值率造成的偏差，现在将五种算法在成功率上进行比较，详细结果如表3所示。从表3可以看出，对于问题1，MMODE和A-WeB在成功率 SR上数值一样，排在第一，DN-NSGAII、NSGAII 和 Omni-Opt 数值为零，说明MMODE和A-WeB成功找到全部最优解的次数最多，但是成功率并不高；对于问题2，MMODE 排在第一，其他四种算法成功率均为零，说明MMODE可以找到全部最优解，但是成功率非常低;对于问题3,MMODE成功率是1,A-WeB、NSGAII、DN-NSGAII和Omni-Opt分别排在第二到第五，说明MMODE每次运行都可以成功找到全部最优解；对于问题4，A-WeB成功率排在第一，MMODE、DN-NSGAII、NSGAII 和Omni-Opt成功率均为零，说明MMODE每次运行都不能成功找到全部最优解；对于问题5，MMODE和A-WeB排在第一，并且成功率都是1，NSGAII、DN-NSGAII和Omni-Opt 依次排在后三位，与前两名相差较大，说明MMODE和A-WeB每次运行都能成功找到全部最优解。",
        "page_idx": 5
    },
    {
        "type": "table",
        "img_path": "images/591b44c5944761520b620490020cae6c183185bc0c625184ae7c3f30c245b7e0.jpg",
        "table_caption": [
            "表3MMODE和四个算法在问题1-5上的成功率 SR"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>算法</td><td>问题1</td><td>问题2</td><td>问题3</td><td>问题4</td><td>问题5</td></tr><tr><td>MMODE</td><td>0.2800</td><td>0.0400</td><td>1.0000</td><td>0.0000</td><td>1.0000</td></tr><tr><td>A-WeB</td><td>0.2800</td><td>0.0000</td><td>0.9800</td><td>0.0933</td><td>1.0000</td></tr><tr><td>DN-NSGAII</td><td>0.0000</td><td>0.0000</td><td>0.8600</td><td>0.0000</td><td>0.0600</td></tr><tr><td>NSGAII</td><td>0.0000</td><td>0.0000</td><td>0.9200</td><td>0.0000</td><td>0.0800</td></tr><tr><td>Omni-Opt</td><td>0.0000</td><td>0.0000</td><td>0.8200</td><td>0.0000</td><td>0.0400</td></tr></table></body></html>",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "综合表2和3可以看出，对于大部分测试问题，MMODE在峰比率和成功率上的结果比其他四种算法表现更好，说明MMODE在求解非线性方程组问题上是有效的。",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "另外，为了更好地观察实验数据的分布，对其中的四种算法的峰值率PR 所对应的盒形图表示如图5所示。其中横坐标1、2、3、4分别代表MMODE、DN-NSGAII、NSGAII、Omni-Opt四种算法，纵坐标代表峰值率PR值。从图5可以看出，对于问题 $1 { \\sim } 4$ ，MMODE和其他三种算法的波动范围大致相同，但峰值率的均值比其他三种算法更大；对于问题3，四种算法的峰值率波动性比较小，峰值率都接近于1，但是MMODE 比其他三种算法更加稳定，每次都可以找到全部最优解；对于问题5，四种算法的峰值率波动性也比较小，但MMODE的峰值率可以一直保持为1，这比其他三种算法长期保持在0.7附近效果更好。因此，从盒形图上看，MMODE在大部分问题上比其他算法表现更好。",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "为了进一步比较MMODE算法对其他四种算法的优势，这里使用Wilcoxon秩和检验进行分析。因为考虑到搜索到的非线性方程组解的平均数量是当前判断算法好坏的重要标志，所以这里检验的对象是MMODE和其他四种算法的全部51次峰值率。通过进行Wilcoxon 秩和检验，比较结果如表4所示，其中全部检验结果都是在显著性水平为0.05下进行的。从表4可以看出，与MMODE比较的四种算法得到的 $P$ 值都远远小于0.05，",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "MMODE的显著性优势从小到大依次是A-WeB、NSGAII、Omni-Opt和DN-NSGAII，说明MMODE 算法显著性地优于其他四种算法。",
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/7fc580784e94052e2e5e62cd1459f03dd9c68040d74918f35c62a74f6a042b30.jpg",
        "img_caption": [
            "图5四种算法的盒形图"
        ],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "table",
        "img_path": "images/60d4219a8e88c80cd577d35583a9997111c69368b7627b2a3c65334451bd81fe.jpg",
        "table_caption": [
            "表4MMODE 和四个算法在问题 $1 { \\sim } 5$ 上的Wilcoxon 秩和检验结果"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>MMODE VS</td><td>P值</td></tr><tr><td>A-WeB</td><td>3.7429e-13</td></tr><tr><td>DN-NSGAII</td><td>6.0879e-25</td></tr><tr><td>NSGAII</td><td>4.4421e-19</td></tr><tr><td>Omni-Opt</td><td>4.4891e-24</td></tr></table></body></html>",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "5 应用",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "非线性方程组在工程中也有广泛的应用，比如可以用来建立两个连续的非绝缘搅拌釜式反应器的数学模型，从而得出系统稳定后两个反应器的温度[1。这些反应往往处在一个稳定可循环的状态，并且是一个一阶不可逆的放热反应。忽略个别因素的影响，该反应器的数学模型构建如下：",
        "page_idx": 5
    },
    {
        "type": "equation",
        "text": "$$\n\\left\\{ \\begin{array} { l l } { f _ { 1 } = ( 1 - R ) \\displaystyle { \\left[ \\frac { D } { 1 0 ( 1 + \\beta _ { 1 } ) } - x _ { 1 } \\right] } \\mathrm { e x p } ( \\frac { 1 0 x _ { 1 } } { 1 + 1 0 x _ { 1 } / \\gamma } ) - x _ { 1 } } \\\\ { f _ { 2 } = x _ { 1 } - ( 1 + \\beta _ { 2 } ) x _ { 2 } + ( 1 - R ) \\displaystyle { \\left[ \\frac { D } { 1 0 } - \\beta _ { 1 } x _ { 1 } - ( 1 + \\beta _ { 2 } ) x _ { 2 } \\right] } \\mathrm { e x p } ( \\frac { 1 0 x _ { 2 } } { 1 + 1 0 x _ { 2 } / \\gamma } ) } \\end{array} \\right.\n$$",
        "text_format": "latex",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "其中： $x _ { 1 }$ 和 $x _ { 2 }$ 分别代表两个反应器中的无量纲温度； $\\gamma$ 表示无量纲激活能量， $\\gamma = 1 0 0 0$ ； $D$ 表示达姆科勒数， $D = 2 2$ ； $\\beta _ { \\mathfrak { i } }$ 和 $\\beta _ { 2 }$ 分别表示无量纲传热系数， $\\beta _ { 1 } = \\beta _ { 2 } = 2$ ； $R$ 表示循环率， $R = 0 . 9 6$ 0",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "现将MMODE和四种算法分别用来求解这一工程实例，评价指标峰比率和成功率的结果如表5所示。",
        "page_idx": 6
    },
    {
        "type": "table",
        "img_path": "images/ad35e4390a38934e5bc9abd01096c805944408838633e31f3893298d5afa1011.jpg",
        "table_caption": [
            "表5MMODE 和四个算法在工程实例上的结果"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>评价指标</td><td>MMODE</td><td>A-WeB</td><td>DN-NSGAII</td><td>NSGAII</td><td>Omni-Opt</td></tr><tr><td>峰比率</td><td>0.8571</td><td>0.8371</td><td>0.8367</td><td>0.8385</td><td>0.8543</td></tr><tr><td>成功率</td><td>0.1569</td><td>0.1176</td><td>0.0784</td><td>0.0784</td><td>0.0980</td></tr></table></body></html>",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "从表5可以看出，在峰比率上，五种算法的结果总体相差较小，MMODE峰比率最大；在成功率上，五种算法的成功率都不高，但相比较而言，MMODE有最大的成功率。综合比较峰比率和成功率的结果可以得出，MMODE在非绝缘搅拌釜式反应器上的应用也比其他四种算法具有更好的有效性。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "6 结束语",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "本文主要介绍了非线性方程组的求解，首先总结了将非线性方程组转换为优化问题的主要方法；然后根据当前算法存在的问题，提出了一种多模态多目标差分进化算法。该算法的主要改进包括种群预选择机制和边界选取方法，这些改进能够增加决策空间解的多样性。为了验证多模态多目标差分进化算法的有效性，对5个测试函数进行了51次独立实验。最后经过与四种算法得出的结果进行比较，可以说明多模态多目标差分进化算法在峰比率和成功率两个指标上都有一定的优势。另外，通过求解一个具体的工程实例，也进一步验证了所提算法的有效性。因此，多模态多目标差分进化算法是一种有效求解非线性方程组的方法。不过，对于非线性方程组问题的求解，尤其是在成功率上，当前算法仍然还有很大的提升空间。下一步工作将继续优化算法，使之能够更好地应用到更多复杂的工程实例中。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "参考文献：",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "[1] 陶征，胡斌，刘旭．基于螺栓联接非线性系统的杆式超声电机建模与分 析[J].郑州大学学报：工学版,2017,38(1):78-82.   \n[2] 沈培辉，林述温．双钢轮压路机的非线性建模及其传动干扰分析 [J] 郑州大学学报：工学版,2017,38(2):66-71.   \n[3]罗亚中，袁端才，唐国金．求解非线性方程组的混合遗传算法[J].计 算机力学学报,2005,22(1):109-114.   \n[4]林彬，王正峰．基于差分进化算法求解非线性方程组[J].环球市场信 息导报,2016,2016(9): 78-78.   \n[5]王冬冬，周永权．人工鱼群算法在求解非线性方程组中的应用[J].计 算机应用研究,2007,24(6):242-244.   \n[6] 汪继文，杨丹，邱剑锋，等．改进人工蜂群算法求解非线性方程组[J]. 安徽大学学报：自然科学版，2014,2014(3):16-23.   \n[7]赵光伟，周永权．用改进的人工萤火虫群优化算法求解非线性方程组 [J]．数学的实践与认识,2016,46(1):176-186.   \n[8] 樊晓敏，许天亮．求解非线性方程组的改进布谷鸟算法[J].内蒙古师 大学报：自然汉文版,2017,46(1):13-16.   \n[9]陈海霞，杨铁贵．基于极大熵差分进化混合算法求解非线性方程组[J]. 计算机应用研究,2010,27(6):2028-2030.   \n[10]刘利斌，欧阳艾嘉，许卫明，等．求解非线性方程组的 BFGS 差分进化 算法[J].计算机工程与应用,2011,47(33):55-58.   \n[11]封全喜，刘三阳，唐国强，等．求解方程组的正交差分进化算法[J]. 计算机科学,2012,39(5):187-189.   \n[12] Wenyin Gong,Yong Wang,Zhihua Cai,et al.A weighted biobjective transformation technique for locating multiple optimal solutions of nonlinear equation systems [J]. IEEE Trans on Evolutionary Computation, 2017,21 (5): 697-713.   \n[13] Caitong Yue, Jing Liang，Boyang Qu. Multimodal multi-objective optimization:a preliminary study[C]// Proc of IEEE Congresson Evolutionary Computation. 2016: 2454-2461.   \n[14] Deb K,PratapA,Agarwal S,etal.A fast and elitist multi-objective genetic algorithm: NSGA-II[J]. IEEE Trans on Evolutionary Computation,2002,6 (2): 182-197.   \n[15] Deb K,Tiwari S.Omni-optimizer: a procedure for single and multi-objective optimization [J].Evolutionary Multi-Criterion Optimization,20o5,3410: 47-61.   \n[16] Hirsch MJ, Pardalos P M, Resende MG C.Solving systems of nonlinear equations with continuous GRASP [J].Nonlinear Analysis Real World Applications,2009,10 (4): 2000-2006. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 6
    }
]